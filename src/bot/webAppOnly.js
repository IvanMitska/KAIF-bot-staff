const userService = require('../services/userService');
const security = require('../utils/security');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
let handlersRegistered = false;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
const processedMessages = new Set();

module.exports = (bot) => {
  console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web App Only —Ä–µ–∂–∏–º–∞');
  
  if (handlersRegistered) {
    console.log('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    return;
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  bot.on('message', (msg) => {
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.id} (@${msg.from.username}): ${msg.text || '[–Ω–µ —Ç–µ–∫—Å—Ç]'}`);
    console.log('–¢–∏–ø —á–∞—Ç–∞:', msg.chat.type);
    console.log('Chat ID:', msg.chat.id);
  });
  
  // –ü–æ–ª—É—á–∞–µ–º URL Web App –æ–¥–∏–Ω —Ä–∞–∑
  let webAppUrl = process.env.WEBAPP_URL;
  if (!webAppUrl && process.env.RAILWAY_STATIC_URL) {
    webAppUrl = `https://${process.env.RAILWAY_STATIC_URL}/webapp/public`;
  } else if (!webAppUrl && process.env.RAILWAY_PUBLIC_DOMAIN) {
    webAppUrl = `https://${process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public`;
  } else if (!webAppUrl) {
    webAppUrl = 'https://telegram-report-bot-production.up.railway.app/webapp/public';
  }
  
  console.log(`üì± Web App URL: ${webAppUrl}`);
  
  // –ö–æ–º–∞–Ω–¥–∞ /start - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
  bot.onText(/^\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const messageId = msg.message_id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messageKey = `${chatId}-${messageId}`;
    if (processedMessages.has(messageKey)) {
      console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    processedMessages.add(messageKey);
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(() => {
      processedMessages.delete(messageKey);
    }, 5 * 60 * 1000);
    
    console.log(`üì± –ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    console.log('URL –¥–ª—è Web App:', webAppUrl);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const message = await bot.sendMessage(chatId, 
        `–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:`,
        {
          reply_markup: {
            inline_keyboard: [[
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å KAIF App',
                web_app: { url: webAppUrl }
              }
            ]]
          }
        }
      );
      
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start:', error.message);
      
      // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      try {
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      } catch (sendError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', sendError.message);
      }
    }
  });
  
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries
  bot.on('callback_query', async (callbackQuery) => {
    try {
      const userId = callbackQuery.from.id;
      const data = callbackQuery.data;
      
      console.log(`üîò Callback query –æ—Ç ${userId}: ${data}`);
      
      if (data === 'retry_start') {
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å Web App
        await bot.answerCallbackQuery(callbackQuery.id);
        
        try {
          const existingUser = await userService.getUserByTelegramId(userId);
          
          const welcomeText = existingUser 
            ? `–ü—Ä–∏–≤–µ—Ç, ${existingUser.name}! üëã\n\n–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:`
            : `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;
          
          await bot.editMessageText(welcomeText, {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id,
            reply_markup: {
              inline_keyboard: [[
                {
                  text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å KAIF App',
                  web_app: { url: webAppUrl }
                }
              ]]
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ retry_start:', error);
        }
      } else if (data === 'skip_photo') {
        // –û—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        if (global.pendingTaskPhotos) {
          global.pendingTaskPhotos.delete(userId);
        }
        
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: '‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ —Ñ–æ—Ç–æ'
        });
        
        await bot.editMessageText(
          '‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!',
          {
            chat_id: callbackQuery.message.chat.id,
            message_id: callbackQuery.message.message_id
          }
        );
      } else {
        // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
        await bot.answerCallbackQuery(callbackQuery.id, {
          text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web App –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
          show_alert: true
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ callback_query:', error);
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
  bot.on('photo', async (msg) => {
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã —Ñ–æ—Ç–æ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!global.pendingTaskPhotos || !global.pendingTaskPhotos.has(userId)) {
      return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ–º
    }
    
    const pendingTask = global.pendingTaskPhotos.get(userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç (30 –º–∏–Ω—É—Ç)
    if (Date.now() - pendingTask.timestamp > 30 * 60 * 1000) {
      global.pendingTaskPhotos.delete(userId);
      return;
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ (–±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
      const photo = msg.photo[msg.photo.length - 1];
      const file = await bot.getFile(photo.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
      
      console.log('Photo received for task:', pendingTask.taskId, 'from user:', userId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Notion —Å —Ñ–æ—Ç–æ
      const notionService = require('../services/notionService');
      await notionService.addPhotoToTask(pendingTask.taskId, fileUrl, msg.caption || '');
      
      // –û—á–∏—â–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ
      global.pendingTaskPhotos.delete(userId);
      
      await bot.sendMessage(chatId, 
        'üì∏ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∫ –∑–∞–¥–∞—á–µ!',
        {
          reply_markup: {
            inline_keyboard: [[
              {
                text: 'üì± –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ KAIF App',
                web_app: { url: `https://${process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public` }
              }
            ]]
          }
        }
      );
    } catch (error) {
      console.error('Error processing photo:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /help
  bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    console.log(`‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    try {
      await bot.sendMessage(chatId, 
        '‚ÑπÔ∏è *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n' +
        '‚Ä¢ /start - –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n' +
        '‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n' +
        '–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              {
                text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å KAIF App',
                web_app: { url: webAppUrl }
              }
            ]]
          }
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ /help:', error);
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ /reset_limit (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
  bot.onText(/^\/reset_limit/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –¢–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const MANAGER_IDS = [385436658, 1734337242];
    if (!MANAGER_IDS.includes(userId)) {
      return;
    }
    
    // –û—á–∏—â–∞–µ–º rate limiter
    const cleaned = security.cleanupRateLimiter();
    await bot.sendMessage(chatId, `‚úÖ Rate limiter –æ—á–∏—â–µ–Ω. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${cleaned}`);
  });
  
  handlersRegistered = true;
  console.log('‚úÖ Web App Only –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
};