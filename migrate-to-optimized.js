#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * 
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:
 * 1. –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
 * 2. –ó–∞–º–µ–Ω—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã notionService –Ω–∞ optimizedNotionService
 * 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞
 * 4. –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
 */

const fs = require('fs').promises;
const path = require('path');

async function backup(filePath) {
  const backupPath = filePath + '.backup';
  try {
    await fs.copyFile(filePath, backupPath);
    console.log(`‚úÖ Backup created: ${backupPath}`);
  } catch (error) {
    console.error(`‚ùå Failed to backup ${filePath}:`, error.message);
  }
}

async function replaceInFile(filePath, searchValue, replaceValue) {
  try {
    let content = await fs.readFile(filePath, 'utf8');
    const originalContent = content;
    
    content = content.replace(new RegExp(searchValue, 'g'), replaceValue);
    
    if (content !== originalContent) {
      await fs.writeFile(filePath, content);
      console.log(`‚úÖ Updated: ${filePath}`);
      return true;
    }
    return false;
  } catch (error) {
    console.error(`‚ùå Failed to update ${filePath}:`, error.message);
    return false;
  }
}

async function migrateFiles() {
  console.log('üîÑ Starting migration to optimized version...\n');
  
  // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
  const filesToMigrate = [
    'src/bot/handlers/start.js',
    'src/bot/handlers/report.js',
    'src/bot/handlers/tasks.js',
    'src/bot/handlers/taskList.js',
    'src/bot/handlers/taskCreation.js',
    'src/bot/handlers/quickTask.js',
    'src/bot/handlers/quickTaskMenu.js',
    'src/bot/handlers/commands.js',
    'src/bot/handlers/callbackHandler.js',
    'src/bot/handlers/mainCallbackHandler.js',
    'src/services/schedulerService.js',
    'src/services/userService.js',
    'webapp/api/notion.js',
    'webapp/api/reports.js',
    'webapp/api/tasks.js',
    'webapp/api/users.js',
    'webapp/api/attendance.js'
  ];
  
  console.log('üìÅ Creating backups...');
  for (const file of filesToMigrate) {
    const filePath = path.join(process.cwd(), file);
    try {
      await fs.access(filePath);
      await backup(filePath);
    } catch {
      console.log(`‚ö†Ô∏è File not found: ${file}`);
    }
  }
  
  console.log('\nüìù Updating imports...');
  let updatedCount = 0;
  
  for (const file of filesToMigrate) {
    const filePath = path.join(process.cwd(), file);
    try {
      await fs.access(filePath);
      
      // –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
      const updated = await replaceInFile(
        filePath,
        "require\\(['\"].*\\/notionService['\"]\\)",
        "require('../services/optimizedNotionService')"
      );
      
      if (updated) updatedCount++;
    } catch {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
  }
  
  console.log(`\n‚úÖ Updated ${updatedCount} files`);
  
  // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  console.log('\nüìÑ Creating configuration file...');
  const configContent = `// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
module.exports = {
  // –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Notion (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  SYNC_INTERVAL: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  
  // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  BATCH_SIZE: 10,
  
  // –í—Ä–µ–º—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –¥–Ω—è—Ö
  DATA_RETENTION_DAYS: 30,
  
  // –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
  AUTO_SYNC_ENABLED: true,
  
  // –í–∫–ª—é—á–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
  CACHE_ENABLED: true,
  
  // –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞
  CACHE_DB_PATH: 'cache.db'
};`;
  
  await fs.writeFile(
    path.join(process.cwd(), 'src/config/optimized.config.js'),
    configContent
  );
  console.log('‚úÖ Configuration file created');
  
  // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  console.log('\nüìÑ Creating initialization script...');
  const initScript = `#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –ó–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */

require('dotenv').config();
const { getInstance: getCacheInstance } = require('./src/services/cacheService');
const { getInstance: getSyncInstance } = require('./src/services/syncService');

async function initialize() {
  console.log('üöÄ Initializing optimized system...\\n');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
    console.log('üì¶ Initializing cache database...');
    const cache = await getCacheInstance();
    const stats = await cache.getCacheStats();
    console.log('‚úÖ Cache initialized');
    console.log('   Tables:', Object.keys(stats).filter(k => k !== 'sizeBytes' && k !== 'sizeMB').join(', '));
    console.log('   Database size:', stats.sizeMB + ' MB\\n');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    console.log('üîÑ Initializing sync service...');
    const sync = await getSyncInstance();
    console.log('‚úÖ Sync service initialized');
    console.log('   Auto-sync enabled');
    console.log('   Sync interval: 5 minutes\\n');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const syncStats = await sync.getStats();
    console.log('üìä System statistics:');
    console.log('   Cached users:', syncStats.cache.users);
    console.log('   Cached reports:', syncStats.cache.reports);
    console.log('   Cached tasks:', syncStats.cache.tasks);
    console.log('   Cached attendance:', syncStats.cache.attendance);
    
    console.log('\\n‚úÖ System initialized successfully!');
    console.log('\\nüí° Tips:');
    console.log('   - First launch will sync all data from Notion (may take 1-2 minutes)');
    console.log('   - Subsequent launches will be instant');
    console.log('   - Data syncs automatically every 5 minutes');
    console.log('   - All changes are saved locally first, then synced');
    
    process.exit(0);
  } catch (error) {
    console.error('\\n‚ùå Initialization failed:', error.message);
    process.exit(1);
  }
}

initialize();`;
  
  await fs.writeFile(
    path.join(process.cwd(), 'init-optimized.js'),
    initScript
  );
  await fs.chmod(path.join(process.cwd(), 'init-optimized.js'), '755');
  console.log('‚úÖ Initialization script created');
  
  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ MIGRATION COMPLETED SUCCESSFULLY!');
  console.log('='.repeat(60));
  
  console.log('\nüìã Next steps:');
  console.log('1. Install SQLite dependency:');
  console.log('   npm install sqlite3');
  console.log('\n2. Initialize the optimized system:');
  console.log('   node init-optimized.js');
  console.log('\n3. Test the bot:');
  console.log('   npm start');
  console.log('\n4. If everything works, you can delete backup files:');
  console.log('   find . -name "*.backup" -delete');
  
  console.log('\n‚ö†Ô∏è Important notes:');
  console.log('- First sync may take 1-2 minutes to load all data');
  console.log('- After initial sync, bot will respond instantly');
  console.log('- All data is saved to Notion in background');
  console.log('- Check cache.db file for local data storage');
  console.log('- Logs will show cache hits/misses for monitoring');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrateFiles().catch(console.error);