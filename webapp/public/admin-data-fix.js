// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –í –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò =====

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ dashboard —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function loadDashboard() {
    try {
        console.log('Loading real dashboard data...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
        const headers = tg.initData ? { 'X-Telegram-Init-Data': tg.initData } : {};
        const testParam = !tg.initData ? '?test=1' : '';
        
        const [statsRes, reportsRes, attendanceRes] = await Promise.all([
            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            fetch(`${API_URL}/api/admin/dashboard/stats${testParam}`, { headers }),
            // –û—Ç—á–µ—Ç—ã 
            fetch(`${API_URL}/api/admin/reports${testParam}`, { headers }),
            // –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ
            fetch(`${API_URL}/api/admin/attendance${testParam}`, { headers })
        ]);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (statsRes.ok) {
            const stats = await statsRes.json();
            console.log('Real stats loaded:', stats);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const totalEmployees = stats.totalEmployees || 8;
            const todayReportsCount = stats.todayReports || 0;
            const missingReportsCount = Math.max(0, totalEmployees - todayReportsCount);
            const reportsPercentage = totalEmployees > 0 ? Math.round((todayReportsCount / totalEmployees) * 100) : 0;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            updateElementSafely('dashboardTodayReports', todayReportsCount);
            updateElementSafely('dashboardMissingReports', missingReportsCount);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            const percentElement = document.querySelector('.metric-trend .trend-value');
            if (percentElement) {
                percentElement.textContent = `${reportsPercentage > 0 ? '+' : ''}${reportsPercentage}%`;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å —Ç—Ä–µ–Ω–¥–∞
                const trendContainer = percentElement.closest('.metric-trend');
                if (trendContainer) {
                    trendContainer.classList.remove('positive', 'negative');
                    trendContainer.classList.add(reportsPercentage >= 50 ? 'positive' : 'negative');
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            const progressBar = document.querySelector('.metric-card.primary .progress-fill');
            if (progressBar) {
                progressBar.style.width = `${reportsPercentage}%`;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
            const sublabel = document.querySelector('.metric-card.primary .metric-sublabel');
            if (sublabel) {
                sublabel.textContent = `–∏–∑ ${totalEmployees} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á –∏–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (statsRes.ok) {
            const stats = await statsRes.json();
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–∞—Ö –∏–∑ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            const activeTasks = stats.activeTasks || 0;
            const completedToday = stats.completedToday || 0;
            const totalTasks = stats.totalTasks || 0;
            const completionRate = totalTasks > 0 ? Math.round((completedToday / totalTasks) * 100) : 0;
            
            updateElementSafely('dashboardActiveTasks', activeTasks);
            updateElementSafely('dashboardCompletedToday', completedToday);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
            const tasksPercentElement = document.querySelector('.metric-card.success .metric-trend .trend-value');
            if (tasksPercentElement) {
                tasksPercentElement.textContent = `${completionRate}%`;
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        if (attendanceRes.ok) {
            const attendance = await attendanceRes.json();
            console.log('Attendance data loaded:', attendance);
            
            const presentCount = attendance.present || 0;
            const totalEmployees = attendance.total || 8;
            const attendanceRate = totalEmployees > 0 ? Math.round((presentCount / totalEmployees) * 100) : 0;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
            updateAttendanceWidget(presentCount, totalEmployees, attendanceRate);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        loadRealActivityChart();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        loadRealTopEmployees();
        
    } catch (error) {
        console.error('Error loading real dashboard data:', error);
        
        // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–∏
        loadFallbackDashboard();
    }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
function updateElementSafely(elementId, value) {
    const element = document.getElementById(elementId);
    if (element) {
        element.textContent = value;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
function updateAttendanceWidget(present, total, percentage) {
    const widget = document.querySelector('.attendance-widget');
    if (!widget) return;
    
    let html = `
        <div class="widget-header">
            <div class="widget-title">
                <i data-lucide="users"></i>
                –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Å–µ–≥–æ–¥–Ω—è
            </div>
            <div class="widget-action">${percentage}%</div>
        </div>
        <div class="attendance-stats">
            <div class="attendance-stat">
                <div class="stat-value">${present}</div>
                <div class="stat-label">–ù–∞ –º–µ—Å—Ç–µ</div>
            </div>
            <div class="attendance-stat">
                <div class="stat-value">${total - present}</div>
                <div class="stat-label">–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</div>
            </div>
        </div>
    `;
    
    widget.innerHTML = html;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    if (window.lucide) {
        lucide.createIcons();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function loadRealActivityChart() {
    try {
        const response = await fetch(`${API_URL}/api/admin/activity/week`, {
            headers: { 'X-Telegram-Init-Data': tg.initData }
        });
        
        if (response.ok) {
            const weekData = await response.json();
            console.log('Week activity data:', weekData);
            
            const container = document.getElementById('activityChart');
            if (!container) return;
            
            // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            const days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];
            const maxValue = Math.max(...weekData.map(d => d.count || 0), 1);
            
            let html = '<div class="chart-bars-container">';
            
            weekData.forEach((day, index) => {
                const height = (day.count / maxValue) * 120;
                html += `
                    <div class="chart-bar-group">
                        <div class="chart-bar" style="height: ${height}px;" title="${day.count} –æ—Ç—á–µ—Ç–æ–≤">
                            <span class="bar-value">${day.count}</span>
                        </div>
                        <span class="bar-label">${days[index]}</span>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }
    } catch (error) {
        console.error('Error loading activity chart:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
async function loadRealTopEmployees() {
    try {
        const response = await fetch(`${API_URL}/api/admin/employees/top`, {
            headers: { 'X-Telegram-Init-Data': tg.initData }
        });
        
        if (response.ok) {
            const topEmployees = await response.json();
            console.log('Top employees:', topEmployees);
            
            const container = document.getElementById('topEmployees');
            if (!container) return;
            
            let html = '<div class="top-employees-list">';
            
            topEmployees.slice(0, 5).forEach((employee, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}`;
                html += `
                    <div class="top-employee-item">
                        <div class="top-position">${medal}</div>
                        <div class="top-employee-info">
                            <div class="employee-name">${employee.name}</div>
                            <div class="employee-score">${employee.score} –±–∞–ª–ª–æ–≤</div>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            container.innerHTML = html;
        }
    } catch (error) {
        console.error('Error loading top employees:', error);
    }
}

// –†–µ–∑–µ—Ä–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
function loadFallbackDashboard() {
    console.log('Loading fallback dashboard data...');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω—É–ª–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    updateElementSafely('dashboardTodayReports', 0);
    updateElementSafely('dashboardMissingReports', 8);
    updateElementSafely('dashboardActiveTasks', 0);
    updateElementSafely('dashboardCompletedToday', 0);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã –Ω–∞ 0
    const progressBars = document.querySelectorAll('.progress-fill');
    progressBars.forEach(bar => {
        bar.style.width = '0%';
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const notification = document.createElement('div');
    notification.className = 'error-notification';
    notification.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(239, 68, 68, 0.9);
        color: white;
        padding: 12px 24px;
        border-radius: 8px;
        z-index: 9999;
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
let dashboardUpdateInterval = null;

function startDashboardAutoUpdate() {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (dashboardUpdateInterval) {
        clearInterval(dashboardUpdateInterval);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    dashboardUpdateInterval = setInterval(() => {
        if (document.getElementById('adminPanel').classList.contains('active')) {
            console.log('Auto-updating dashboard...');
            loadDashboard();
        }
    }, 30000);
}

// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
function stopDashboardAutoUpdate() {
    if (dashboardUpdateInterval) {
        clearInterval(dashboardUpdateInterval);
        dashboardUpdateInterval = null;
    }
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–±–æ–≤
const originalSwitchAdminTab = window.switchAdminTab;
window.switchAdminTab = function(tab) {
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    if (originalSwitchAdminTab) {
        originalSwitchAdminTab.call(this, tab);
    }
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ dashboard, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (tab === 'dashboard') {
        loadDashboard(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        startDashboardAutoUpdate();
    } else {
        stopDashboardAutoUpdate();
    }
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é loadDashboard
window.loadDashboard = loadDashboard;
window.loadRealDashboard = loadDashboard; // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.startDashboardAutoUpdate = startDashboardAutoUpdate;
window.stopDashboardAutoUpdate = stopDashboardAutoUpdate;