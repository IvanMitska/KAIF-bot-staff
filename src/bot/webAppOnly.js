const userService = require('../services/userService');
const security = require('../utils/security');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
let handlersRegistered = false;

module.exports = (bot) => {
  console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web App Only —Ä–µ–∂–∏–º–∞');
  
  if (handlersRegistered) {
    console.log('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º URL Web App –æ–¥–∏–Ω —Ä–∞–∑
  let webAppUrl = process.env.WEBAPP_URL;
  if (!webAppUrl && process.env.RAILWAY_STATIC_URL) {
    webAppUrl = `https://${process.env.RAILWAY_STATIC_URL}/webapp/public`;
  } else if (!webAppUrl && process.env.RAILWAY_PUBLIC_DOMAIN) {
    webAppUrl = `https://${process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public`;
  } else if (!webAppUrl) {
    webAppUrl = 'https://telegram-report-bot-production.up.railway.app/webapp/public';
  }
  
  console.log(`üì± Web App URL: ${webAppUrl}`);
  
  // –ö–æ–º–∞–Ω–¥–∞ /start - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
  bot.onText(/^\/start$/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    console.log(`üì± –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (@${msg.from.username})`);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!security.isUserAuthorized(userId)) {
      console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`);
      await bot.sendMessage(chatId, 
        'üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n' +
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
      return;
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await userService.getUserByTelegramId(userId);
      
      const welcomeText = existingUser 
        ? `–ü—Ä–∏–≤–µ—Ç, ${existingUser.name}! üëã\n\n–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:`
        : `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É Web App –ë–ï–ó reply_markup –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      await bot.sendMessage(chatId, welcomeText, {
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å KAIF App',
              web_app: { url: webAppUrl }
            }
          ]],
          remove_keyboard: true // –£–±–∏—Ä–∞–µ–º –ª—é–±—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
      await bot.sendMessage(chatId, 
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', 
        { 
          reply_markup: { 
            remove_keyboard: true 
          } 
        }
      );
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ù–ï —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ message
  // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–∞–∂–º–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏)
  bot.on('callback_query', async (callbackQuery) => {
    try {
      await bot.answerCallbackQuery(callbackQuery.id, {
        text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web App –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
        show_alert: true
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ callback_query:', error);
    }
  });
  
  handlersRegistered = true;
  console.log('‚úÖ Web App Only –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã');
};