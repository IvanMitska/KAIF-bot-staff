// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú –° –ó–ê–î–ê–ß–ê–ú–ò =====
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –∑–∞–¥–∞—á, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –¥–≤–æ–π–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º

console.log('üìã Loading task-fixes.js');

// –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîß Applying task fixes...');

    // 1. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ö–ê –ü–û –ó–ê–î–ê–ß–ê–ú
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è showTaskDetails –¥–æ—Å—Ç—É–ø–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
    if (typeof window.showTaskDetails !== 'function') {
        console.log('‚ö†Ô∏è showTaskDetails not found, creating fallback...');

        window.showTaskDetails = async function(taskId) {
            console.log('üìã Opening task details:', taskId);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è openTaskDetail
            if (typeof window.openTaskDetail === 'function') {
                await window.openTaskDetail(taskId);
                return;
            }

            // –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            const task = window.currentTasks?.find(t => String(t.id) === String(taskId));
            if (task) {
                alert(`–ó–∞–¥–∞—á–∞: ${task.title}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n–°—Ç–∞—Ç—É—Å: ${task.status}\n–î–µ–¥–ª–∞–π–Ω: ${task.deadline}`);
            } else {
                console.error('Task not found:', taskId);
                alert('–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
        };
    }

    // 2. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ó–ê–î–ê–ß
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –¥–≤–æ–π–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    let isSubmittingTask = false;
    let lastSubmittedTask = null;

    const originalSubmitTask = window.submitTask;
    window.submitTask = async function(event) {
        console.log('üîß Enhanced submitTask called');
        event.preventDefault();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
        if (isSubmittingTask) {
            console.log('‚ö†Ô∏è Task submission already in progress, blocking duplicate');
            return;
        }

        const formData = new FormData(event.target);
        const taskData = {
            title: formData.get('title'),
            description: formData.get('description'),
            deadline: formData.get('deadline'),
            priority: formData.get('priority'),
            assigneeId: formData.get('employee')
        };

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        if (lastSubmittedTask &&
            lastSubmittedTask.title === taskData.title &&
            lastSubmittedTask.assigneeId === taskData.assigneeId &&
            (Date.now() - lastSubmittedTask.timestamp) < 5000) {
            console.log('‚ö†Ô∏è Duplicate task detected, blocking submission');
            alert('–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —É–∂–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞');
            return;
        }

        isSubmittingTask = true;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
        lastSubmittedTask = {
            ...taskData,
            timestamp: Date.now()
        };

        try {
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if (originalSubmitTask) {
                await originalSubmitTask.call(this, event);
            } else {
                // –ò–Ω–∞—á–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–∞–º–∏
                const tg = window.Telegram?.WebApp;
                const response = await fetch('/api/tasks', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-Telegram-Init-Data': tg?.initData || ''
                    },
                    body: JSON.stringify(taskData)
                });

                if (response.ok) {
                    const result = await response.json();
                    console.log('‚úÖ Task created:', result);

                    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                    if (typeof closeTaskModal === 'function') {
                        closeTaskModal();
                    }

                    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                    if (typeof loadTasks === 'function') {
                        await loadTasks();
                    }

                    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if (tg?.HapticFeedback) {
                        tg.HapticFeedback.notificationOccurred('success');
                    }
                    alert('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞');
                } else {
                    throw new Error(`HTTP ${response.status}`);
                }
            }
        } catch (error) {
            console.error('‚ùå Error creating task:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: ' + error.message);
        } finally {
            isSubmittingTask = false;

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                isSubmittingTask = false;
            }, 2000);
        }
    };

    // 3. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï EVENT DELEGATION –î–õ–Ø –ó–ê–î–ê–ß
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª–∏–∫–∏ –ø–æ –∑–∞–¥–∞—á–∞–º —Ä–∞–±–æ—Ç–∞—é—Ç
    const tasksList = document.getElementById('tasksList');
    if (tasksList) {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        const oldHandler = tasksList.onclick;
        tasksList.onclick = null;

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        tasksList.addEventListener('click', function(e) {
            // –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å data-task-id
            const taskElement = e.target.closest('[data-task-id]');
            if (taskElement) {
                const taskId = taskElement.getAttribute('data-task-id');
                console.log('üñ±Ô∏è Task clicked:', taskId);

                // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ø–æ –∫–Ω–æ–ø–∫–µ –¥–µ–π—Å—Ç–≤–∏—è
                if (e.target.closest('.task-action-btn, .btn-action, button')) {
                    console.log('üîò Action button clicked, not opening details');
                    return;
                }

                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
                if (typeof window.showTaskDetails === 'function') {
                    window.showTaskDetails(taskId);
                } else if (typeof window.handleTaskClick === 'function') {
                    window.handleTaskClick(taskId);
                } else {
                    console.error('No task detail handler found');
                }
            }
        }, true); // –ò—Å–ø–æ–ª—å–∑—É–µ–º capture phase
    }

    // 4. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò –ó–ê–î–ê–ß
    const originalLoadTasks = window.loadTasks;
    window.loadTasks = async function() {
        console.log('üîß Enhanced loadTasks called');

        try {
            // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if (originalLoadTasks) {
                await originalLoadTasks();
            }

            // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∑–∞–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≥–ª–æ–±–∞–ª—å–Ω–æ
            if (!window.currentTasks && window.KaifApp?.tasks) {
                window.currentTasks = window.KaifApp.tasks;
            }

            console.log('‚úÖ Tasks loaded:', window.currentTasks?.length || 0);
        } catch (error) {
            console.error('‚ùå Error loading tasks:', error);
        }
    };

    // 5. –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê –ó–ê–î–ê–ß
    const originalUpdateTaskStatus = window.updateTaskStatus;
    window.updateTaskStatus = async function(taskId, newStatus) {
        console.log('üîß Updating task status:', taskId, newStatus);

        try {
            const tg = window.Telegram?.WebApp;
            const response = await fetch(`/api/tasks/${taskId}/status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Telegram-Init-Data': tg?.initData || ''
                },
                body: JSON.stringify({ status: newStatus })
            });

            if (response.ok) {
                console.log('‚úÖ Task status updated');

                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
                if (window.currentTasks) {
                    const task = window.currentTasks.find(t => String(t.id) === String(taskId));
                    if (task) {
                        task.status = newStatus;
                    }
                }

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                if (typeof loadTasks === 'function') {
                    await loadTasks();
                }

                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (tg?.HapticFeedback) {
                    tg.HapticFeedback.impactOccurred('light');
                }
            } else {
                throw new Error(`HTTP ${response.status}`);
            }
        } catch (error) {
            console.error('‚ùå Error updating task status:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏');
        }
    };

    console.log('‚úÖ Task fixes applied successfully');
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
window.TaskFixes = {
    version: '1.0.0',
    initialized: true
};