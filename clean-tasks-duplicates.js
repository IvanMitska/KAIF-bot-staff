require('dotenv').config();
const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function cleanDuplicateTasks() {
  console.log('üîç –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–¥–∞—á...');

  try {
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é –∏ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
    const findDuplicatesQuery = `
      WITH duplicates AS (
        SELECT
          id,
          data->>'title' as title,
          data->>'assigneeId' as assignee_id,
          data->>'createdAt' as created_at,
          ROW_NUMBER() OVER (
            PARTITION BY
              data->>'title',
              data->>'assigneeId',
              DATE(CAST(data->>'createdAt' AS TIMESTAMP))
            ORDER BY created_at DESC
          ) as rn
        FROM tasks
        WHERE data->>'title' IS NOT NULL
      )
      SELECT id, title, assignee_id, created_at
      FROM duplicates
      WHERE rn > 1
    `;

    const duplicatesResult = await pool.query(findDuplicatesQuery);

    if (duplicatesResult.rows.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${duplicatesResult.rows.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);

    duplicatesResult.rows.forEach(task => {
      console.log(`  - ID: ${task.id}, Title: ${task.title}, Assignee: ${task.assignee_id}`);
    });

    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const readline = require('readline');
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });

    const answer = await new Promise(resolve => {
      rl.question('\n‚ùì –£–¥–∞–ª–∏—Ç—å —ç—Ç–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã? (y/n): ', resolve);
    });

    rl.close();

    if (answer.toLowerCase() === 'y') {
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const deleteQuery = `
        WITH duplicates AS (
          SELECT
            id,
            ROW_NUMBER() OVER (
              PARTITION BY
                data->>'title',
                data->>'assigneeId',
                DATE(CAST(data->>'createdAt' AS TIMESTAMP))
              ORDER BY created_at DESC
            ) as rn
          FROM tasks
          WHERE data->>'title' IS NOT NULL
        )
        DELETE FROM tasks
        WHERE id IN (
          SELECT id FROM duplicates WHERE rn > 1
        )
      `;

      const deleteResult = await pool.query(deleteQuery);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ ${deleteResult.rowCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    } else {
      console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanDuplicateTasks();