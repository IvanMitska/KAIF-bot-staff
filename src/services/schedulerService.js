const cron = require('node-cron');
const moment = require('moment-timezone');
const notionService = require('./notionService');
const userService = require('./userService');
const keyboards = require('../bot/keyboards/inline');

const scheduledReminders = new Map();

const schedulerService = {
  initScheduler(bot) {
    console.log('Initializing scheduler...');
    
    // –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 20:00 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¢–∞–∏–ª–∞–Ω–¥–∞
    cron.schedule('0 20 * * *', async () => {
      console.log('Running daily reminder at 20:00 Bangkok time');
      await sendDailyReminders(bot);
    }, {
      timezone: 'Asia/Bangkok'
    });

    // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ 21:00 –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –æ—Ç—á–µ—Ç
    cron.schedule('0 21 * * *', async () => {
      console.log('Running second reminder at 21:00 Bangkok time');
      await sendSecondReminders(bot);
    }, {
      timezone: 'Asia/Bangkok'
    });

    // –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å
    cron.schedule('0 0 * * *', async () => {
      console.log('Marking missed reports at midnight Bangkok time');
      await markMissedReports();
    }, {
      timezone: 'Asia/Bangkok'
    });

    console.log('Scheduler initialized successfully');
  }
};

async function sendDailyReminders(bot) {
  try {
    const activeUsers = await userService.getAllActiveUsers();
    const today = moment().tz('Asia/Bangkok').format('YYYY-MM-DD');
    
    for (const user of activeUsers) {
      try {
        const todayReport = await notionService.getTodayReport(user.telegramId);
        
        if (!todayReport) {
          await bot.sendMessage(user.telegramId,
            'üïê *–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞!*\n\n' +
            `–ü—Ä–∏–≤–µ—Ç, ${user.name}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ.\n\n` +
            '_–≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ –ø–∞—Ä—É –º–∏–Ω—É—Ç_',
            {
              parse_mode: 'Markdown',
              reply_markup: keyboards.reminderOptions()
            }
          );
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
          scheduledReminders.set(user.telegramId, {
            name: user.name,
            firstReminderSent: true
          });
        }
      } catch (error) {
        console.error(`Error sending reminder to user ${user.telegramId}:`, error);
      }
    }
  } catch (error) {
    console.error('Error in sendDailyReminders:', error);
  }
}

async function sendSecondReminders(bot) {
  try {
    for (const [telegramId, reminderData] of scheduledReminders) {
      try {
        const todayReport = await notionService.getTodayReport(telegramId);
        
        if (!todayReport && reminderData.firstReminderSent) {
          await bot.sendMessage(telegramId,
            '‚è∞ *–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n' +
            `${reminderData.name}, –≤—ã –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n` +
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–µ–ª–∏—Ç–µ —ç—Ç–æ–º—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
            {
              parse_mode: 'Markdown',
              reply_markup: keyboards.reminderOptions()
            }
          );
        }
      } catch (error) {
        console.error(`Error sending second reminder to user ${telegramId}:`, error);
      }
    }
  } catch (error) {
    console.error('Error in sendSecondReminders:', error);
  }
}

async function markMissedReports() {
  try {
    const activeUsers = await userService.getAllActiveUsers();
    const yesterday = moment().tz('Asia/Bangkok').subtract(1, 'days').format('YYYY-MM-DD');
    
    for (const user of activeUsers) {
      try {
        const yesterdayReport = await notionService.getTodayReport(user.telegramId);
        
        if (!yesterdayReport) {
          // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º –æ—Ç—á–µ—Ç–µ
          await notionService.createReport({
            date: yesterday,
            employeeName: user.name,
            telegramId: user.telegramId,
            whatDone: '–û—Ç—á–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
            problems: '–û—Ç—á–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
            goals: '–û—Ç—á–µ—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
            timestamp: moment().tz('Asia/Bangkok').toISOString(),
            status: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω'
          });
        }
      } catch (error) {
        console.error(`Error marking missed report for user ${user.telegramId}:`, error);
      }
    }
    
    // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduledReminders.clear();
  } catch (error) {
    console.error('Error in markMissedReports:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑ —á–∞—Å"
schedulerService.handleRemindLater = async (bot, chatId, userId) => {
  const reminderTime = moment().tz('Asia/Bangkok').add(1, 'hour');
  
  await bot.sendMessage(chatId,
    `‚è∞ –•–æ—Ä–æ—à–æ, —è –Ω–∞–ø–æ–º–Ω—é –≤–∞–º —á–µ—Ä–µ–∑ —á–∞—Å (–æ–∫–æ–ª–æ ${reminderTime.format('HH:mm')}).`
  );
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —á–∞—Å
  setTimeout(async () => {
    try {
      const todayReport = await notionService.getTodayReport(userId);
      
      if (!todayReport) {
        await bot.sendMessage(chatId,
          '‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ*\n\n' +
          '–ü—Ä–æ—à–µ–ª —á–∞—Å. –ü–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç!',
          {
            parse_mode: 'Markdown',
            reply_markup: keyboards.reminderOptions()
          }
        );
      }
    } catch (error) {
      console.error('Error in delayed reminder:', error);
    }
  }, 60 * 60 * 1000); // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
};

module.exports = schedulerService;