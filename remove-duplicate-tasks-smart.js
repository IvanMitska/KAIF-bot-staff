#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —É–º–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–¥–∞—á –≤ Notion
 * –û—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∞)
 */

require('dotenv').config();
const { Client } = require('@notionhq/client');

const notion = new Client({
  auth: process.env.NOTION_API_KEY
});

const TASKS_DB_ID = '24429e84-656d-8145-b032-dad938461018';

async function findAndRemoveSmartDuplicates() {
  console.log('üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∑–∞–¥–∞—á –≤ Notion...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    let allTasks = [];
    let hasMore = true;
    let startCursor = undefined;
    
    while (hasMore) {
      const response = await notion.databases.query({
        database_id: TASKS_DB_ID,
        start_cursor: startCursor,
        page_size: 100
      });
      
      allTasks = allTasks.concat(response.results);
      hasMore = response.has_more;
      startCursor = response.next_cursor;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ –∑–∞–¥–∞—á: ${allTasks.length}\n`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –¥–∞—Ç—ã)
    const taskGroups = {};
    
    for (const task of allTasks) {
      const title = task.properties['–ù–∞–∑–≤–∞–Ω–∏–µ']?.rich_text?.[0]?.text?.content || '';
      const assignee = task.properties['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å']?.rich_text?.[0]?.text?.content || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω';
      const status = task.properties['–°—Ç–∞—Ç—É—Å']?.select?.name || '–ù–æ–≤–∞—è';
      const deadline = task.properties['–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è']?.date?.start || null;
      const createdDate = task.properties['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']?.date?.start || task.created_time;
      const description = task.properties['–û–ø–∏—Å–∞–Ω–∏–µ']?.rich_text?.[0]?.text?.content || '';
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏
      if (!title.trim()) continue;
      
      // –ö–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ - –Ω–∞–∑–≤–∞–Ω–∏–µ + –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (–±–µ–∑ —É—á–µ—Ç–∞ –¥–∞—Ç—ã)
      const key = `${title.trim().toLowerCase()}|${assignee}`;
      
      if (!taskGroups[key]) {
        taskGroups[key] = [];
      }
      
      taskGroups[key].push({
        id: task.id,
        title,
        assignee,
        status,
        deadline,
        description,
        createdDate: new Date(createdDate),
        createdTime: new Date(task.created_time),
        lastEditedTime: new Date(task.last_edited_time)
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
    const toDelete = [];
    let groupsWithDuplicates = 0;
    
    for (const [key, tasks] of Object.entries(taskGroups)) {
      if (tasks.length > 1) {
        groupsWithDuplicates++;
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É:
        // 1. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ 18-19 –∞–≤–≥—É—Å—Ç–∞ 2025 (–Ω–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç)
        // 2. –ü–æ—Ç–æ–º –∑–∞–¥–∞—á–∏ —Å –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–º —Å—Ä–æ–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        // 3. –ü–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tasks.sort((a, b) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω—ã –ª–∏ –∑–∞–¥–∞—á–∏ 18-19 –∞–≤–≥—É—Å—Ç–∞ 2025
          const isAFromImport = a.createdTime >= new Date('2025-08-18') && a.createdTime < new Date('2025-08-20');
          const isBFromImport = b.createdTime >= new Date('2025-08-18') && b.createdTime < new Date('2025-08-20');
          
          if (isAFromImport && !isBFromImport) return -1;
          if (!isAFromImport && isBFromImport) return 1;
          
          // –ï—Å–ª–∏ –æ–±–µ –∏–∑ –∏–º–ø–æ—Ä—Ç–∞ –∏–ª–∏ –æ–±–µ –Ω–µ –∏–∑ –∏–º–ø–æ—Ä—Ç–∞, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –¥–µ–¥–ª–∞–π–Ω—É
          if (a.deadline && b.deadline) {
            const deadlineA = new Date(a.deadline);
            const deadlineB = new Date(b.deadline);
            // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–µ –¥–µ–¥–ª–∞–π–Ω—ã (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ)
            if (deadlineA > deadlineB) return -1;
            if (deadlineA < deadlineB) return 1;
          }
          
          // –ü–æ –¥–∞—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          return b.lastEditedTime - a.lastEditedTime;
        });
        
        const toKeep = tasks[0];
        const duplicatesToDelete = tasks.slice(1);
        
        console.log(`\nüìå –ì—Ä—É–ø–ø–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: "${toKeep.title}" (${toKeep.assignee})`);
        console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ø–∏–π: ${tasks.length}`);
        console.log(`   ‚úÖ –û—Å—Ç–∞–≤–ª—è–µ–º:`);
        console.log(`      - ID: ${toKeep.id.slice(0, 8)}...`);
        console.log(`      - –î–µ–¥–ª–∞–π–Ω: ${toKeep.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
        console.log(`      - –°–æ–∑–¥–∞–Ω–∞: ${toKeep.createdTime.toISOString().split('T')[0]}`);
        
        console.log(`   ‚ùå –£–¥–∞–ª—è–µ–º ${duplicatesToDelete.length} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:`);
        for (const task of duplicatesToDelete) {
          console.log(`      - ID: ${task.id.slice(0, 8)}... (–¥–µ–¥–ª–∞–π–Ω: ${task.deadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'})`);
          toDelete.push(task);
        }
      }
    }
    
    if (toDelete.length === 0) {
      console.log('\n‚úÖ –î—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      return;
    }
    
    console.log(`\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${groupsWithDuplicates} –≥—Ä—É–ø–ø —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –∫ —É–¥–∞–ª–µ–Ω–∏—é: ${toDelete.length}`);
    
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    console.log('\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤...\n');
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    let deleted = 0;
    let failed = 0;
    
    for (const task of toDelete) {
      try {
        await notion.pages.update({
          page_id: task.id,
          archived: true
        });
        deleted++;
        process.stdout.write(`\r–ü—Ä–æ–≥—Ä–µ—Å—Å: ${deleted}/${toDelete.length} —É–¥–∞–ª–µ–Ω–æ`);
      } catch (error) {
        failed++;
        console.error(`\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${task.id}: ${error.message}`);
      }
    }
    
    console.log(`\n\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: ${deleted} –∑–∞–¥–∞—á`);
    if (failed > 0) {
      console.log(`   –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: ${failed} –∑–∞–¥–∞—á`);
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`\nüìà –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    console.log(`   –ë—ã–ª–æ –∑–∞–¥–∞—á: ${allTasks.length}`);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${deleted}`);
    console.log(`   –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–¥–∞—á: ~${allTasks.length - deleted}`);
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
findAndRemoveSmartDuplicates();