const notionService = require('./notionService');
const { getInstance: getCacheInstance } = require('./cacheService');

class SyncService {
  constructor() {
    this.cache = null;
    this.isSyncing = false;
    this.syncInterval = null;
    this.syncQueue = [];
    this.SYNC_INTERVAL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç
    this.BATCH_SIZE = 10; // –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  }

  async initialize() {
    this.cache = await getCacheInstance();
    console.log('‚úÖ Sync service initialized');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    await this.initialSync();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    this.startPeriodicSync();
  }

  // ========== –ù–ê–ß–ê–õ–¨–ù–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ==========
  async initialSync() {
    console.log('üîÑ Starting initial sync from Notion...');
    
    try {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.syncUsersFromNotion();
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
      await this.syncRecentReportsFromNotion();
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
      await this.syncActiveTasksFromNotion();
      
      console.log('‚úÖ Initial sync completed');
    } catch (error) {
      console.error('‚ùå Initial sync failed:', error);
    }
  }

  // ========== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========
  async syncUsersFromNotion() {
    try {
      console.log('Syncing users from Notion...');
      const users = await notionService.getAllActiveUsers();
      
      for (const user of users) {
        await this.cache.cacheUser(user);
      }
      
      await this.cache.logSync('users', users.length, 'success');
      console.log(`‚úÖ Synced ${users.length} users`);
    } catch (error) {
      console.error('Error syncing users:', error);
      await this.cache.logSync('users', 0, 'failed', error.message);
    }
  }

  // ========== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –û–¢–ß–ï–¢–û–í ==========
  async syncRecentReportsFromNotion() {
    try {
      console.log('Syncing recent reports from Notion...');
      
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
      const endDate = new Date().toISOString().split('T')[0];
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - 7);
      const startDateISO = startDate.toISOString().split('T')[0];
      
      const reports = await notionService.getReportsForPeriod(startDateISO, endDate);
      
      for (const report of reports) {
        report.synced = true;
        await this.cache.cacheReport(report);
      }
      
      await this.cache.logSync('reports', reports.length, 'success');
      console.log(`‚úÖ Synced ${reports.length} reports`);
    } catch (error) {
      console.error('Error syncing reports:', error);
      await this.cache.logSync('reports', 0, 'failed', error.message);
    }
  }

  // ========== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ó–ê–î–ê–ß ==========
  async syncActiveTasksFromNotion() {
    try {
      console.log('Syncing active tasks from Notion...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
      const statuses = ['–ù–æ–≤–∞—è', '–í —Ä–∞–±–æ—Ç–µ', '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'];
      let allTasks = [];
      
      for (const status of statuses) {
        const tasks = await notionService.getAllTasks(status);
        allTasks = allTasks.concat(tasks);
      }
      
      for (const task of allTasks) {
        task.synced = true;
        await this.cache.cacheTask(task);
      }
      
      await this.cache.logSync('tasks', allTasks.length, 'success');
      console.log(`‚úÖ Synced ${allTasks.length} tasks`);
    } catch (error) {
      console.error('Error syncing tasks:', error);
      await this.cache.logSync('tasks', 0, 'failed', error.message);
    }
  }

  // ========== –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø ==========
  startPeriodicSync() {
    this.syncInterval = setInterval(async () => {
      if (!this.isSyncing) {
        await this.performSync();
      }
    }, this.SYNC_INTERVAL);
    
    console.log(`‚è∞ Periodic sync started (every ${this.SYNC_INTERVAL / 1000}s)`);
  }

  async performSync() {
    if (this.isSyncing) {
      console.log('‚ö†Ô∏è Sync already in progress, skipping...');
      return;
    }

    this.isSyncing = true;
    console.log('üîÑ Starting periodic sync...');

    try {
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Notion
      await this.syncToNotion();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Notion
      await this.syncFromNotion();
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
      await this.cache.cleanupOldData(30);
      
      console.log('‚úÖ Periodic sync completed');
    } catch (error) {
      console.error('‚ùå Periodic sync failed:', error);
    } finally {
      this.isSyncing = false;
    }
  }

  // ========== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –í NOTION ==========
  async syncToNotion() {
    console.log('üì§ Syncing local changes to Notion...');
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã
    await this.syncReportsToNotion();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    await this.syncTasksToNotion();
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —É—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
    await this.syncAttendanceToNotion();
  }

  async syncReportsToNotion() {
    try {
      const unsyncedReports = await this.cache.getUnsyncedReports();
      console.log(`Found ${unsyncedReports.length} unsynced reports`);
      
      for (const report of unsyncedReports) {
        try {
          // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –≤ Notion
          const notionReport = await notionService.createReport({
            employeeName: report.employee_name,
            telegramId: report.telegram_id,
            whatDone: report.what_done,
            problems: report.problems,
            goals: report.goals,
            date: report.date,
            timestamp: report.timestamp,
            status: report.status
          });
          
          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
          await this.cache.markReportSynced(report.id);
          console.log(`‚úÖ Synced report ${report.id}`);
        } catch (error) {
          console.error(`Failed to sync report ${report.id}:`, error);
        }
      }
    } catch (error) {
      console.error('Error syncing reports to Notion:', error);
    }
  }

  async syncTasksToNotion() {
    try {
      const unsyncedTasks = await this.cache.getUnsyncedTasks();
      console.log(`Found ${unsyncedTasks.length} unsynced tasks`);
      
      for (const task of unsyncedTasks) {
        try {
          if (task.id && task.id.startsWith('task-')) {
            // –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞–µ–º –≤ Notion
            const notionTask = await notionService.createTask({
              title: task.title,
              description: task.description,
              assigneeId: task.assignee_id,
              assigneeName: task.assignee_name,
              creatorId: task.creator_id,
              creatorName: task.creator_name,
              priority: task.priority,
              deadline: task.deadline
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –∫—ç—à–µ
            await this.cache.runQuery(
              `UPDATE tasks SET id = ? WHERE id = ?`,
              [notionTask.id, task.id]
            );
          } else {
            // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–¥–∞—á–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await notionService.updateTaskStatus(task.id, task.status);
          }
          
          await this.cache.markTaskSynced(task.id);
          console.log(`‚úÖ Synced task ${task.task_id}`);
        } catch (error) {
          console.error(`Failed to sync task ${task.id}:`, error);
        }
      }
    } catch (error) {
      console.error('Error syncing tasks to Notion:', error);
    }
  }

  async syncAttendanceToNotion() {
    try {
      const unsyncedAttendance = await this.cache.getUnsyncedAttendance();
      console.log(`Found ${unsyncedAttendance.length} unsynced attendance records`);
      
      for (const attendance of unsyncedAttendance) {
        try {
          if (!attendance.id.includes('notion-')) {
            // –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å - —Å–æ–∑–¥–∞–µ–º –≤ Notion
            const notionAttendance = await notionService.createAttendance({
              employeeId: attendance.employee_id,
              employeeName: attendance.employee_name,
              date: attendance.date,
              checkIn: attendance.check_in,
              location: attendance.location_in ? JSON.parse(attendance.location_in) : null
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º ID –≤ –∫—ç—à–µ
            await this.cache.runQuery(
              `UPDATE attendance SET id = ? WHERE id = ?`,
              [`notion-${notionAttendance.id}`, attendance.id]
            );
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å check-out, –æ–±–Ω–æ–≤–ª—è–µ–º
            if (attendance.check_out) {
              await notionService.updateAttendanceCheckOut(
                notionAttendance.id,
                attendance.check_out,
                attendance.location_out ? JSON.parse(attendance.location_out) : null
              );
            }
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            const notionId = attendance.id.replace('notion-', '');
            if (attendance.check_out) {
              await notionService.updateAttendanceCheckOut(
                notionId,
                attendance.check_out,
                attendance.location_out ? JSON.parse(attendance.location_out) : null
              );
            }
          }
          
          await this.cache.markAttendanceSynced(attendance.id);
          console.log(`‚úÖ Synced attendance for ${attendance.employee_name}`);
        } catch (error) {
          console.error(`Failed to sync attendance ${attendance.id}:`, error);
        }
      }
    } catch (error) {
      console.error('Error syncing attendance to Notion:', error);
    }
  }

  // ========== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ò–ó NOTION ==========
  async syncFromNotion() {
    console.log('üì• Syncing updates from Notion...');
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.syncUsersFromNotion();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
      const today = new Date().toISOString().split('T')[0];
      const todayReports = await notionService.getReportsForPeriod(today, today);
      for (const report of todayReports) {
        report.synced = true;
        await this.cache.cacheReport(report);
      }
      
      console.log('‚úÖ Synced updates from Notion');
    } catch (error) {
      console.error('Error syncing from Notion:', error);
    }
  }

  // ========== –£–¢–ò–õ–ò–¢–´ ==========
  async addToQueue(operation) {
    this.syncQueue.push(operation);
    
    // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –¥–æ—Å—Ç–∏–≥–ª–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞—Ç—á–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    if (this.syncQueue.length >= this.BATCH_SIZE) {
      await this.processSyncQueue();
    }
  }

  async processSyncQueue() {
    if (this.syncQueue.length === 0) return;
    
    const batch = this.syncQueue.splice(0, this.BATCH_SIZE);
    console.log(`Processing sync batch of ${batch.length} operations`);
    
    for (const operation of batch) {
      try {
        await operation();
      } catch (error) {
        console.error('Sync operation failed:', error);
      }
    }
  }

  async forceSync() {
    console.log('üîÑ Force sync initiated...');
    await this.performSync();
  }

  async getStats() {
    const cacheStats = await this.cache.getCacheStats();
    const lastSyncs = {};
    
    for (const table of ['users', 'reports', 'tasks', 'attendance']) {
      lastSyncs[table] = await this.cache.getLastSyncTime(table);
    }
    
    return {
      cache: cacheStats,
      lastSyncs,
      isSyncing: this.isSyncing,
      queueSize: this.syncQueue.length
    };
  }

  async stop() {
    if (this.syncInterval) {
      clearInterval(this.syncInterval);
      this.syncInterval = null;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –æ—á–µ—Ä–µ–¥—å
    await this.processSyncQueue();
    
    console.log('‚èπÔ∏è Sync service stopped');
  }
}

// Singleton
let syncInstance = null;

module.exports = {
  getInstance: async () => {
    if (!syncInstance) {
      syncInstance = new SyncService();
      await syncInstance.initialize();
    }
    return syncInstance;
  },
  SyncService
};