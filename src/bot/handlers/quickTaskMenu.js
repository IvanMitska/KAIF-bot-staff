const { getUser, getUsers, createTask } = require('../../services/notionService');
const moment = require('moment-timezone');

// –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–¥–∞—á
async function quickTaskKeyboard(userId) {
  const keyboard = {
    inline_keyboard: []
  };
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
    const users = await getUsers();
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ —Å–µ–±—è
    const availableUsers = users.filter(u => u.telegramId !== userId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    availableUsers.slice(0, 5).forEach(user => {
      keyboard.inline_keyboard.push([
        { text: `üìù ${user.name}`, callback_data: `quick_task_${user.telegramId}` }
      ]);
    });
    
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    keyboard.inline_keyboard.push([
      { text: '‚ûï –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', callback_data: 'new_task' }
    ]);
    
    keyboard.inline_keyboard.push([
      { text: '‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_menu' }
    ]);
  } catch (error) {
    console.error('Error creating quick task keyboard:', error);
  }
  
  return keyboard;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
async function handleQuickTaskMenu(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä
  const MANAGER_IDS = [385436658, 1734337242];
  if (!MANAGER_IDS.includes(userId)) {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏',
      show_alert: true
    });
    return;
  }
  
  const keyboard = await quickTaskKeyboard(userId);
  
  await bot.editMessageText(
    '‚ö° *–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏*\n\n' +
    '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:',
    {
      chat_id: chatId,
      message_id: callbackQuery.message.message_id,
      reply_markup: keyboard,
      parse_mode: 'Markdown'
    }
  );
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–¥–∞—á–∏
async function handleQuickTaskEmployee(bot, callbackQuery, employeeId) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  try {
    const employee = await getUser(employeeId);
    if (!employee) {
      await bot.sendMessage(chatId, '‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –ñ–¥–µ–º –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    await bot.editMessageText(
      `üë§ *${employee.name}*\n\n` +
      `‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "—Å–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞–≤—Ç—Ä–∞"):\n\n` +
      `üí° –ë–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç:\n` +
      `‚Ä¢ –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ 3 –¥–Ω—è\n` +
      `‚Ä¢ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫\n` +
      `‚Ä¢ —Å—Ä–æ—á–Ω–æ = –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown'
      }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–¥–∞—á–∏
    const { userStates } = require('../state');
    userStates[userId] = {
      state: 'quick_task_input',
      employeeId: employeeId,
      employeeName: employee.name
    };
    
  } catch (error) {
    console.error('Error in quick task employee selection:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –±—ã—Å—Ç—Ä–æ–π –∑–∞–¥–∞—á–∏
async function handleQuickTaskInput(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  const { userStates } = require('../state');
  const state = userStates[userId];
  
  if (!state || state.state !== 'quick_task_input') return false;
  
  try {
    // –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á—É
    const parsedData = parseQuickTask(text);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    const creator = await getUser(userId);
    const taskData = {
      title: text.slice(0, 50) + (text.length > 50 ? '...' : ''),
      description: text,
      assigneeId: state.employeeId,
      assigneeName: state.employeeName,
      creatorId: userId,
      creatorName: creator.name,
      priority: parsedData.priority,
      deadline: parsedData.deadline
    };
    
    await createTask(taskData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const deadlineText = moment(taskData.deadline).tz('Asia/Bangkok').format('DD.MM.YYYY');
    await bot.sendMessage(
      chatId,
      `‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
      `üë§ ${state.employeeName}\n` +
      `üìù ${taskData.title}\n` +
      `‚ö° ${taskData.priority}\n` +
      `üìÖ ${deadlineText}`,
      { parse_mode: 'Markdown' }
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    await bot.sendMessage(
      state.employeeId,
      `üîî *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç ${creator.name}!*\n\n` +
      `${text}\n\n` +
      `/tasks - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏`,
      { parse_mode: 'Markdown' }
    );
    
    delete userStates[userId];
    return true;
    
  } catch (error) {
    console.error('Error creating quick task:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    delete userStates[userId];
  }
  
  return false;
}

// –ü–∞—Ä—Å–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–¥–∞—á
function parseQuickTask(text) {
  const bangkokTz = 'Asia/Bangkok';
  const now = moment.tz(bangkokTz);
  const lowerText = text.toLowerCase();
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  let priority = '–°—Ä–µ–¥–Ω–∏–π';
  if (lowerText.includes('—Å—Ä–æ—á–Ω–æ') || lowerText.includes('–≤–∞–∂–Ω–æ')) {
    priority = '–í—ã—Å–æ–∫–∏–π';
  } else if (lowerText.includes('–Ω–µ —Å—Ä–æ—á–Ω–æ')) {
    priority = '–ù–∏–∑–∫–∏–π';
  }
  
  // –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–≤—Ç—Ä–∞)
  let deadline = now.clone().add(1, 'day').endOf('day').toISOString();
  
  if (lowerText.includes('—Å–µ–≥–æ–¥–Ω—è')) {
    deadline = now.clone().endOf('day').toISOString();
  } else if (lowerText.includes('–∑–∞–≤—Ç—Ä–∞')) {
    deadline = now.clone().add(1, 'day').endOf('day').toISOString();
  } else if (lowerText.includes('–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞')) {
    deadline = now.clone().add(2, 'days').endOf('day').toISOString();
  } else if (lowerText.includes('—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é')) {
    deadline = now.clone().add(7, 'days').endOf('day').toISOString();
  } else {
    const daysMatch = lowerText.match(/—á–µ—Ä–µ–∑\s+(\d+)\s+–¥[–µ–Ω—å|–Ω—è|–Ω–µ–π]/);
    if (daysMatch) {
      deadline = now.clone().add(parseInt(daysMatch[1]), 'days').endOf('day').toISOString();
    }
  }
  
  return { priority, deadline };
}

module.exports = {
  handleQuickTaskMenu,
  handleQuickTaskEmployee,
  handleQuickTaskInput
};