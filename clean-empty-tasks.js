const { Client } = require('@notionhq/client');
require('dotenv').config();

const notion = new Client({ auth: process.env.NOTION_API_KEY });
const TASKS_DB_ID = process.env.NOTION_DATABASE_TASKS_ID;

async function cleanEmptyTasks() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

    try {
        const response = await notion.databases.query({
            database_id: TASKS_DB_ID,
            page_size: 100
        });

        const tasks = response.results;
        console.log(`üìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ: ${tasks.length}\n`);

        const emptyTasks = [];
        const validTasks = [];

        tasks.forEach(task => {
            const title = task.properties['–ó–∞–¥–∞—á–∞']?.title?.[0]?.plain_text || '';
            const assignee = task.properties['–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å']?.people?.[0];
            const deadline = task.properties['–î–µ–¥–ª–∞–π–Ω']?.date?.start;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞—è –ª–∏ –∑–∞–¥–∞—á–∞
            if (!title.trim() && !assignee && !deadline) {
                emptyTasks.push({
                    id: task.id,
                    created: task.created_time,
                    status: task.properties['–°—Ç–∞—Ç—É—Å']?.select?.name || '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞'
                });
            } else {
                validTasks.push({
                    id: task.id,
                    title: title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    assignee: assignee?.name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
                    deadline: deadline || '–ù–µ—Ç —Å—Ä–æ–∫–∞',
                    status: task.properties['–°—Ç–∞—Ç—É—Å']?.select?.name || '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞'
                });
            }
        });

        console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á: ${validTasks.length}`);
        console.log(`‚ùå –ü—É—Å—Ç—ã—Ö –∑–∞–¥–∞—á: ${emptyTasks.length}\n`);

        if (validTasks.length > 0) {
            console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á:');
            validTasks.slice(0, 5).forEach((task, i) => {
                console.log(`${i + 1}. ${task.title} (${task.assignee}) - ${task.status}`);
            });
            console.log('');
        }

        if (emptyTasks.length === 0) {
            console.log('‚úÖ –ü—É—Å—Ç—ã—Ö –∑–∞–¥–∞—á –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }

        console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ ${emptyTasks.length} –ø—É—Å—Ç—ã—Ö –∑–∞–¥–∞—á`);
        console.log('–ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
        emptyTasks.slice(0, 5).forEach((task, i) => {
            console.log(`${i + 1}. ID: ${task.id.slice(0, 20)}... (${task.status}) - –°–æ–∑–¥–∞–Ω–æ: ${task.created}`);
        });
        console.log('\n‚è≥ –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...\n');

        await new Promise(resolve => setTimeout(resolve, 3000));

        let deleted = 0;
        for (const task of emptyTasks) {
            try {
                await notion.pages.update({
                    page_id: task.id,
                    archived: true
                });
                deleted++;
                if (deleted % 10 === 0) {
                    console.log(`üì¶ –£–¥–∞–ª–µ–Ω–æ ${deleted}/${emptyTasks.length}...`);
                }
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${task.id}:`, error.message);
            }
        }

        console.log(`\n‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`);
        console.log(`üìä –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: ${deleted} –∑–∞–¥–∞—á`);
        console.log(`üìã –û—Å—Ç–∞–ª–æ—Å—å –≤–∞–ª–∏–¥–Ω—ã—Ö –∑–∞–¥–∞—á: ${validTasks.length}`);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ:', error.message);
    }
}

cleanEmptyTasks();
