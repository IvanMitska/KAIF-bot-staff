#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram ID –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 * –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–ø–ø–∏–Ω–≥–∞ –∏–º–µ–Ω –Ω–∞ ID
 */

require('dotenv').config();
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

async function getUsersFromCache() {
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫—ç—à–∞ SQLite...\n');
    
    const dbPath = path.join(process.cwd(), 'cache.db');
    const db = new sqlite3.Database(dbPath);
    
    return new Promise((resolve, reject) => {
        db.all(
            `SELECT telegram_id, name, username, position FROM users WHERE is_active = 1 ORDER BY name`,
            [],
            (err, rows) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(rows);
                }
                db.close();
            }
        );
    });
}

async function getUsersFromNotion() {
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Notion...\n');
    
    try {
        const notionService = require('./src/services/notionService');
        const users = await notionService.getAllActiveUsers();
        return users.map(u => ({
            telegram_id: u.telegramId,
            name: u.name,
            username: u.username,
            position: u.position
        }));
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑ Notion:', error.message);
        return [];
    }
}

async function main() {
    console.log('üîç –ü–æ–∏—Å–∫ Telegram ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n');
    console.log('=' .repeat(50));
    
    let users = [];
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞
    try {
        users = await getUsersFromCache();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞\n');
    } catch (error) {
        console.log('‚ö†Ô∏è –ö—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ Notion...');
        users = await getUsersFromNotion();
    }
    
    if (users.length === 0) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.log('\n–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:');
        console.log('1. –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('2. –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ');
        return;
    }
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${users.length}\n`);
    console.log('=' .repeat(50));
    
    // –í—ã–≤–æ–¥–∏–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–∫—Ä–∏–ø—Ç –∏–º–ø–æ—Ä—Ç–∞
    console.log('\nüìã –°–ö–û–ü–ò–†–£–ô–¢–ï –≠–¢–û –í import-tasks-from-sheets.js:\n');
    console.log('const USER_MAPPING = {');
    
    const uniqueNames = new Set();
    users.forEach(user => {
        const firstName = user.name.split(' ')[0];
        if (!uniqueNames.has(firstName)) {
            console.log(`    '${firstName}': { telegramId: '${user.telegram_id}', name: '${user.name}' },`);
            uniqueNames.add(firstName);
        }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
    console.log(`    // –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–≤—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)`);
    console.log(`    '–ë–æ—Ä–∏—Å + –ö—Å–µ–Ω–∏—è': { telegramId: '${users[0]?.telegram_id || 'ID'}', name: '${users[0]?.name || '–ò–º—è'}' },`);
    console.log(`    '–ë–æ—Ä–∏—Å + –ò–≤–∞–Ω': { telegramId: '${users[0]?.telegram_id || 'ID'}', name: '${users[0]?.name || '–ò–º—è'}' },`);
    console.log(`    '–ú–∞–∫—Å–∏–º + –ë–æ—Ä–∏—Å': { telegramId: '${users[0]?.telegram_id || 'ID'}', name: '${users[0]?.name || '–ò–º—è'}' },`);
    console.log(`    '–î–º–∏—Ç—Ä–∏–π + –ú–∞–∫—Å–∏–º': { telegramId: '${users[0]?.telegram_id || 'ID'}', name: '${users[0]?.name || '–ò–º—è'}' },`);
    console.log(`    '–ò–≤–∞–Ω + –ë–æ—Ä–∏—Å': { telegramId: '${users[0]?.telegram_id || 'ID'}', name: '${users[0]?.name || '–ò–º—è'}' },`);
    console.log(`    '–ë–æ—Ä–∏—Å + –ò–≤–∞–Ω + –î–º–∏—Ç—Ä–∏–π': { telegramId: '${users[0]?.telegram_id || 'ID'}', name: '${users[0]?.name || '–ò–º—è'}' },`);
    console.log(`    '–ö—Å–µ–Ω–∏—è + –ê–ª–ª–∞': { telegramId: '${users[0]?.telegram_id || 'ID'}', name: '${users[0]?.name || '–ò–º—è'}' },`);
    console.log(`    '–ö—Å–µ–Ω–∏—è + –ê–ª–ª–∞ + –ï–ª–µ–Ω–∞': { telegramId: '${users[0]?.telegram_id || 'ID'}', name: '${users[0]?.name || '–ò–º—è'}' },`);
    console.log(`    '–ò–≥–æ—Ä—å + –ë–æ—Ä–∏—Å': { telegramId: '${users[0]?.telegram_id || 'ID'}', name: '${users[0]?.name || '–ò–º—è'}' },`);
    console.log('};');
    
    console.log('\n' + '=' .repeat(50));
    console.log('\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n');
    
    // –í—ã–≤–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    console.log('–ò–º—è'.padEnd(20) + 'Telegram ID'.padEnd(15) + 'Username'.padEnd(20) + '–î–æ–ª–∂–Ω–æ—Å—Ç—å');
    console.log('-'.repeat(80));
    
    users.forEach(user => {
        console.log(
            (user.name || '-').padEnd(20) + 
            (user.telegram_id || '-').padEnd(15) + 
            ('@' + (user.username || '-')).padEnd(20) + 
            (user.position || '-')
        );
    });
    
    console.log('\n' + '=' .repeat(50));
    console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:');
    console.log('1. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å USER_MAPPING –≤ —Ñ–∞–π–ª import-tasks-from-sheets.js');
    console.log('2. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –≤ CSV');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–ø–æ—Ä—Ç: node import-tasks-from-sheets.js --csv tasks.csv');
}

main().catch(console.error);