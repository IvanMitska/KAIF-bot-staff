const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

async function cleanDuplicates() {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...\n');

    try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—Å ID –Ω–∞—á–∏–Ω–∞—é—â–∏–º—Å—è —Å 'task-')
        const tempTasksResult = await pool.query(`
            SELECT id, title, assignee_id, created_date
            FROM tasks
            WHERE id LIKE 'task-%'
            ORDER BY created_date DESC
        `);

        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${tempTasksResult.rows.length}`);

        if (tempTasksResult.rows.length > 0) {
            console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á...');

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            const deleteResult = await pool.query(`
                DELETE FROM tasks
                WHERE id LIKE 'task-%'
            `);

            console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${deleteResult.rowCount}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        const remainingResult = await pool.query(`
            SELECT COUNT(*) as count FROM tasks
        `);

        console.log(`\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: ${remainingResult.rows[0].count}`);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
        const samplesResult = await pool.query(`
            SELECT id, title, assignee_name, status, created_date
            FROM tasks
            ORDER BY created_date DESC
            LIMIT 5
        `);

        console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á:');
        samplesResult.rows.forEach((task, i) => {
            console.log(`${i + 1}. ${task.title} (${task.assignee_name}) - ${task.status}`);
            console.log(`   ID: ${task.id}`);
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    } finally {
        await pool.end();
    }
}

cleanDuplicates();