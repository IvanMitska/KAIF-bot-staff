require('dotenv').config();
const databasePool = require('./src/services/databasePool');

async function removeDuplicateTasks() {
  try {
    console.log('üîç –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
    await databasePool.getPool();
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
    const findDuplicatesQuery = `
      SELECT title, assignee_id, MIN(id) as keep_id, COUNT(*) as count
      FROM tasks
      GROUP BY title, assignee_id
      HAVING COUNT(*) > 1
    `;
    
    const duplicates = await databasePool.query(findDuplicatesQuery);
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${duplicates.rows.length} –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n`);
    
    let totalDeleted = 0;
    
    // –î–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    for (const dup of duplicates.rows) {
      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞: "${dup.title}" –¥–ª—è assignee_id: ${dup.assignee_id}`);
      console.log(`  –û—Å—Ç–∞–≤–ª—è–µ–º ID: ${dup.keep_id}, —É–¥–∞–ª—è–µ–º ${dup.count - 1} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ (—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º ID)
      const deleteQuery = `
        DELETE FROM tasks 
        WHERE title = $1 
        AND assignee_id = $2 
        AND id != $3
      `;
      
      const result = await databasePool.query(deleteQuery, [
        dup.title,
        dup.assignee_id,
        dup.keep_id
      ]);
      
      console.log(`  ‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${result.rowCount} –∑–∞–ø–∏—Å–µ–π\n`);
      totalDeleted += result.rowCount;
    }
    
    console.log('=' .repeat(50));
    console.log(`‚úÖ –ò–¢–û–ì–û –£–î–ê–õ–ï–ù–û: ${totalDeleted} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);
    console.log('=' .repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:');
    
    const checkQuery = `
      SELECT 
        COUNT(*) as total_tasks,
        COUNT(DISTINCT title) as unique_titles,
        (SELECT COUNT(*) FROM (
          SELECT title, COUNT(*) 
          FROM tasks 
          GROUP BY title 
          HAVING COUNT(*) > 1
        ) as dups) as duplicate_groups
      FROM tasks
    `;
    
    const checkResult = await databasePool.query(checkQuery);
    const stats = checkResult.rows[0];
    
    console.log(`–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${stats.total_tasks}`);
    console.log(`–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π: ${stats.unique_titles}`);
    console.log(`–ì—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${stats.duplicate_groups}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    console.log('\nüìã –ó–∞–¥–∞—á–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:');
    
    const userStatsQuery = `
      SELECT assignee_name, assignee_id, COUNT(*) as task_count
      FROM tasks
      GROUP BY assignee_name, assignee_id
      ORDER BY task_count DESC
    `;
    
    const userStats = await databasePool.query(userStatsQuery);
    
    userStats.rows.forEach(row => {
      console.log(`  ${row.assignee_name}: ${row.task_count} –∑–∞–¥–∞—á`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    process.exit(0);
  }
}

removeDuplicateTasks();