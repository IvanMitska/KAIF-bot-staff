const keyboards = require('../keyboards/inline');
const replyKeyboards = require('../keyboards/reply');

async function handleReplyKeyboard(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  const MANAGER_IDS = [385436658, 1734337242];
  const isManager = MANAGER_IDS.includes(userId);
  
  switch(text) {
    case 'üìã –ú–µ–Ω—é':
      await bot.sendMessage(chatId, 
        'üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', 
        {
          reply_markup: keyboards.mainMenu()
        }
      );
      return true;
      
    case 'üìù –û—Ç—á–µ—Ç':
      const { handleReportCommand } = require('./report');
      await handleReportCommand(bot, msg);
      return true;
      
    case 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É my_stats
      await bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∂–∞—é –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
      bot.emit('callback_query', {
        from: { id: userId },
        message: { chat: { id: chatId }, message_id: msg.message_id },
        data: 'my_stats'
      });
      return true;
      
    case '‚úÖ –ó–∞–¥–∞—á–∏':
      const { handleTasksCommand } = require('./tasks');
      await handleTasksCommand(bot, msg);
      return true;
      
    case '‚ö° –ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞':
      if (isManager) {
        await bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∂–∞—é –º–µ–Ω—é –±—ã—Å—Ç—Ä—ã—Ö –∑–∞–¥–∞—á...');
        bot.emit('callback_query', {
          from: { id: userId },
          message: { chat: { id: chatId }, message_id: msg.message_id },
          data: 'quick_task_menu'
        });
      }
      return true;
      
    case 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏':
      if (isManager) {
        const { getAllActiveUsers } = require('../../services/notionService');
        try {
          const users = await getAllActiveUsers();
          let message = 'üë• *–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:*\n\n';
          
          users.forEach((user, index) => {
            message += `${index + 1}. üë§ ${user.name} - ${user.position}\n`;
          });
          
          await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
        } catch (error) {
          await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
        }
      }
      return true;
      
    case '‚ùì –ü–æ–º–æ—â—å':
      await bot.sendMessage(chatId, '–ó–∞–≥—Ä—É–∂–∞—é —Å–ø—Ä–∞–≤–∫—É...');
      bot.emit('callback_query', {
        from: { id: userId },
        message: { chat: { id: chatId }, message_id: msg.message_id },
        data: 'help'
      });
      return true;
      
    default:
      return false;
  }
}

module.exports = {
  handleReplyKeyboard
};