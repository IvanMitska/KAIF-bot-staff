require('dotenv').config();
const notionService = require('./src/services/notionService');
const { getInstance: getDBInstance } = require('./src/services/sqliteService');

async function migrate() {
  console.log('üöÄ Starting migration from Notion to SQLite...');
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SQLite
    const db = await getDBInstance();
    console.log('‚úÖ SQLite database ready');
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüì• Migrating users...');
    const users = await notionService.getAllActiveUsers();
    console.log(`Found ${users.length} users in Notion`);
    
    for (const user of users) {
      await db.saveUser(user);
      console.log(`  ‚úÖ User migrated: ${user.name} (${user.telegramId})`);
    }
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    console.log('\nüì• Migrating tasks...');
    const tasks = await notionService.getAllTasks();
    console.log(`Found ${tasks.length} tasks in Notion`);
    
    let taskCount = 0;
    for (const task of tasks) {
      await db.saveTask(task);
      taskCount++;
      if (taskCount % 10 === 0) {
        console.log(`  ‚è≥ Migrated ${taskCount}/${tasks.length} tasks...`);
      }
    }
    console.log(`  ‚úÖ All ${taskCount} tasks migrated`);
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüì• Migrating reports...');
    let totalReports = 0;
    
    for (const user of users) {
      if (user.telegramId) {
        try {
          const reports = await notionService.getUserReports(user.telegramId, 100);
          if (reports.length > 0) {
            for (const report of reports) {
              await db.saveReport({
                ...report,
                telegramId: user.telegramId,
                employeeName: user.name
              });
              totalReports++;
            }
            console.log(`  ‚úÖ ${reports.length} reports for ${user.name}`);
          }
        } catch (error) {
          console.log(`  ‚ö†Ô∏è No reports for ${user.name}`);
        }
      }
    }
    console.log(`  ‚úÖ Total ${totalReports} reports migrated`);
    
    // –ú–∏–≥—Ä–∏—Ä—É–µ–º attendance
    console.log('\nüì• Migrating attendance records...');
    let totalAttendance = 0;
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    const endDate = new Date().toISOString().split('T')[0];
    const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    
    for (const user of users) {
      if (user.telegramId) {
        try {
          const attendance = await notionService.getAttendanceForPeriod(startDate, endDate, user.telegramId);
          if (attendance.length > 0) {
            for (const record of attendance) {
              await db.saveAttendance({
                ...record,
                employeeId: user.telegramId,
                employeeName: user.name
              });
              totalAttendance++;
            }
            console.log(`  ‚úÖ ${attendance.length} attendance records for ${user.name}`);
          }
        } catch (error) {
          console.log(`  ‚ö†Ô∏è No attendance for ${user.name}`);
        }
      }
    }
    console.log(`  ‚úÖ Total ${totalAttendance} attendance records migrated`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä Migration statistics:');
    const stats = await db.getStats();
    console.log('Database contents:');
    console.log(`  - Users: ${stats.users}`);
    console.log(`  - Tasks: ${stats.tasks}`);
    console.log(`  - Reports: ${stats.reports}`);
    console.log(`  - Attendance: ${stats.attendance}`);
    
    console.log('\n‚úÖ Migration completed successfully!');
    console.log('üìù Now you can switch the bot to use SQLite by updating the service configuration.');
    
    db.close();
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Migration failed:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
migrate();