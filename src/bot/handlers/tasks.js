const { getUser } = require('../../services/railwayOptimizedService');
const { taskKeyboards } = require('../keyboards/taskKeyboards');
const replyKeyboards = require('../keyboards/reply');
const { userStates } = require('../state');

const MANAGER_IDS = [385436658, 1734337242]; // ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: –ë–æ—Ä–∏—Å –∏ –ò–≤–∞–Ω

async function handleTasksCommand(bot, msgOrQuery) {
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Ç–∞–∫ –∏ callback query
  const isCallback = msgOrQuery.message !== undefined;
  const chatId = isCallback ? msgOrQuery.message.chat.id : msgOrQuery.chat.id;
  const userId = isCallback ? msgOrQuery.from.id : msgOrQuery.from.id;
  
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  // console.log('Raw msgOrQuery:', JSON.stringify(msgOrQuery, null, 2));
  
  try {
    console.log('handleTasksCommand called');
    console.log('isCallback:', isCallback);
    console.log('chatId:', chatId);
    console.log('userId:', userId);
    console.log('userId type:', typeof userId);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ userId —Å—Ç—Ä–æ–∫–æ–π —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    let actualUserId = userId;
    if (typeof userId === 'string' && userId.startsWith('USER_')) {
      console.log('WARNING: userId has USER_ prefix, this should not happen');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = null;
    try {
      user = await getUser(actualUserId);
    } catch (userError) {
      console.error('Error getting user:', userError);
    }
    
    if (!user) {
      const errorMsg = '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start';
      if (isCallback) {
        await bot.editMessageText(errorMsg, {
          chat_id: chatId,
          message_id: msgOrQuery.message.message_id
        });
      } else {
        await bot.sendMessage(chatId, errorMsg);
      }
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
    const isManager = MANAGER_IDS.includes(actualUserId);
    
    const messageText = isManager 
      ? 'üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'
      : 'üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
    
    const keyboard = isManager 
      ? taskKeyboards.managerMenu() 
      : taskKeyboards.employeeMenu();
    
    if (isCallback) {
      // –ï—Å–ª–∏ —ç—Ç–æ callback query, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await bot.editMessageText(
        messageText,
        {
          chat_id: chatId,
          message_id: msgOrQuery.message.message_id,
          reply_markup: keyboard
        }
      );
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
      await bot.sendMessage(
        chatId,
        messageText,
        { reply_markup: keyboard }
      );
    }
  } catch (error) {
    console.error('Error in handleTasksCommand:', error);
    console.error('Error details:', error.message);
    console.error('Error stack:', error.stack);
    
    // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    let errorMessage = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é –∑–∞–¥–∞—á';
    
    if (error.message.includes('not found')) {
      errorMessage = '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start';
    } else if (error.message.includes('getUser')) {
      errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
    }
    
    await bot.sendMessage(chatId, errorMessage);
  }
}

async function handleNewTask(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  const isManager = MANAGER_IDS.includes(userId);
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const users = await getAllUsers();
  let availableUsers = [];
  
  if (isManager) {
    // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤—Å–µ–º (–≤–∫–ª—é—á–∞—è —Å–µ–±—è)
    availableUsers = users;
  } else {
    // –û–±—ã—á–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ
    const selfUser = users.find(u => u.telegramId === userId);
    if (selfUser) {
      availableUsers = [selfUser];
    }
  }
  
  if (availableUsers.length === 0) {
    await bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á');
    return;
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
  userStates[userId] = {
    state: 'creating_task',
    step: 'select_employee',
    taskData: {}
  };
  
  const message = isManager ? 
    'üë§ –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:' :
    'üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–µ–±—è:';
  
  await bot.editMessageText(
    message,
    {
      chat_id: chatId,
      message_id: callbackQuery.message.message_id,
      reply_markup: taskKeyboards.selectEmployee(availableUsers)
    }
  );
}

async function getAllUsers() {
  const { getUsers } = require('../../services/railwayOptimizedService');
  try {
    return await getUsers();
  } catch (error) {
    console.error('Error getting users:', error);
    return [];
  }
}

module.exports = {
  handleTasksCommand,
  handleNewTask
};