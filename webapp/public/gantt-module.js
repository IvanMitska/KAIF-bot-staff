/**
 * –ú–æ–¥—É–ª—å Gantt-–¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ª–µ–≥–∫–æ–≤–µ—Å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è Telegram Web App
 */

(function() {
    'use strict';

    window.GanttModule = {
        initialized: false,
        currentTasks: [],
        viewMode: 'Week', // Day, Week, Month
        container: null
    };

    const GM = window.GanttModule;
    const API_URL = window.location.origin;

    // –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    const statusColors = {
        '–ù–æ–≤–∞—è': '#3b82f6',
        '–í —Ä–∞–±–æ—Ç–µ': '#f59e0b',
        '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': '#22c55e',
        '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ': '#a855f7',
        '–û—Ç–ª–æ–∂–µ–Ω–∞': '#64748b'
    };

    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
    const DateUtils = {
        formatDate(date) {
            const d = new Date(date);
            return `${d.getDate().toString().padStart(2, '0')}.${(d.getMonth() + 1).toString().padStart(2, '0')}.${d.getFullYear()}`;
        },

        addDays(date, days) {
            const result = new Date(date);
            result.setDate(result.getDate() + days);
            return result;
        },

        getDaysBetween(start, end) {
            const startDate = new Date(start);
            const endDate = new Date(end);
            const diffTime = Math.abs(endDate - startDate);
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
        },

        getWeekNumber(date) {
            const d = new Date(date);
            const onejan = new Date(d.getFullYear(), 0, 1);
            return Math.ceil((((d - onejan) / 86400000) + onejan.getDay() + 1) / 7);
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    GanttModule.init = function() {
        if (this.initialized) {
            console.log('GanttModule —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            return;
        }

        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GanttModule...');

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
        this.injectStyles();

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        this.createContainer();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
        this.loadTasks();

        this.initialized = true;
        console.log('‚úÖ GanttModule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    };

    // –í–Ω–µ–¥—Ä–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
    GanttModule.injectStyles = function() {
        if (document.getElementById('gantt-styles')) return;

        const style = document.createElement('style');
        style.id = 'gantt-styles';
        style.textContent = `
            #gantt-container {
                padding: 12px;
                background: var(--bg-primary);
                min-height: calc(100vh - 70px);
                overflow-x: hidden;
            }

            .gantt-header {
                display: flex;
                flex-direction: column;
                gap: 12px;
                margin-bottom: 16px;
            }

            .gantt-title {
                font-size: 20px;
                font-weight: 600;
                color: var(--text-primary);
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .gantt-view-selector {
                display: flex;
                gap: 6px;
                width: 100%;
            }

            .gantt-view-btn {
                flex: 1;
                padding: 10px 12px;
                background: var(--bg-secondary);
                color: var(--text-primary);
                border: none;
                border-radius: 12px;
                cursor: pointer;
                transition: all 0.3s;
                font-size: 14px;
                font-weight: 500;
                text-align: center;
            }

            .gantt-view-btn.active {
                background: #3b82f6;
                color: white;
                box-shadow: 0 2px 8px rgba(59, 130, 246, 0.3);
            }

            .gantt-chart {
                background: var(--bg-card);
                border-radius: 16px;
                padding: 12px;
                overflow-x: auto;
                position: relative;
                margin-bottom: 16px;
                -webkit-overflow-scrolling: touch;
            }

            .gantt-grid {
                position: relative;
                min-width: 100%;
                display: block;
            }

            .gantt-timeline {
                display: flex;
                height: 36px;
                border-bottom: 2px solid var(--border-color);
                margin-bottom: 8px;
                background: var(--bg-card);
            }

            .gantt-timeline-cell {
                flex: 0 0 auto;
                min-width: 30px;
                text-align: center;
                padding: 8px 2px;
                font-size: 10px;
                color: var(--text-secondary);
                border-right: 1px solid rgba(255, 255, 255, 0.05);
            }

            .gantt-timeline-cell.weekend {
                background: rgba(255, 255, 255, 0.02);
            }

            .gantt-timeline-cell.today {
                background: rgba(59, 130, 246, 0.1);
                color: #3b82f6;
                font-weight: bold;
            }

            .gantt-task-bar:hover {
                transform: translateY(-1px);
                box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
            }

            .gantt-tasks-container {
                min-height: 200px;
            }

            .gantt-legend {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 12px;
                padding: 12px;
                background: var(--bg-card);
                border-radius: 12px;
                margin-top: 12px;
            }

            .gantt-legend-item {
                display: flex;
                align-items: center;
                gap: 6px;
                font-size: 12px;
                color: var(--text-secondary);
            }

            .gantt-legend-color {
                width: 12px;
                height: 12px;
                border-radius: 3px;
                flex-shrink: 0;
            }

            .gantt-tooltip {
                position: fixed;
                background: var(--bg-card);
                border: 1px solid var(--border-color);
                border-radius: 12px;
                padding: 10px;
                font-size: 12px;
                color: var(--text-primary);
                z-index: 1000;
                pointer-events: none;
                opacity: 0;
                transition: opacity 0.3s;
                max-width: 250px;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            }

            .gantt-tooltip.visible {
                opacity: 1;
            }

            .gantt-tooltip-title {
                font-weight: 600;
                margin-bottom: 6px;
                font-size: 13px;
            }

            .gantt-tooltip-row {
                display: flex;
                justify-content: space-between;
                margin-bottom: 3px;
                font-size: 11px;
            }

            .gantt-tooltip-label {
                color: var(--text-secondary);
            }

            /* –°–∫—Ä—ã–≤–∞–µ–º –ª–µ–≥–µ–Ω–¥—É –Ω–∞ –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö */
            @media (max-width: 360px) {
                .gantt-legend {
                    grid-template-columns: 1fr;
                }
            }
        `;
        document.head.appendChild(style);
    };

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    GanttModule.createContainer = function() {
        // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Gantt
        let container = document.getElementById('gantt-container');
        if (!container) {
            // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–¥–∞—á
            container = document.getElementById('tasks');
            if (!container) {
                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è Gantt');
                return;
            }
        }

        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        container.innerHTML = `
            <div class="gantt-header">
                <div class="gantt-title">
                    <span>üìä</span>
                    <span>–î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞</span>
                </div>
                <div class="gantt-view-selector">
                    <button class="gantt-view-btn" data-view="Day">–î–µ–Ω—å</button>
                    <button class="gantt-view-btn active" data-view="Week">–ù–µ–¥–µ–ª—è</button>
                    <button class="gantt-view-btn" data-view="Month">–ú–µ—Å—è—Ü</button>
                </div>
            </div>
            <div class="gantt-chart">
                <div class="gantt-grid" id="gantt-grid">
                    <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º–∞ -->
                </div>
            </div>
            <div class="gantt-legend" id="gantt-legend"></div>
            <div class="gantt-tooltip" id="gantt-tooltip"></div>
        `;

        this.container = container;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–∞
        container.querySelectorAll('.gantt-view-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                this.setViewMode(btn.dataset.view);
            });
        });
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
    GanttModule.loadTasks = async function() {
        try {
            const tg = window.Telegram?.WebApp;
            const response = await fetch(`${API_URL}/api/tasks/my`, {
                headers: {
                    'X-Telegram-Init-Data': tg?.initData || ''
                }
            });

            if (!response.ok) throw new Error(`HTTP ${response.status}`);
            const tasks = await response.json();

            console.log('üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞—á:', tasks.length);

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á —Å –¥–∞—Ç–∞–º–∏
            const hasTasksWithDates = tasks.some(t => t.deadline);

            if (!hasTasksWithDates) {
                // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const today = new Date();
                this.currentTasks = [
                    {
                        id: 1,
                        name: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞',
                        start: DateUtils.addDays(today, -2),
                        end: DateUtils.addDays(today, 3),
                        progress: 50,
                        status: '–í —Ä–∞–±–æ—Ç–µ',
                        assignee: '–í—ã',
                        priority: '–°—Ä–µ–¥–Ω–∏–π',
                        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞'
                    },
                    {
                        id: 2,
                        name: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —à–∫–∞—Ñ—á–∏–∫–∏ –∏ –±—Ä–∞—Å–ª–µ—Ç—ã',
                        start: today,
                        end: DateUtils.addDays(today, 5),
                        progress: 25,
                        status: '–ù–æ–≤–∞—è',
                        assignee: '–í—ã',
                        priority: '–í—ã—Å–æ–∫–∏–π',
                        description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è'
                    },
                    {
                        id: 3,
                        name: '–ë–æ—Ç-–∑–∞–∫–∞–∑ —Å –ª–µ–∂–∞–∫–æ–≤',
                        start: DateUtils.addDays(today, 1),
                        end: DateUtils.addDays(today, 7),
                        progress: 0,
                        status: '–ù–æ–≤–∞—è',
                        assignee: '–í—ã',
                        priority: '–°—Ä–µ–¥–Ω–∏–π',
                        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞'
                    }
                ];
            } else {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
                this.currentTasks = tasks.filter(task => task.deadline).map(task => {
                    const deadline = new Date(task.deadline);
                    const startDate = task.startDate ? new Date(task.startDate) : DateUtils.addDays(deadline, -3);

                    return {
                        id: task.id,
                        name: task.title,
                        start: startDate,
                        end: deadline,
                        progress: this.calculateProgress(task.status),
                        status: task.status,
                        assignee: task.assignee_name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω',
                        priority: task.priority,
                        description: task.description
                    };
                });
            }

            console.log('üìä –ó–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', this.currentTasks.length);
            this.renderGantt();
            this.renderLegend();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –¥–ª—è Gantt:', error);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–∑–∞–¥–∞—á–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            const today = new Date();
            this.currentTasks = [
                {
                    id: 1,
                    name: '–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏',
                    start: DateUtils.addDays(today, -1),
                    end: DateUtils.addDays(today, 2),
                    progress: 50,
                    status: '–í —Ä–∞–±–æ—Ç–µ',
                    assignee: '–î–µ–º–æ',
                    priority: '–°—Ä–µ–¥–Ω–∏–π'
                }
            ];
            this.renderGantt();
            this.renderLegend();
        }
    };

    // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É
    GanttModule.calculateProgress = function(status) {
        const progressMap = {
            '–ù–æ–≤–∞—è': 0,
            '–í —Ä–∞–±–æ—Ç–µ': 50,
            '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ': 75,
            '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': 100,
            '–û—Ç–ª–æ–∂–µ–Ω–∞': 25
        };
        return progressMap[status] || 0;
    };

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    GanttModule.setViewMode = function(mode) {
        this.viewMode = mode;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        this.container.querySelectorAll('.gantt-view-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.view === mode);
        });

        this.renderGantt();
    };

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –¥–∏–∞–≥—Ä–∞–º–º—ã
    GanttModule.renderGantt = function() {
        const grid = document.getElementById('gantt-grid');
        if (!grid) return;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        const dates = this.getDateRange();
        const cellWidth = this.getCellWidth();

        let html = '';

        // –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞
        html += '<div class="gantt-timeline">';
        dates.forEach(date => {
            const isWeekend = date.getDay() === 0 || date.getDay() === 6;
            const isToday = DateUtils.formatDate(date) === DateUtils.formatDate(new Date());
            const classes = `gantt-timeline-cell${isWeekend ? ' weekend' : ''}${isToday ? ' today' : ''}`;
            html += `<div class="${classes}" style="width: ${cellWidth}px">${this.formatTimelineDate(date)}</div>`;
        });
        html += '</div>';

        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–¥–∞—á
        html += '<div class="gantt-tasks-container" style="position: relative;">';

        // –°–µ—Ç–∫–∞
        html += '<div class="gantt-grid-background" style="position: absolute; top: 0; left: 0; right: 0; bottom: 0;">';
        dates.forEach((date, index) => {
            const left = index * cellWidth;
            const isToday = DateUtils.formatDate(date) === DateUtils.formatDate(new Date());
            if (isToday) {
                html += `<div style="position: absolute; left: ${left}px; top: 0; bottom: 0; width: 2px; background: #3b82f6; opacity: 0.5;"></div>`;
            }
        });
        html += '</div>';

        // –ó–∞–¥–∞—á–∏
        if (this.currentTasks && this.currentTasks.length > 0) {
            this.currentTasks.forEach((task, index) => {
                html += this.renderTaskBar(task, index, dates, cellWidth);
            });
        } else {
            html += '<div style="padding: 20px; text-align: center; color: var(--text-secondary);">–ù–µ—Ç –∑–∞–¥–∞—á —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏</div>';
        }

        html += '</div>';

        grid.innerHTML = html;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.attachEventHandlers();
    };

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ø–æ–ª–æ—Å–∫–∏ –∑–∞–¥–∞—á–∏
    GanttModule.renderTaskBar = function(task, index, dates, cellWidth) {
        const startOffset = this.getDateOffset(task.start, dates[0]) * cellWidth;
        const duration = DateUtils.getDaysBetween(task.start, task.end) + 1;
        const width = Math.max(duration * cellWidth, cellWidth); // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ = 1 –¥–µ–Ω—å
        const top = index * 40; // –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏
        const color = statusColors[task.status] || '#64748b';

        // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        const truncatedName = task.name.length > 20 ?
            task.name.substring(0, 17) + '...' : task.name;

        return `
            <div style="position: relative; height: 40px; margin-bottom: 4px;">
                <div class="gantt-task-bar"
                     data-task-id="${task.id}"
                     style="position: absolute;
                            left: ${startOffset}px;
                            width: ${width}px;
                            height: 32px;
                            top: 4px;
                            background: ${color};
                            border-radius: 6px;
                            display: flex;
                            align-items: center;
                            padding: 0 8px;
                            cursor: pointer;
                            overflow: hidden;
                            z-index: 2;">
                    <div style="position: absolute; left: 0; top: 0; bottom: 0;
                                width: ${task.progress}%;
                                background: rgba(255, 255, 255, 0.2);
                                border-radius: 6px;"></div>
                    <span style="position: relative;
                                 color: white;
                                 font-size: 11px;
                                 white-space: nowrap;
                                 overflow: hidden;
                                 text-overflow: ellipsis;">${truncatedName}</span>
                </div>
            </div>
        `;
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
    GanttModule.getDateRange = function() {
        const dates = [];
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        let startDate, endDate, daysCount;

        switch (this.viewMode) {
            case 'Day':
                daysCount = 7;
                startDate = DateUtils.addDays(today, -1);
                break;
            case 'Week':
                daysCount = 21;
                startDate = DateUtils.addDays(today, -7);
                break;
            case 'Month':
                daysCount = 60;
                startDate = DateUtils.addDays(today, -15);
                break;
            default:
                daysCount = 21;
                startDate = DateUtils.addDays(today, -7);
        }

        for (let i = 0; i < daysCount; i++) {
            dates.push(DateUtils.addDays(startDate, i));
        }

        return dates;
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã
    GanttModule.formatTimelineDate = function(date) {
        switch (this.viewMode) {
            case 'Day':
                return `${date.getDate()}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;
            case 'Week':
                return date.getDate().toString();
            case 'Month':
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —á–∏—Å–ª–∞ –Ω–µ–¥–µ–ª–∏
                if (date.getDay() === 1 || date.getDate() === 1) {
                    return `${date.getDate()}.${(date.getMonth() + 1).toString().padStart(2, '0')}`;
                }
                return '';
            default:
                return date.getDate().toString();
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —è—á–µ–π–∫–∏
    GanttModule.getCellWidth = function() {
        // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        const isMobile = window.innerWidth <= 768;

        switch (this.viewMode) {
            case 'Day':
                return isMobile ? 50 : 80;
            case 'Week':
                return isMobile ? 25 : 35;
            case 'Month':
                return isMobile ? 15 : 20;
            default:
                return isMobile ? 25 : 35;
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è –¥–∞—Ç—ã
    GanttModule.getDateOffset = function(date, startDate) {
        return DateUtils.getDaysBetween(startDate, date);
    };

    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –ª–µ–≥–µ–Ω–¥—ã
    GanttModule.renderLegend = function() {
        const legend = document.getElementById('gantt-legend');
        if (!legend) return;

        let html = '';
        for (const [status, color] of Object.entries(statusColors)) {
            html += `
                <div class="gantt-legend-item">
                    <div class="gantt-legend-color" style="background: ${color}"></div>
                    <span>${status}</span>
                </div>
            `;
        }

        legend.innerHTML = html;
    };

    // –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    GanttModule.attachEventHandlers = function() {
        const tooltip = document.getElementById('gantt-tooltip');

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –∑–∞–¥–∞—á—É
        this.container.querySelectorAll('.gantt-task-bar').forEach(bar => {
            bar.addEventListener('mouseenter', (e) => {
                const taskId = bar.dataset.taskId;
                const task = this.currentTasks.find(t => t.id == taskId);
                if (!task) return;

                tooltip.innerHTML = `
                    <div class="gantt-tooltip-title">${task.name}</div>
                    <div class="gantt-tooltip-row">
                        <span class="gantt-tooltip-label">–°—Ç–∞—Ç—É—Å:</span>
                        <span>${task.status}</span>
                    </div>
                    <div class="gantt-tooltip-row">
                        <span class="gantt-tooltip-label">–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
                        <span>${task.progress}%</span>
                    </div>
                    <div class="gantt-tooltip-row">
                        <span class="gantt-tooltip-label">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</span>
                        <span>${task.assignee}</span>
                    </div>
                    <div class="gantt-tooltip-row">
                        <span class="gantt-tooltip-label">–ù–∞—á–∞–ª–æ:</span>
                        <span>${DateUtils.formatDate(task.start)}</span>
                    </div>
                    <div class="gantt-tooltip-row">
                        <span class="gantt-tooltip-label">–î–µ–¥–ª–∞–π–Ω:</span>
                        <span>${DateUtils.formatDate(task.end)}</span>
                    </div>
                `;

                const rect = bar.getBoundingClientRect();
                tooltip.style.left = `${rect.left}px`;
                tooltip.style.top = `${rect.bottom + 10}px`;
                tooltip.classList.add('visible');
            });

            bar.addEventListener('mouseleave', () => {
                tooltip.classList.remove('visible');
            });

            // –ö–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            bar.addEventListener('click', () => {
                const taskId = bar.dataset.taskId;
                // –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª—å –∑–∞–¥–∞—á –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
                if (window.TasksModule && window.TasksModule.showTaskDetails) {
                    // –ù–∞—Ö–æ–¥–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É
                    const task = this.currentTasks.find(t => t.id == taskId);
                    if (task) {
                        window.TasksModule.showTaskDetails({
                            id: task.id,
                            title: task.name,
                            description: task.description,
                            status: task.status,
                            priority: task.priority,
                            deadline: DateUtils.formatDate(task.end),
                            assignee_name: task.assignee
                        });
                    }
                }
            });
        });
    };

    // –≠–∫—Å–ø–æ—Ä—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç)
    GanttModule.exportToImage = async function() {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å html2canvas –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        // –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
        console.log('–≠–∫—Å–ø–æ—Ä—Ç –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω');
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É Gantt
    window.showGanttChart = function() {
        GanttModule.init();
    };

})();