const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.join(__dirname, 'bot.db');
const db = new sqlite3.Database(dbPath);

console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –æ—Ç —É–¥–∞–ª—è–µ–º—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
console.log('================================================\n');

// –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏ –Ω–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
const usersToRemove = [
    { id: '726915228', name: '–ï–ª–µ–Ω–∞' },
    { id: '893020643', name: '–Ø–∫–æ–≤' }
];

// –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –ö—Å–µ–Ω–∏—é (–º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–ª–µ–∫—Å–∞)
const newAssignee = {
    id: '1151085087',
    name: '–ö—Å–µ–Ω–∏—è'
};

db.serialize(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const userIds = usersToRemove.map(u => u.id);

    console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è...`);

    db.all(`
        SELECT id, title, assignee_id, assignee_name, status
        FROM tasks
        WHERE assignee_id IN (${userIds.map(() => '?').join(',')})
            AND status NOT IN ('–í—ã–ø–æ–ª–Ω–µ–Ω–∞', '–û—Ç–º–µ–Ω–µ–Ω–∞')
    `, userIds, (err, tasks) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:', err);
            db.close();
            return;
        }

        if (!tasks || tasks.length === 0) {
            console.log('‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è');
            db.close();
            return;
        }

        console.log(`\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:`);
        console.table(tasks.map(t => ({
            id: t.id.substring(0, 8) + '...',
            title: t.title.substring(0, 40) + (t.title.length > 40 ? '...' : ''),
            assignee: t.assignee_name,
            status: t.status
        })));

        console.log(`\nüîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ ${newAssignee.name}...`);

        // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º –∑–∞–¥–∞—á–∏
        const updateStmt = db.prepare(`
            UPDATE tasks
            SET assignee_id = ?,
                assignee_name = ?,
                updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        `);

        let updated = 0;
        tasks.forEach(task => {
            updateStmt.run(newAssignee.id, newAssignee.name, task.id, function(err) {
                if (err) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ${task.id}:`, err);
                } else {
                    updated++;
                }
            });
        });

        updateStmt.finalize(() => {
            console.log(`\n‚úÖ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–æ –∑–∞–¥–∞—á: ${updated} –∏–∑ ${tasks.length}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            db.all(`
                SELECT assignee_name, COUNT(*) as count
                FROM tasks
                WHERE status NOT IN ('–í—ã–ø–æ–ª–Ω–µ–Ω–∞', '–û—Ç–º–µ–Ω–µ–Ω–∞')
                GROUP BY assignee_name
                ORDER BY count DESC
            `, (err, stats) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err);
                } else {
                    console.log('\nüìä –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:');
                    console.table(stats);
                }

                console.log('\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!');
                console.log('–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ï–ª–µ–Ω–∞ –∏ –Ø–∫–æ–≤.');
                db.close();
            });
        });
    });
});