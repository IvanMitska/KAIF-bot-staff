const { getUser, createTask } = require('../../services/notionService');
const { taskKeyboards } = require('../keyboards/taskKeyboards');
const { userStates } = require('../state');
const moment = require('moment-timezone');

async function handleTaskCreationFlow(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  const state = userStates[userId];
  if (!state || state.state !== 'creating_task') return false;
  
  try {
    switch (state.step) {
      case 'input_title':
        state.taskData.title = text;
        state.step = 'input_description';
        await bot.sendMessage(
          chatId,
          'üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:\n\n(–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å)'
        );
        return true;
        
      case 'input_description':
        state.taskData.description = text;
        state.step = 'select_priority';
        await bot.sendMessage(
          chatId,
          '‚ö° –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏:',
          { reply_markup: taskKeyboards.taskPriority() }
        );
        return true;
        
      case 'input_deadline':
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        const deadline = parseDeadline(text);
        if (!deadline) {
          await bot.sendMessage(
            chatId,
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ü—Ä–∏–º–µ—Ä—ã:\n- 25.12\n- 25.12.2024\n- –∑–∞–≤—Ç—Ä–∞\n- —á–µ—Ä–µ–∑ 3 –¥–Ω—è'
          );
          return true;
        }
        
        state.taskData.deadline = deadline;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const summary = formatTaskSummary(state.taskData);
        await bot.sendMessage(
          chatId,
          summary,
          { 
            reply_markup: taskKeyboards.confirmTaskCreation(),
            parse_mode: 'HTML'
          }
        );
        return true;
    }
  } catch (error) {
    console.error('Error in task creation flow:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    delete userStates[userId];
  }
  
  return false;
}

async function handleEmployeeSelection(bot, callbackQuery, employeeId) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const state = userStates[userId];
  
  if (!state || state.state !== 'creating_task') return;
  
  try {
    const employee = await getUser(employeeId);
    if (!employee) {
      await bot.sendMessage(chatId, '‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    state.taskData.assigneeId = employeeId;
    state.taskData.assigneeName = employee.name;
    state.step = 'input_title';
    
    await bot.editMessageText(
      `üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${employee.name}\n\nüíº –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id
      }
    );
  } catch (error) {
    console.error('Error selecting employee:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
  }
}

async function handlePrioritySelection(bot, callbackQuery, priority) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const state = userStates[userId];
  
  if (!state || state.state !== 'creating_task') return;
  
  const priorityMap = {
    'high': '–í—ã—Å–æ–∫–∏–π',
    'medium': '–°—Ä–µ–¥–Ω–∏–π', 
    'low': '–ù–∏–∑–∫–∏–π'
  };
  
  state.taskData.priority = priorityMap[priority];
  state.step = 'input_deadline';
  
  await bot.editMessageText(
    `üìÖ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n–§–æ—Ä–º–∞—Ç—ã:\n- –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12)\n- –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024)\n- "–∑–∞–≤—Ç—Ä–∞"\n- "—á–µ—Ä–µ–∑ N –¥–Ω–µ–π" (–Ω–∞–ø—Ä–∏–º–µ—Ä: —á–µ—Ä–µ–∑ 3 –¥–Ω—è)`,
    {
      chat_id: chatId,
      message_id: callbackQuery.message.message_id
    }
  );
}

async function confirmTaskCreation(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const state = userStates[userId];
  
  if (!state || state.state !== 'creating_task') return;
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è
    const creator = await getUser(userId);
    state.taskData.creatorId = userId;
    state.taskData.creatorName = creator.name;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Notion
    await createTask(state.taskData);
    
    await bot.editMessageText(
      '‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É!',
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id
      }
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    const assigneeId = state.taskData.assigneeId;
    const notificationText = `üîî <b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞!</b>

<b>–û—Ç:</b> ${state.taskData.creatorName}
<b>–ó–∞–¥–∞—á–∞:</b> ${state.taskData.title}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${state.taskData.description}
<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${getPriorityEmoji(state.taskData.priority)} ${state.taskData.priority}
<b>–°—Ä–æ–∫:</b> ${formatDate(state.taskData.deadline)}

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á`;
    
    await bot.sendMessage(assigneeId, notificationText, { parse_mode: 'HTML' });
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    delete userStates[userId];
  } catch (error) {
    console.error('Error creating task:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

function parseDeadline(text) {
  const bangkokTz = 'Asia/Bangkok';
  const now = moment.tz(bangkokTz);
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞—Ç—ã
  if (text.toLowerCase() === '–∑–∞–≤—Ç—Ä–∞') {
    return now.add(1, 'day').startOf('day').toISOString();
  }
  
  const daysMatch = text.match(/—á–µ—Ä–µ–∑\s+(\d+)\s+–¥/i);
  if (daysMatch) {
    const days = parseInt(daysMatch[1]);
    return now.add(days, 'days').startOf('day').toISOString();
  }
  
  // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú –∏–ª–∏ –î–î.–ú–ú.–ì–ì–ì–ì
  const parts = text.split('.');
  if (parts.length === 2 || parts.length === 3) {
    const day = parseInt(parts[0]);
    const month = parseInt(parts[1]) - 1; // –ú–µ—Å—è—Ü—ã –≤ JS –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    const year = parts.length === 3 ? parseInt(parts[2]) : now.year();
    
    if (!isNaN(day) && !isNaN(month) && !isNaN(year)) {
      const date = moment.tz({ year, month, day }, bangkokTz);
      if (date.isValid()) {
        return date.startOf('day').toISOString();
      }
    }
  }
  
  return null;
}

function formatTaskSummary(taskData) {
  return `<b>üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏</b>

<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${taskData.assigneeName}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${taskData.title}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${taskData.description}
<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${getPriorityEmoji(taskData.priority)} ${taskData.priority}
<b>–°—Ä–æ–∫:</b> ${formatDate(taskData.deadline)}

–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É?`;
}

function getPriorityEmoji(priority) {
  const emojis = {
    '–í—ã—Å–æ–∫–∏–π': 'üî¥',
    '–°—Ä–µ–¥–Ω–∏–π': 'üü°',
    '–ù–∏–∑–∫–∏–π': 'üü¢'
  };
  return emojis[priority] || '‚ö™';
}

function formatDate(isoDate) {
  return moment(isoDate).tz('Asia/Bangkok').format('DD.MM.YYYY');
}

module.exports = {
  handleTaskCreationFlow,
  handleEmployeeSelection,
  handlePrioritySelection,
  confirmTaskCreation
};