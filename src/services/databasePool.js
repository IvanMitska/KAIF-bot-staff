const { Pool } = require('pg');

class DatabasePool {
  constructor() {
    this.pool = null;
    this.initialized = false;
    this.initPromise = null;
  }

  async getPool() {
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥—ë—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –∂–¥—ë–º –µ—ë –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if (this.initPromise) {
      await this.initPromise;
      return this.pool;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–ª
    if (this.initialized && this.pool) {
      return this.pool;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    this.initPromise = this.initialize();
    await this.initPromise;
    return this.pool;
  }

  async initialize() {
    if (this.initialized && this.pool) {
      return this.pool;
    }

    console.log('üîµ Initializing database pool...');
    
    if (!process.env.DATABASE_URL) {
      throw new Error('DATABASE_URL is required');
    }

    try {
      const isInternal = process.env.DATABASE_URL.includes('.railway.internal');
      
      this.pool = new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: isInternal ? false : { rejectUnauthorized: false },
        max: 10, // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        idleTimeoutMillis: 0, // –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–æ—Å—Ç–æ—è
        connectionTimeoutMillis: 30000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        keepAlive: true,
        keepAliveInitialDelayMillis: 10000
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É–ª–∞
      this.pool.on('error', (err) => {
        console.error('‚ùå Unexpected pool error:', err);
        // –ù–ï –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      });

      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const result = await this.pool.query('SELECT NOW()');
      console.log('‚úÖ Database pool connected:', result.rows[0].now);

      this.initialized = true;
      this.initPromise = null;
      
      // –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      this.startKeepAlive();
      
      return this.pool;
    } catch (error) {
      console.error('‚ùå Database pool initialization failed:', error.message);
      this.initPromise = null;
      throw error;
    }
  }

  startKeepAlive() {
    // –ü–∏–Ω–≥—É–µ–º –ë–î –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(async () => {
      try {
        if (this.pool) {
          await this.pool.query('SELECT 1');
          console.log('üîÑ Keep-alive ping successful');
        }
      } catch (error) {
        console.error('‚ùå Keep-alive ping failed:', error.message);
      }
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
  }

  async query(text, params) {
    const pool = await this.getPool();
    return pool.query(text, params);
  }

  async end() {
    if (this.pool) {
      await this.pool.end();
      this.pool = null;
      this.initialized = false;
    }
  }
}

// Singleton —ç–∫–∑–µ–º–ø–ª—è—Ä
module.exports = new DatabasePool();