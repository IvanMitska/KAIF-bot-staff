// ===== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö RAILWAY =====

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const getRailwayApiUrl = () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram WebApp
    const isInTelegram = window.Telegram?.WebApp?.initData;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π URL
    const currentUrl = window.location.origin;
    const hostname = window.location.hostname;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ Railway –¥–æ–º–µ–Ω—ã
    if (hostname.includes('railway.app') || 
        hostname.includes('up.railway.app') || 
        hostname.includes('rlwy.net')) {
        console.log('üöÇ Running on Railway:', currentUrl);
        return currentUrl;
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ production –¥–æ–º–µ–Ω –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    if (hostname === 'tgbotkaifstaff-production.up.railway.app' ||
        hostname === 'tgbotkaifstaff.up.railway.app') {
        console.log('üöÄ Production Railway domain detected');
        return currentUrl;
    }
    
    // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (hostname === 'localhost' || hostname === '127.0.0.1' || hostname.startsWith('192.168')) {
        console.log('üíª Local development mode');
        // –í –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π origin
        return currentUrl;
    }
    
    // Fallback –Ω–∞ —Ç–µ–∫—É—â–∏–π origin
    console.log('üìç Using current origin:', currentUrl);
    return currentUrl;
};

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π API_URL
window.API_URL = getRailwayApiUrl();
console.log('‚úÖ API URL configured:', window.API_URL);

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
window.railwayApiRequest = async function(endpoint, options = {}) {
    const url = `${window.API_URL}${endpoint}`;
    
    const headers = {
        'Content-Type': 'application/json',
        ...options.headers
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º Telegram init data –µ—Å–ª–∏ –µ—Å—Ç—å
    if (window.Telegram?.WebApp?.initData) {
        headers['X-Telegram-Init-Data'] = window.Telegram.WebApp.initData;
    }
    
    console.log(`üîÑ API Request: ${options.method || 'GET'} ${url}`);
    
    try {
        const response = await fetch(url, {
            ...options,
            headers,
            credentials: 'same-origin', // –í–∞–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Railway
            mode: 'cors'
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ API Response:', data);
        return data;
        
    } catch (error) {
        console.error('‚ùå API Error:', error);
        throw error;
    }
};

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
window.loadEmployeesFixed = async function() {
    const employeesList = document.getElementById('employeesList');
    if (!employeesList) {
        console.log('Creating employees page...');
        createEmployeesPage();
        return;
    }
    
    employeesList.innerHTML = `
        <div class="loading-state">
            <div class="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Railway...</p>
        </div>
    `;
    
    try {
        const employees = await railwayApiRequest('/api/employees');
        
        if (employees && employees.length > 0) {
            displayEmployeesFromDatabase(employees);
        } else {
            displayNoEmployees();
        }
    } catch (error) {
        console.error('Failed to load employees:', error);
        displayConnectionError(error);
    }
};

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function displayEmployeesFromDatabase(employees) {
    const container = document.getElementById('employeesList');
    if (!container) return;
    
    console.log(`üìã Displaying ${employees.length} employees from database`);
    
    let html = '<div class="employees-grid">';
    
    employees.forEach(employee => {
        const initials = getInitials(employee.name || '–ù–ù');
        const isOnline = employee.isOnline || false;
        const statusClass = isOnline ? 'online' : 'offline';
        const statusText = isOnline ? '–í —Å–µ—Ç–∏' : '–ù–µ –≤ —Å–µ—Ç–∏';
        
        html += `
            <div class="employee-card glass-card" onclick="selectEmployee('${employee.telegramId}', '${employee.name}')">
                <div class="employee-avatar ${statusClass}">
                    <span class="avatar-text">${initials}</span>
                    <div class="status-dot ${statusClass}"></div>
                </div>
                <div class="employee-details">
                    <h3 class="employee-name">${employee.name}</h3>
                    <p class="employee-position">${employee.position || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'}</p>
                    <div class="employee-status-line">
                        <span class="status-indicator ${statusClass}"></span>
                        <span>${statusText}</span>
                    </div>
                </div>
                <button class="btn-action" onclick="event.stopPropagation(); createTaskForEmployee('${employee.telegramId}', '${employee.name}')">
                    <i data-lucide="plus-circle"></i>
                    –ó–∞–¥–∞—á–∞
                </button>
            </div>
        `;
    });
    
    html += '</div>';
    container.innerHTML = html;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏ Lucide
    if (window.lucide) {
        lucide.createIcons();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function displayNoEmployees() {
    const container = document.getElementById('employeesList');
    if (!container) return;
    
    container.innerHTML = `
        <div class="empty-state">
            <i data-lucide="users" class="empty-icon"></i>
            <h3>–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</h3>
            <p>–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>
            <button class="btn-primary" onclick="loadEmployeesFixed()">
                <i data-lucide="refresh-cw"></i>
                –û–±–Ω–æ–≤–∏—Ç—å
            </button>
        </div>
    `;
    
    if (window.lucide) {
        lucide.createIcons();
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
function displayConnectionError(error) {
    const container = document.getElementById('employeesList');
    if (!container) return;
    
    container.innerHTML = `
        <div class="error-state">
            <i data-lucide="wifi-off" class="error-icon"></i>
            <h3>–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3>
            <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Railway PostgreSQL</p>
            <p class="error-details">${error.message}</p>
            <button class="btn-primary" onclick="loadEmployeesFixed()">
                <i data-lucide="refresh-cw"></i>
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
        </div>
    `;
    
    if (window.lucide) {
        lucide.createIcons();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
function getInitials(name) {
    const parts = name.trim().split(' ');
    if (parts.length >= 2) {
        return (parts[0][0] + parts[1][0]).toUpperCase();
    }
    return name.substring(0, 2).toUpperCase();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–∑ Railway
window.loadAdminDashboardFromRailway = async function() {
    console.log('üìä Loading admin dashboard from Railway PostgreSQL...');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = await railwayApiRequest('/api/admin/stats');
        
        if (stats) {
            updateAdminStats(stats);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç—ã
        const reports = await railwayApiRequest('/api/admin/reports/today');
        if (reports) {
            updateTodayReports(reports);
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ
        const attendance = await railwayApiRequest('/api/admin/attendance/today');
        if (attendance) {
            updateAttendanceWidget(attendance);
        }
        
        console.log('‚úÖ Admin dashboard loaded successfully');
        
    } catch (error) {
        console.error('‚ùå Failed to load admin dashboard:', error);
        showAdminError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Railway');
    }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function updateAdminStats(stats) {
    const { totalEmployees = 0, todayReports = 0, activeTasks = 0, completedToday = 0 } = stats;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const elements = {
        'dashboardTodayReports': todayReports,
        'dashboardMissingReports': Math.max(0, totalEmployees - todayReports),
        'dashboardActiveTasks': activeTasks,
        'dashboardCompletedToday': completedToday
    };
    
    Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const percentage = totalEmployees > 0 ? Math.round((todayReports / totalEmployees) * 100) : 0;
    const progressBar = document.querySelector('.progress-fill');
    if (progressBar) {
        progressBar.style.width = `${percentage}%`;
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
function showAdminError(message) {
    const notification = document.createElement('div');
    notification.className = 'admin-error-notification';
    notification.innerHTML = `
        <i data-lucide="alert-triangle"></i>
        <span>${message}</span>
    `;
    
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        background: linear-gradient(135deg, #ef4444, #dc2626);
        color: white;
        padding: 16px 24px;
        border-radius: 12px;
        z-index: 99999;
        display: flex;
        align-items: center;
        gap: 12px;
        box-shadow: 0 10px 30px rgba(239, 68, 68, 0.4);
        animation: slideDown 0.3s ease;
    `;
    
    document.body.appendChild(notification);
    
    if (window.lucide) {
        lucide.createIcons();
    }
    
    setTimeout(() => {
        notification.remove();
    }, 5000);
}

// CSS —Å—Ç–∏–ª–∏ –¥–ª—è Railway –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const railwayStyles = document.createElement('style');
railwayStyles.textContent = `
    .loading-state {
        text-align: center;
        padding: 40px;
        color: rgba(255, 255, 255, 0.8);
    }
    
    .spinner {
        width: 40px;
        height: 40px;
        border: 3px solid rgba(139, 92, 246, 0.3);
        border-top-color: #8b5cf6;
        border-radius: 50%;
        margin: 0 auto 20px;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        to { transform: rotate(360deg); }
    }
    
    .error-state, .empty-state {
        text-align: center;
        padding: 40px;
        color: rgba(255, 255, 255, 0.8);
    }
    
    .error-icon, .empty-icon {
        width: 64px;
        height: 64px;
        margin: 0 auto 20px;
        color: rgba(239, 68, 68, 0.8);
    }
    
    .empty-icon {
        color: rgba(156, 163, 175, 0.8);
    }
    
    .error-details {
        font-size: 12px;
        color: rgba(255, 255, 255, 0.5);
        margin-top: 8px;
        font-family: monospace;
    }
    
    .btn-primary {
        background: linear-gradient(135deg, #8b5cf6, #ec4899);
        color: white;
        border: none;
        padding: 12px 24px;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        margin-top: 20px;
        transition: all 0.3s ease;
    }
    
    .btn-primary:hover {
        transform: scale(1.05);
        box-shadow: 0 8px 24px rgba(139, 92, 246, 0.4);
    }
    
    .status-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        position: absolute;
        bottom: 0;
        right: 0;
        border: 2px solid rgba(30, 20, 50, 0.9);
    }
    
    .status-dot.online {
        background: #10b981;
        animation: pulse 2s infinite;
    }
    
    .status-dot.offline {
        background: #6b7280;
    }
    
    @keyframes pulse {
        0%, 100% {
            box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4);
        }
        50% {
            box-shadow: 0 0 0 10px rgba(16, 185, 129, 0);
        }
    }
    
    @keyframes slideDown {
        from {
            transform: translateX(-50%) translateY(-100%);
            opacity: 0;
        }
        to {
            transform: translateX(-50%) translateY(0);
            opacity: 1;
        }
    }
`;
document.head.appendChild(railwayStyles);

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
if (typeof loadEmployees !== 'undefined') {
    window.originalLoadEmployees = window.loadEmployees;
    window.loadEmployees = window.loadEmployeesFixed;
}

if (typeof loadDashboard !== 'undefined') {
    window.originalLoadDashboard = window.loadDashboard;
    window.loadDashboard = window.loadAdminDashboardFromRailway;
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÇ Railway Connection Fix initialized');
    console.log('üìç Current location:', window.location.origin);
    console.log('üîó API URL:', window.API_URL);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway
    railwayApiRequest('/api/health')
        .then(() => console.log('‚úÖ Railway API is accessible'))
        .catch(err => console.error('‚ùå Railway API is not accessible:', err));
});

console.log('Railway connection fix loaded');