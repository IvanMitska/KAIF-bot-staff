#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á –∏–∑ Google Sheets –≤ Notion
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
 */

require('dotenv').config();
const { google } = require('googleapis');
const fs = require('fs').promises;
const path = require('path');

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –æ–±—ã—á–Ω—ã–π
let notionService;
try {
    notionService = require('./src/services/optimizedNotionService');
    console.log('Using optimized Notion service');
} catch (error) {
    notionService = require('./src/services/notionService');
    console.log('Using regular Notion service');
}

// –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ Telegram ID
// –†–µ–∞–ª—å–Ω—ã–µ ID –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const USER_MAPPING = {
    '–ö—Å–µ–Ω–∏—è': { telegramId: '1151085087', name: '–ö—Å–µ–Ω–∏—è' },
    '–ë–æ—Ä–∏—Å': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' },
    '–ò–≤–∞–Ω': { telegramId: '1734337242', name: '–ò–≤–∞–Ω' },
    '–ò–≥–æ—Ä—å': { telegramId: '321654987', name: '–ò–≥–æ—Ä—å' }, // –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å ID
    '–ú–∞–∫—Å–∏–º': { telegramId: '303267717', name: '–ú–∞–∫—Å–∏–º' },
    '–î–º–∏—Ç—Ä–∏–π': { telegramId: '5937587032', name: '–î–º–∏—Ç—Ä–∏–π' },
    '–ê–ª–ª–∞': { telegramId: '642664990', name: '–ê–ª—è' },
    '–ê–ª—è': { telegramId: '642664990', name: '–ê–ª—è' },
    '–ï–ª–µ–Ω–∞': { telegramId: '726915228', name: '–ï–ª–µ–Ω–∞' },
    '–Ø–∫–æ–≤': { telegramId: '893020643', name: '–Ø–∫–æ–≤' },
    // –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    '–ë–æ—Ä–∏—Å + –ö—Å–µ–Ω–∏—è': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' },
    '–ë–æ—Ä–∏—Å + –ò–≤–∞–Ω': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' },
    '–ú–∞–∫—Å–∏–º + –ë–æ—Ä–∏—Å': { telegramId: '303267717', name: '–ú–∞–∫—Å–∏–º' },
    '–î–º–∏—Ç—Ä–∏–π + –ú–∞–∫—Å–∏–º': { telegramId: '5937587032', name: '–î–º–∏—Ç—Ä–∏–π' },
    '–ò–≤–∞–Ω + –ë–æ—Ä–∏—Å': { telegramId: '1734337242', name: '–ò–≤–∞–Ω' },
    '–ë–æ—Ä–∏—Å + –ò–≤–∞–Ω + –î–º–∏—Ç—Ä–∏–π': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' },
    '–ö—Å–µ–Ω–∏—è + –ê–ª–ª–∞': { telegramId: '1151085087', name: '–ö—Å–µ–Ω–∏—è' },
    '–ö—Å–µ–Ω–∏—è + –ê–ª–ª–∞ + –ï–ª–µ–Ω–∞': { telegramId: '1151085087', name: '–ö—Å–µ–Ω–∏—è' },
    '–ö—Å–µ–Ω–∏—è + –ê–ª—è': { telegramId: '1151085087', name: '–ö—Å–µ–Ω–∏—è' },
    '–ò–≥–æ—Ä—å + –ë–æ—Ä–∏—Å': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' }
};

// –ú–∞–ø–ø–∏–Ω–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
const PRIORITY_MAPPING = {
    '–í—ã—Å–æ–∫–∏–π': '–í—ã—Å–æ–∫–∏–π',
    '–°—Ä–µ–¥–Ω–∏–π': '–°—Ä–µ–¥–Ω–∏–π', 
    '–ù–∏–∑–∫–∏–π': '–ù–∏–∑–∫–∏–π'
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
const STATUS_MAPPING = {
    '–ù–µ –≤–Ω–µ—Å–µ–Ω–æ –≤ –±–æ—Ç': '–ù–æ–≤–∞—è',
    '–°—Ä–µ–¥–Ω–∏–π': '–ù–æ–≤–∞—è',
    '–í—ã—Å–æ–∫–∏–π': '–ù–æ–≤–∞—è'
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets
const SPREADSHEET_ID = 'YOUR_SPREADSHEET_ID'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã
const RANGE = 'A2:J100'; // –î–∏–∞–ø–∞–∑–æ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)

/**
 * –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "18.08" –∏–ª–∏ "1-2 –Ω–µ–¥–µ–ª–∏"
 */
function parseDeadline(dateStr) {
    if (!dateStr) return null;
    
    const today = new Date();
    const year = today.getFullYear();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç DD.MM
    if (dateStr.match(/^\d{1,2}\.\d{2}$/)) {
        const [day, month] = dateStr.split('.');
        const deadline = new Date(year, parseInt(month) - 1, parseInt(day));
        
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
        if (deadline < today) {
            deadline.setFullYear(year + 1);
        }
        
        return deadline.toISOString().split('T')[0];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º "X –Ω–µ–¥–µ–ª–∏/–Ω–µ–¥–µ–ª—å"
    if (dateStr.includes('–Ω–µ–¥–µ–ª')) {
        const weeks = parseInt(dateStr.match(/\d+/)?.[0] || '1');
        const deadline = new Date(today);
        deadline.setDate(deadline.getDate() + (weeks * 7));
        return deadline.toISOString().split('T')[0];
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º "X –¥–Ω–µ–π/–¥–Ω—è"  
    if (dateStr.includes('–¥–Ω')) {
        const days = parseInt(dateStr.match(/\d+/)?.[0] || '1');
        const deadline = new Date(today);
        deadline.setDate(deadline.getDate() + days);
        return deadline.toISOString().split('T')[0];
    }
    
    return null;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets
 */
async function getDataFromSheets() {
    console.log('\nüìä –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Google Sheets...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º credentials –∏–∑ —Ñ–∞–π–ª–∞
    const credentialsPath = path.join(__dirname, 'google-credentials.json');
    
    try {
        const credentials = JSON.parse(await fs.readFile(credentialsPath, 'utf8'));
        
        const auth = new google.auth.GoogleAuth({
            credentials,
            scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
        });
        
        const sheets = google.sheets({ version: 'v4', auth });
        
        const response = await sheets.spreadsheets.values.get({
            spreadsheetId: SPREADSHEET_ID,
            range: RANGE
        });
        
        return response.data.values;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error.message);
        console.log('\n‚ö†Ô∏è  –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:');
        console.log('1. –°–æ–∑–¥–∞—Ç—å Service Account –≤ Google Cloud Console');
        console.log('2. –°–∫–∞—á–∞—Ç—å JSON –∫–ª—é—á –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ google-credentials.json');
        console.log('3. –î–∞—Ç—å –¥–æ—Å—Ç—É–ø Service Account –∫ –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü–µ');
        console.log('4. –£–∫–∞–∑–∞—Ç—å SPREADSHEET_ID –≤ —Å–∫—Ä–∏–ø—Ç–µ');
        return null;
    }
}

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –¥–∞–Ω–Ω—ã—Ö
 */
async function importTasks(rows) {
    if (!rows || rows.length === 0) {
        console.log('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
        return;
    }
    
    console.log(`\nüì• –ù–∞–π–¥–µ–Ω–æ ${rows.length} –∑–∞–¥–∞—á –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
    
    let successCount = 0;
    let errorCount = 0;
    const errors = [];
    
    for (let i = 0; i < rows.length; i++) {
        const row = rows[i];
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        const [
            category,       // –ö–æ–ª–æ–Ω–∫–∞ A - –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥/–ë–∞—Ä/–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–∫–∞)
            taskTitle,      // –ö–æ–ª–æ–Ω–∫–∞ B - –ó–∞–¥–∞—á–∞
            details,        // –ö–æ–ª–æ–Ω–∫–∞ C - –î–µ—Ç–∞–ª–∏/—à–∞–≥–∏
            deadline,       // –ö–æ–ª–æ–Ω–∫–∞ D - –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ —Å—Ä–æ–∫
            priority,       // –ö–æ–ª–æ–Ω–∫–∞ E - –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫
            assignee,       // –ö–æ–ª–æ–Ω–∫–∞ F - –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
            _,              // –ö–æ–ª–æ–Ω–∫–∞ G - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (—Ü–≤–µ—Ç)
            result,         // –ö–æ–ª–æ–Ω–∫–∞ H - –†–µ–∑—É–ª—å—Ç–∞—Ç
            status          // –ö–æ–ª–æ–Ω–∫–∞ I - –°—Ç–∞—Ç—É—Å
        ] = row;
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        if (!taskTitle || !assignee) {
            console.log(`‚è≠Ô∏è  –°—Ç—Ä–æ–∫–∞ ${i + 2}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)`);
            continue;
        }
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        if (status && status.toLowerCase().includes('–≤—ã–ø–æ–ª–Ω–µ–Ω')) {
            console.log(`‚úÖ –°—Ç—Ä–æ–∫–∞ ${i + 2}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)`);
            continue;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const assigneeFirstName = assignee.split(' ')[0].trim();
        const user = USER_MAPPING[assigneeFirstName];
        
        if (!user) {
            console.log(`‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ ${i + 2}: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${assigneeFirstName}"`);
            errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${assigneeFirstName}"`);
            errorCount++;
            continue;
        }
        
        try {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            let description = '';
            if (details) {
                description += `üìã –î–µ—Ç–∞–ª–∏: ${details}\n\n`;
            }
            if (result) {
                description += `üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result}\n\n`;
            }
            if (category) {
                description += `üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}`;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            let taskPriority = '–°—Ä–µ–¥–Ω–∏–π';
            if (priority) {
                if (priority.includes('–í—ã—Å–æ–∫') || priority.includes('—Å—Ä–æ—á–Ω')) {
                    taskPriority = '–í—ã—Å–æ–∫–∏–π';
                } else if (priority.includes('–ù–∏–∑–∫')) {
                    taskPriority = '–ù–∏–∑–∫–∏–π';
                }
            }
            
            // –ü–∞—Ä—Å–∏–º –¥–µ–¥–ª–∞–π–Ω
            const taskDeadline = parseDeadline(deadline) || parseDeadline(priority);
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            const taskData = {
                title: taskTitle,
                description: description.trim() || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
                assigneeId: user.telegramId,
                assigneeName: user.name,
                creatorId: 'import_script',
                creatorName: '–ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets',
                status: '–ù–æ–≤–∞—è',
                priority: taskPriority,
                deadline: taskDeadline || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
            };
            
            console.log(`\nüìù –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É ${i + 2}/${rows.length}:`);
            console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${taskTitle}`);
            console.log(`   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${user.name} (${user.telegramId})`);
            console.log(`   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${taskPriority}`);
            console.log(`   –î–µ–¥–ª–∞–π–Ω: ${taskData.deadline}`);
            
            await notionService.createTask(taskData);
            
            successCount++;
            console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            await new Promise(resolve => setTimeout(resolve, 500));
            
        } catch (error) {
            console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: ${error.message}`);
            errorCount++;
        }
    }
    
    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n' + '='.repeat(50));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:');
    console.log('='.repeat(50));
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount} –∑–∞–¥–∞—á`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
    
    if (errors.length > 0) {
        console.log('\n‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
        errors.forEach(err => console.log(`   - ${err}`));
    }
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥: –∏–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞
 */
async function importFromCSV(filePath) {
    console.log('\nüìÑ –ò–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞...');
    
    try {
        const csvContent = await fs.readFile(filePath, 'utf8');
        const rows = [];
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è CSV —Å –∫–∞–≤—ã—á–∫–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
        const lines = [];
        let currentLine = '';
        let inQuotes = false;
        
        for (let i = 0; i < csvContent.length; i++) {
            const char = csvContent[i];
            const nextChar = csvContent[i + 1];
            
            if (char === '"') {
                if (inQuotes && nextChar === '"') {
                    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–≤—ã—á–∫–∞
                    currentLine += '"';
                    i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞–≤—ã—á–∫—É
                } else {
                    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –∫–∞–≤—ã—á–µ–∫
                    inQuotes = !inQuotes;
                }
            } else if (char === '\n' && !inQuotes) {
                // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ (–Ω–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞–≤—ã—á–µ–∫)
                lines.push(currentLine);
                currentLine = '';
            } else {
                currentLine += char;
            }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if (currentLine.trim()) {
            lines.push(currentLine);
        }
        
        // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        for (let i = 1; i < lines.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            const line = lines[i].trim();
            if (!line) continue;
            
            const row = [];
            let currentField = '';
            let inQuotes = false;
            
            for (let j = 0; j < line.length; j++) {
                const char = line[j];
                const nextChar = line[j + 1];
                
                if (char === '"') {
                    if (inQuotes && nextChar === '"') {
                        currentField += '"';
                        j++;
                    } else {
                        inQuotes = !inQuotes;
                    }
                } else if (char === ',' && !inQuotes) {
                    row.push(currentField.trim());
                    currentField = '';
                } else {
                    currentField += char;
                }
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ
            row.push(currentField.trim());
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ
            if (row.length > 1 && row.some(field => field)) {
                rows.push(row);
            }
        }
        
        console.log(`–†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${rows.length}`);
        await importTasks(rows);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞:', error.message);
    }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á –∏–∑ Google Sheets –≤ Notion');
    console.log('=' .repeat(50));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    
    if (args[0] === '--csv' && args[1]) {
        // –ò–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞
        await importFromCSV(args[1]);
    } else if (args[0] === '--help') {
        console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
        console.log('  node import-tasks-from-sheets.js           - –∏–º–ø–æ—Ä—Ç –∏–∑ Google Sheets');
        console.log('  node import-tasks-from-sheets.js --csv file.csv - –∏–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞');
        console.log('\n–ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:');
        console.log('1. –û–±–Ω–æ–≤–∏—Ç–µ USER_MAPPING —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ Telegram ID');
        console.log('2. –î–ª—è Google Sheets: –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ google-credentials.json –∏ SPREADSHEET_ID');
        console.log('3. –î–ª—è CSV: —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ CSV —Ñ–æ—Ä–º–∞—Ç');
    } else {
        // –ò–º–ø–æ—Ä—Ç –∏–∑ Google Sheets
        const data = await getDataFromSheets();
        if (data) {
            await importTasks(data);
        } else {
            console.log('\nüí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:');
            console.log('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É –≤ CSV –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
            console.log('node import-tasks-from-sheets.js --csv tasks.csv');
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error);