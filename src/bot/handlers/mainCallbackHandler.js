// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback_query
const { handleCallbackQuery: handleTasksCallback } = require('./callbackHandler');

async function mainCallbackHandler(bot, callbackQuery) {
  const data = callbackQuery.data;
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  console.log('Main callback handler - data:', data, 'userId:', userId);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    switch (data) {
      case 'help':
        await bot.answerCallbackQuery(callbackQuery.id);
        const helpText = 
          'üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n' +
          '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
          '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
          '/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n' +
          '/history - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç—á–µ—Ç–æ–≤\n' +
          '/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n\n' +
          '*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*\n' +
          '1. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n' +
          '2. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç" –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É\n' +
          '3. –û—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Notion\n\n' +
          '_–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É_';
        
        const keyboards = require('../keyboards/inline');
        await bot.sendMessage(chatId, helpText, {
          parse_mode: 'Markdown',
          reply_markup: keyboards.mainMenu()
        });
        return;
        
      case 'my_stats':
        await bot.answerCallbackQuery(callbackQuery.id);
        try {
          const notionService = require('../../services/notionService');
          const userService = require('../../services/userService');
          
          const user = await userService.getUserByTelegramId(userId);
          if (!user) {
            await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start');
            return;
          }
          
          // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
          const reports = await notionService.getUserReports(userId, 30);
          const totalReports = reports.length;
          const completedReports = reports.filter(r => r.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω').length;
          
          // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é
          const weekReports = await notionService.getUserReports(userId, 7);
          const completedThisWeek = weekReports.filter(r => r.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω').length;
          
          let statsText = 'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n';
          statsText += `üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n`;
          statsText += `‚îî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${completedReports} –∏–∑ ${totalReports}\n\n`;
          statsText += `üìÖ –ó–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é:\n`;
          statsText += `‚îî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${completedThisWeek} –∏–∑ 7\n`;
          statsText += `‚îî –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(completedThisWeek / 7 * 100)}%\n\n`;
          
          if (completedReports > 0) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥
            let currentStreak = 0;
            const moment = require('moment-timezone');
            const today = moment().tz('Asia/Bangkok');
            
            for (let i = 0; i < 30; i++) {
              const checkDate = today.clone().subtract(i, 'days').format('YYYY-MM-DD');
              const hasReport = reports.some(r => 
                moment(r.date).format('YYYY-MM-DD') === checkDate && 
                r.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'
              );
              
              if (hasReport) {
                currentStreak++;
              } else if (i > 0) {
                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç –æ—Ç—á–µ—Ç–∞
                break;
              }
            }
            
            if (currentStreak > 1) {
              statsText += `üî• –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: ${currentStreak} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!\n`;
            }
          }
          
          const keyboards = require('../keyboards/inline');
          await bot.sendMessage(chatId, statsText, {
            parse_mode: 'Markdown',
            reply_markup: keyboards.mainMenu()
          });
        } catch (error) {
          console.error('Error getting stats:', error);
          await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        }
        return;
        
      case 'send_report':
        await bot.answerCallbackQuery(callbackQuery.id);
        const reportHandler = require('./report');
        if (reportHandler.startReportSession) {
          await reportHandler.startReportSession(bot, chatId, userId);
        }
        return;
        
      case 'tasks_menu':
        await bot.answerCallbackQuery(callbackQuery.id);
        const { handleTasksCommand } = require('./tasks');
        await handleTasksCommand(bot, callbackQuery);
        return;
        
      case 'remind_later':
        await bot.answerCallbackQuery(callbackQuery.id);
        const schedulerService = require('../../services/schedulerService');
        await schedulerService.handleRemindLater(bot, chatId, userId);
        return;
        
      case 'classic_mode':
        await bot.answerCallbackQuery(callbackQuery.id);
        const replyKeyboards = require('../keyboards/reply');
        const MANAGER_IDS = [385436658, 1734337242];
        const isManager = MANAGER_IDS.includes(userId);
        
        await bot.editMessageText(
          '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ',
          {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id,
            reply_markup: keyboards.mainMenu()
          }
        );
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
          reply_markup: isManager ? replyKeyboards.managerMenuKeyboard() : replyKeyboards.mainMenuKeyboard()
        });
        return;
        
      case 'report_history':
        await bot.answerCallbackQuery(callbackQuery.id);
        try {
          const notionService = require('../../services/notionService');
          const userService = require('../../services/userService');
          const moment = require('moment-timezone');
          
          const user = await userService.getUserByTelegramId(userId);
          if (!user) {
            await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
            return;
          }

          const reports = await notionService.getUserReports(userId, 5);
          
          if (reports.length === 0) {
            const keyboards = require('../keyboards/inline');
            await bot.sendMessage(chatId, 
              'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.',
              { reply_markup: keyboards.mainMenu() }
            );
          } else {
            let historyText = 'üìã *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:*\n\n';
            
            reports.forEach((report, index) => {
              const date = moment(report.date).format('DD.MM.YYYY');
              const statusEmoji = report.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' ? '‚úÖ' : '‚ùå';
              
              historyText += `${statusEmoji} *${date}*\n`;
              historyText += `‚îú –ß—Ç–æ —Å–¥–µ–ª–∞–ª: ${report.whatDone.substring(0, 50)}${report.whatDone.length > 50 ? '...' : ''}\n`;
              historyText += `‚îú –ü—Ä–æ–±–ª–µ–º—ã: ${report.problems.substring(0, 50)}${report.problems.length > 50 ? '...' : ''}\n`;
              historyText += `‚îî –¶–µ–ª–∏: ${report.goals.substring(0, 50)}${report.goals.length > 50 ? '...' : ''}\n\n`;
            });

            const keyboards = require('../keyboards/inline');
            await bot.sendMessage(chatId, historyText, {
              parse_mode: 'Markdown',
              reply_markup: keyboards.mainMenu()
            });
          }
        } catch (error) {
          console.error('History error:', error);
          await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.');
        }
        return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –æ—Ç—á–µ—Ç–æ–≤
    if (data.startsWith('report_') || data.startsWith('edit_')) {
      await bot.answerCallbackQuery(callbackQuery.id);
      const reportHandler = require('./report');
      if (data.startsWith('report_')) {
        await reportHandler.handleReportFlow(bot, chatId, userId, data, callbackQuery.message.message_id);
      } else if (data.startsWith('edit_')) {
        await reportHandler.handleReportEdit(bot, chatId, userId, data, callbackQuery.message.message_id);
      }
      return;
    }
    
    // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback'–∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á
    await handleTasksCallback(bot, callbackQuery);
    
  } catch (error) {
    console.error('Error in main callback handler:', error);
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
      show_alert: true
    });
  }
}

module.exports = mainCallbackHandler;