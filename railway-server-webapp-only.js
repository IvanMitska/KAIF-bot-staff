require('dotenv').config();
const express = require('express');
const path = require('path');
const { spawn } = require('child_process');

const app = express();
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
  'TELEGRAM_BOT_TOKEN',
  'NOTION_API_KEY',
  'NOTION_DATABASE_REPORTS_ID',
  'NOTION_DATABASE_USERS_ID',
  'NOTION_DATABASE_TASKS_ID'
];

const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
if (missingVars.length > 0) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars.join(', '));
  console.error('–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ Railway dashboard ‚Üí Variables');
}

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// CORS –¥–ª—è Web App
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, X-Telegram-Init-Data');
  
  if (req.method === 'OPTIONS') {
    return res.sendStatus(200);
  }
  
  next();
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è Web App
app.use('/webapp/public', express.static(path.join(__dirname, 'webapp/public')));

// API endpoints
const notionService = require('./src/services/notionService');
const userService = require('./src/services/userService');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function authMiddleware(req, res, next) {
  const initData = req.headers['x-telegram-init-data'];
  
  if (!initData) {
    return res.status(401).json({ error: 'Unauthorized' });
  }
  
  try {
    const parsedData = new URLSearchParams(initData);
    const userString = parsedData.get('user');
    
    if (!userString) {
      return res.status(401).json({ error: 'User data not found' });
    }
    
    req.telegramUser = JSON.parse(userString);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    const existingUser = await userService.getUserByTelegramId(req.telegramUser.id);
    if (!existingUser && req.body.autoRegister) {
      await userService.createUser({
        telegramId: req.telegramUser.id,
        username: req.telegramUser.username || '',
        name: req.body.name || `${req.telegramUser.first_name} ${req.telegramUser.last_name || ''}`.trim(),
        position: req.body.position || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
      });
    }
    
    next();
  } catch (error) {
    return res.status(401).json({ error: 'Invalid user data' });
  }
}

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/profile', authMiddleware, async (req, res) => {
  try {
    const user = await userService.getUserByTelegramId(req.telegramUser.id);
    res.json(user || { needsRegistration: true });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.post('/api/register', authMiddleware, async (req, res) => {
  try {
    const userData = {
      telegramId: req.telegramUser.id,
      username: req.telegramUser.username || '',
      name: req.body.name,
      position: req.body.position
    };
    
    const user = await userService.createUser(userData);
    res.json({ success: true, user });
  } catch (error) {
    res.status(500).json({ error: 'Registration failed' });
  }
});

app.get('/api/reports/today-status', authMiddleware, async (req, res) => {
  try {
    const todayReport = await notionService.getTodayReport(req.telegramUser.id);
    res.json({ reportSent: !!todayReport });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.post('/api/reports', authMiddleware, async (req, res) => {
  try {
    const user = await userService.getUserByTelegramId(req.telegramUser.id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    const reportData = {
      date: new Date().toISOString().split('T')[0],
      employeeName: user.name,
      telegramId: req.telegramUser.id,
      whatDone: req.body.whatDone,
      problems: req.body.problems || '–ù–µ—Ç',
      goals: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      timestamp: new Date().toISOString(),
      status: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    };
    
    await notionService.createReport(reportData);
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.get('/api/tasks/my', authMiddleware, async (req, res) => {
  try {
    console.log('Getting tasks for user:', req.telegramUser.id, 'type:', typeof req.telegramUser.id);
    console.log('User details:', {
      id: req.telegramUser.id,
      first_name: req.telegramUser.first_name,
      username: req.telegramUser.username
    });
    
    const tasks = await notionService.getTasksByAssignee(req.telegramUser.id);
    console.log('Found tasks:', tasks.length);
    
    if (tasks.length > 0) {
      console.log('First task:', {
        title: tasks[0].title,
        status: tasks[0].status,
        assigneeId: tasks[0].assigneeId
      });
    }
    
    res.json(tasks);
  } catch (error) {
    console.error('Error getting tasks:', error);
    res.status(500).json({ error: 'Server error: ' + error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –º–Ω–æ–π (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/tasks/created', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Forbidden' });
    }
    
    console.log('Getting created tasks for manager:', req.telegramUser.id);
    
    const tasks = await notionService.getTasksByCreator(req.telegramUser.id);
    console.log('Found created tasks:', tasks.length);
    
    res.json(tasks);
  } catch (error) {
    console.error('Error getting created tasks:', error);
    res.status(500).json({ error: 'Server error: ' + error.message });
  }
});

app.post('/api/tasks/:taskId/complete', authMiddleware, async (req, res) => {
  try {
    await notionService.completeTask(req.params.taskId);
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.put('/api/tasks/:taskId', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Forbidden' });
    }
    
    const { title, description, deadline, priority, assigneeId } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
    const assignee = await userService.getUserByTelegramId(assigneeId);
    if (!assignee) {
      return res.status(404).json({ error: 'Assignee not found' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    await notionService.updateTask(req.params.taskId, {
      title,
      description,
      deadline,
      priority,
      assigneeId,
      assigneeName: assignee.name
    });
    
    console.log(`Task ${req.params.taskId} updated by manager ${req.telegramUser.id}`);
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error updating task:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
app.put('/api/tasks/:taskId/status', authMiddleware, async (req, res) => {
  try {
    const { status } = req.body;
    const validStatuses = ['–ù–æ–≤–∞—è', '–í —Ä–∞–±–æ—Ç–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'];
    
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: 'Invalid status' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    const tasks = await notionService.getTasksByAssignee(req.telegramUser.id);
    const task = tasks.find(t => t.id === req.params.taskId);
    
    if (!task) {
      return res.status(404).json({ error: 'Task not found or access denied' });
    }
    
    console.log('Task details for notification:', {
      taskId: task.id,
      title: task.title,
      creatorId: task.creatorId,
      creatorName: task.creatorName,
      currentUserId: req.telegramUser.id,
      willSendNotification: task.creatorId && task.creatorId !== req.telegramUser.id
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await notionService.updateTaskStatus(req.params.taskId, status);
    
    console.log(`Task ${req.params.taskId} status updated to ${status} by user ${req.telegramUser.id}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞–¥–∞—á–∏
    if (task.creatorId && task.creatorId !== req.telegramUser.id) {
      try {
        const executor = await userService.getUserByTelegramId(req.telegramUser.id);
        const TelegramBot = require('node-telegram-bot-api');
        const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
        
        let message = '';
        
        if (status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞') {
          message = `‚úÖ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n` +
                   `üìã *–ó–∞–¥–∞—á–∞:* ${task.title}\n` +
                   `üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ${executor?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n` +
                   `üìÖ *–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${new Date().toLocaleDateString('ru-RU')}\n\n` +
                   `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã! üéâ`;
        } else if (status === '–í —Ä–∞–±–æ—Ç–µ') {
          message = `üöÄ *–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!*\n\n` +
                   `üìã *–ó–∞–¥–∞—á–∞:* ${task.title}\n` +
                   `üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ${executor?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n` +
                   `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleDateString('ru-RU')}\n\n` +
                   `–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å! üí™`;
        }
        
        if (message) {
          await bot.sendMessage(task.creatorId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [[
                {
                  text: 'üì± –û—Ç–∫—Ä—ã—Ç—å KAIF App',
                  web_app: { 
                    url: `https://${process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public` 
                  }
                }
              ]]
            }
          });
          
          console.log('Status notification sent to task creator');
        }
      } catch (notificationError) {
        console.error('Failed to send status notification:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      }
    }
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error updating task status:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

app.get('/api/stats', authMiddleware, async (req, res) => {
  try {
    const reports = await notionService.getUserReports(req.telegramUser.id, 30);
    const tasks = await notionService.getTasksByAssignee(req.telegramUser.id);
    
    res.json({
      totalReports: reports.length,
      completedTasks: tasks.filter(t => t.status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length,
      activeTasks: tasks.filter(t => t.status === '–í —Ä–∞–±–æ—Ç–µ').length,
      currentStreak: 0,
      completionRate: reports.length > 0 ? Math.round((reports.filter(r => r.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω').length / reports.length) * 100) : 0
    });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/employees', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Forbidden' });
    }
    
    const employees = await notionService.getAllActiveUsers();
    res.json(employees);
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
app.post('/api/tasks', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    const isManager = MANAGER_IDS.includes(req.telegramUser.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ
    if (!isManager && req.body.assigneeId !== req.telegramUser.id) {
      return res.status(403).json({ error: '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è' });
    }
    
    const creator = await userService.getUserByTelegramId(req.telegramUser.id);
    const assignee = await userService.getUserByTelegramId(req.body.assigneeId);
    
    console.log('Creating task:', {
      creatorId: req.telegramUser.id,
      assigneeId: req.body.assigneeId,
      isManager: isManager,
      isSelfTask: req.telegramUser.id === req.body.assigneeId,
      assignee: assignee ? { name: assignee.name, telegramId: assignee.telegramId } : null
    });
    
    if (!creator || !assignee) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    const taskData = {
      title: req.body.title,
      description: req.body.description || '',
      assigneeId: assignee.telegramId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegramId –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      assigneeName: assignee.name,
      creatorId: req.telegramUser.id,
      creatorName: creator.name,
      status: '–ù–æ–≤–∞—è',
      priority: req.body.priority || 'medium',
      deadline: req.body.deadline || null,
      createdAt: new Date().toISOString()
    };
    
    const taskId = await notionService.createTask(taskData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ù–ï –¥–ª—è —Å–µ–±—è
    const isSelfTask = req.telegramUser.id === req.body.assigneeId;
    
    if (!isSelfTask) {
      try {
        const TelegramBot = require('node-telegram-bot-api');
        const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
        
        const message = `üÜï *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç ${creator.name}*\n\n` +
                       `üìã *–ó–∞–¥–∞—á–∞:* ${taskData.title}\n` +
                       (taskData.description ? `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${taskData.description}\n` : '') +
                       `üìÖ *–°—Ä–æ–∫:* ${taskData.deadline ? new Date(taskData.deadline).toLocaleDateString('ru-RU') : '–ë–µ–∑ —Å—Ä–æ–∫–∞'}\n` +
                       `üî• *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${taskData.priority === 'high' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' : taskData.priority === 'medium' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π'}\n\n` +
                       `–û—Ç–∫—Ä–æ–π—Ç–µ KAIF App –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π`;
        
        await bot.sendMessage(assignee.telegramId, message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              {
                text: 'üì± –û—Ç–∫—Ä—ã—Ç—å KAIF App',
                web_app: { 
                  url: `https://${process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public` 
                }
              }
            ]]
          }
        });
        
        console.log('Notification sent to assignee');
      } catch (notificationError) {
        console.error('Failed to send notification:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      }
    } else {
      console.log('Self-task created, no notification sent');
    }
    
    res.json({ success: true, taskId });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// –í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–¥–∞—á
app.get('/api/debug/tasks', authMiddleware, async (req, res) => {
  try {
    const allTasks = await notionService.debugGetAllTasks();
    const userTasks = await notionService.getTasksByAssignee(req.telegramUser.id);
    
    res.json({
      currentUserId: req.telegramUser.id,
      totalTasksInDB: allTasks.length,
      userTasksFound: userTasks.length,
      debug: 'Check server logs for detailed output'
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  const publicUrl = process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PUBLIC_DOMAIN || 'localhost';
  const webappUrl = `https://${publicUrl}/webapp/public`;
  
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>KAIF Bot - Web App Only</title>
      <style>
        body { font-family: Arial, sans-serif; padding: 40px; background: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
        h1 { color: #333; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .success { background: #d4edda; color: #155724; }
        .info { background: #d1ecf1; color: #0c5460; }
        a { color: #007bff; text-decoration: none; }
        code { background: #f0f0f0; padding: 2px 5px; border-radius: 3px; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üöÄ KAIF Bot - Web App Only Mode</h1>
        
        ${missingVars.length > 0 ? `
          <div class="status info">
            <h3>‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è</h3>
            <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway ‚Üí Variables:</p>
            <ul>${missingVars.map(v => `<li><code>${v}</code></li>`).join('')}</ul>
          </div>
        ` : `
          <div class="status success">
            <h3>‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!</h3>
          </div>
        `}
        
        <div class="status info">
          <h3>üì± Web App Mode</h3>
          <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Web App</p>
          <p>URL: <code>${webappUrl}</code></p>
        </div>
        
        <h2>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</h2>
        <ol>
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram</li>
          <li>–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @Report_KAIF_bot</li>
          <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start</li>
          <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å KAIF App"</li>
        </ol>
      </div>
    </body>
    </html>
  `);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å—Ç—å
if (missingVars.length === 0) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ—Ç
  const { spawn } = require('child_process');
  const botProcess = spawn('node', ['src/bot-minimal.js'], {
    stdio: 'inherit',
    env: process.env
  });
  
  botProcess.on('error', (err) => {
    console.error('Failed to start bot:', err);
  });
  
  botProcess.on('exit', (code) => {
    console.log(`Bot process exited with code ${code}`);
    if (code !== 0) {
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setTimeout(() => {
        console.log('Restarting bot...');
        spawn('node', ['src/bot-minimal.js'], {
          stdio: 'inherit',
          env: process.env
        });
      }, 5000);
    }
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üì± Web App Only Mode –∞–∫—Ç–∏–≤–µ–Ω`);
  console.log(`üåê Web App: https://[your-railway-domain]/webapp/public`);
});