const notionService = require('../../services/notionService');
const userService = require('../../services/userService');
const keyboards = require('../keyboards/inline');
const schedulerService = require('../../services/schedulerService');
const moment = require('moment-timezone');

module.exports = (bot) => {
  // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
  bot.onText(/\/help/, async (msg) => {
    const chatId = msg.chat.id;
    
    const helpText = 
      'üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n' +
      '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
      '/task - –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)\n' +
      '/tasks - –ú–µ–Ω—é –∑–∞–¥–∞—á\n' +
      '/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n' +
      '/history - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç—á–µ—Ç–æ–≤\n' +
      '/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n\n' +
      '*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*\n' +
      '1. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n' +
      '2. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç" –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É\n' +
      '3. –û—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Notion\n\n' +
      '_–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É_';
    
    bot.sendMessage(chatId, helpText, {
      parse_mode: 'Markdown',
      reply_markup: keyboards.mainMenu()
    });
  });

  // –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
  bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      const user = await userService.getUserByTelegramId(userId);
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
        return;
      }

      const todayReport = await notionService.getTodayReport(userId);
      const today = moment().tz('Asia/Bangkok').format('DD.MM.YYYY');
      
      if (todayReport) {
        bot.sendMessage(chatId,
          `‚úÖ *–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ ${today}*\n\n` +
          '–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úì\n\n' +
          '_–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!_',
          {
            parse_mode: 'Markdown',
            reply_markup: keyboards.mainMenu()
          }
        );
      } else {
        bot.sendMessage(chatId,
          `‚ùå *–°—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ ${today}*\n\n` +
          '–û—Ç—á–µ—Ç –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\n' +
          '_–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è_',
          {
            parse_mode: 'Markdown',
            reply_markup: keyboards.mainMenu()
          }
        );
      }
    } catch (error) {
      console.error('Status command error:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞.');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –∏—Å—Ç–æ—Ä–∏–∏
  bot.onText(/\/history/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      const user = await userService.getUserByTelegramId(userId);
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
        return;
      }

      const reports = await notionService.getUserReports(userId, 5);
      
      if (reports.length === 0) {
        bot.sendMessage(chatId, 
          'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.',
          { reply_markup: keyboards.mainMenu() }
        );
        return;
      }

      let historyText = 'üìã *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:*\n\n';
      
      reports.forEach((report, index) => {
        const date = moment(report.date).format('DD.MM.YYYY');
        const statusEmoji = report.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' ? '‚úÖ' : '‚ùå';
        
        historyText += `${statusEmoji} *${date}*\n`;
        historyText += `‚îú –ß—Ç–æ —Å–¥–µ–ª–∞–ª: ${report.whatDone.substring(0, 50)}${report.whatDone.length > 50 ? '...' : ''}\n`;
        historyText += `‚îú –ü—Ä–æ–±–ª–µ–º—ã: ${report.problems.substring(0, 50)}${report.problems.length > 50 ? '...' : ''}\n`;
        historyText += `‚îî –¶–µ–ª–∏: ${report.goals.substring(0, 50)}${report.goals.length > 50 ? '...' : ''}\n\n`;
      });

      bot.sendMessage(chatId, historyText, {
        parse_mode: 'Markdown',
        reply_markup: keyboards.mainMenu()
      });
    } catch (error) {
      console.error('History command error:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.');
    }
  });

  // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–¥–∞—á
  bot.onText(/\/debug_tasks/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä
    if (![385436658, 1734337242].includes(userId)) {
      bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
      return;
    }
    
    try {
      const { getAllTasks } = require('../../services/notionService');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
      const allTasks = await getAllTasks();
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const tasksByStatus = {};
      allTasks.forEach(task => {
        const status = task.status || '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞';
        if (!tasksByStatus[status]) {
          tasksByStatus[status] = 0;
        }
        tasksByStatus[status]++;
      });
      
      let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n\n';
      Object.entries(tasksByStatus).forEach(([status, count]) => {
        message += `${status}: ${count} –∑–∞–¥–∞—á\n`;
      });
      
      message += `\n*–í—Å–µ–≥–æ –∑–∞–¥–∞—á:* ${allTasks.length}`;
      
      await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      
      // –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
      console.log('\n=== TASKS BY STATUS ===');
      console.log(tasksByStatus);
      console.log('Total tasks:', allTasks.length);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
      console.log('\nFirst 3 tasks:');
      allTasks.slice(0, 3).forEach(task => {
        console.log(`- "${task.title}" - Status: "${task.status}"`);
      });
      
    } catch (error) {
      console.error('Debug error:', error);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ª–∞–¥–∫–∏');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
  bot.onText(/\/check_statuses/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä
    if (![385436658, 1734337242].includes(userId)) {
      bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
      return;
    }
    
    try {
      const { getAllTasks } = require('../../services/notionService');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      console.log('\n=== CHECKING SPECIFIC STATUSES ===');
      
      const inProgressTasks = await getAllTasks('–í —Ä–∞–±–æ—Ç–µ');
      console.log(`Tasks with status "–í —Ä–∞–±–æ—Ç–µ": ${inProgressTasks.length}`);
      
      const completedTasks = await getAllTasks('–í—ã–ø–æ–ª–Ω–µ–Ω–∞');
      console.log(`Tasks with status "–í—ã–ø–æ–ª–Ω–µ–Ω–∞": ${completedTasks.length}`);
      
      const newTasks = await getAllTasks('–ù–æ–≤–∞—è');
      console.log(`Tasks with status "–ù–æ–≤–∞—è": ${newTasks.length}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
      const allTasks = await getAllTasks();
      console.log(`All tasks total: ${allTasks.length}`);
      
      // –í—ã–≤–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      const uniqueStatuses = [...new Set(allTasks.map(t => t.status))];
      console.log('Unique statuses in database:', uniqueStatuses);
      console.log('=== END CHECK ===\n');
      
      let message = 'üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤:*\n\n';
      message += `–í —Ä–∞–±–æ—Ç–µ: ${inProgressTasks.length}\n`;
      message += `–í—ã–ø–æ–ª–Ω–µ–Ω–∞: ${completedTasks.length}\n`;
      message += `–ù–æ–≤–∞—è: ${newTasks.length}\n`;
      message += `–í—Å–µ–≥–æ: ${allTasks.length}\n\n`;
      message += `*–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:*\n${uniqueStatuses.join(', ')}`;
      
      await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('Check statuses error:', error);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–æ–≤');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  bot.onText(/\/test_update (.+) (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const taskId = match[1];
    const newStatus = match[2];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä
    if (![385436658, 1734337242].includes(userId)) {
      bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
      return;
    }
    
    try {
      const { updateTaskStatus, debugGetTaskById } = require('../../services/notionService');
      
      console.log('\n=== TESTING STATUS UPDATE ===');
      console.log(`Attempting to update task ${taskId} to status "${newStatus}"`);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      await debugGetTaskById(taskId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      await updateTaskStatus(taskId, newStatus);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
      await debugGetTaskById(taskId);
      
      await bot.sendMessage(chatId, `‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å.`);
      
    } catch (error) {
      console.error('Test update error:', error);
      bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–¥–∞—á
  bot.onText(/\/get_task_ids/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä
    if (![385436658, 1734337242].includes(userId)) {
      bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤');
      return;
    }
    
    try {
      const { getAllTasks } = require('../../services/notionService');
      
      const tasks = await getAllTasks();
      let message = 'üìã *ID –∑–∞–¥–∞—á:*\n\n';
      
      tasks.slice(0, 5).forEach((task, index) => {
        message += `${index + 1}. ${task.title}\n`;
        message += `   ID: \`${task.id}\`\n`;
        message += `   –°—Ç–∞—Ç—É—Å: ${task.status}\n\n`;
      });
      
      message += '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/test_update [ID] [–°—Ç–∞—Ç—É—Å]`\n';
      message += '–ù–∞–ø—Ä–∏–º–µ—Ä:\n`/test_update ID "–í —Ä–∞–±–æ—Ç–µ"`';
      
      await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('Get task IDs error:', error);
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∑–∞–¥–∞—á');
    }
  });

  // –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
  bot.onText(/\/profile/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    try {
      const user = await userService.getUserByTelegramId(userId);
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
        return;
      }

      const reports = await notionService.getUserReports(userId, 30);
      const totalReports = reports.length;
      const completedReports = reports.filter(r => r.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω').length;
      const missedReports = reports.filter(r => r.status === '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω').length;
      
      const profileText = 
        'üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n' +
        `*–ò–º—è:* ${user.name}\n` +
        `*–î–æ–ª–∂–Ω–æ—Å—Ç—å:* ${user.position}\n` +
        `*–°—Ç–∞—Ç—É—Å:* ${user.isActive ? '–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω ‚ùå'}\n\n` +
        '*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:*\n' +
        `‚îú –í—Å–µ–≥–æ –æ—Ç—á–µ—Ç–æ–≤: ${totalReports}\n` +
        `‚îú –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${completedReports}\n` +
        `‚îî –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${missedReports}`;

      bot.sendMessage(chatId, profileText, {
        parse_mode: 'Markdown',
        reply_markup: keyboards.mainMenu()
      });
    } catch (error) {
      console.error('Profile command error:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    switch (data) {
      case 'help':
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É –Ω–∞–ø—Ä—è–º—É—é
        const helpText = 
          'üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n' +
          '/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n' +
          '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n' +
          '/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n' +
          '/history - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç—á–µ—Ç–æ–≤\n' +
          '/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ\n\n' +
          '*–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:*\n' +
          '1. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n' +
          '2. –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç" –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É\n' +
          '3. –û—Ç—á–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ Notion\n\n' +
          '_–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É_';
        
        bot.sendMessage(chatId, helpText, {
          parse_mode: 'Markdown',
          reply_markup: keyboards.mainMenu()
        });
        break;
        
      case 'my_stats':
        try {
          const user = await userService.getUserByTelegramId(userId);
          if (user) {
            const reports = await notionService.getUserReports(userId, 7);
            const completedThisWeek = reports.filter(r => r.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω').length;
            
            await bot.sendMessage(chatId,
              'üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é:*\n\n' +
              `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${completedThisWeek} –∏–∑ 7\n` +
              `–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(completedThisWeek / 7 * 100)}%`,
              {
                parse_mode: 'Markdown',
                reply_markup: keyboards.mainMenu()
              }
            );
          } else {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start');
          }
        } catch (error) {
          console.error('Stats error:', error);
          bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
        break;
        
      case 'report_history':
        try {
          const user = await userService.getUserByTelegramId(userId);
          if (!user) {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
            return;
          }

          const reports = await notionService.getUserReports(userId, 5);
          
          if (reports.length === 0) {
            bot.sendMessage(chatId, 
              'üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤.',
              { reply_markup: keyboards.mainMenu() }
            );
          } else {
            let historyText = 'üìã *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:*\n\n';
            
            reports.forEach((report, index) => {
              const date = moment(report.date).format('DD.MM.YYYY');
              const statusEmoji = report.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω' ? '‚úÖ' : '‚ùå';
              
              historyText += `${statusEmoji} *${date}*\n`;
              historyText += `‚îú –ß—Ç–æ —Å–¥–µ–ª–∞–ª: ${report.whatDone.substring(0, 50)}${report.whatDone.length > 50 ? '...' : ''}\n`;
              historyText += `‚îú –ü—Ä–æ–±–ª–µ–º—ã: ${report.problems.substring(0, 50)}${report.problems.length > 50 ? '...' : ''}\n`;
              historyText += `‚îî –¶–µ–ª–∏: ${report.goals.substring(0, 50)}${report.goals.length > 50 ? '...' : ''}\n\n`;
            });

            bot.sendMessage(chatId, historyText, {
              parse_mode: 'Markdown',
              reply_markup: keyboards.mainMenu()
            });
          }
        } catch (error) {
          console.error('History error:', error);
          bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.');
        }
        break;
        
      case 'remind_later':
        await schedulerService.handleRemindLater(bot, chatId, userId);
        break;
        
      case 'tasks_menu':
        // –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞—á
        const { handleTasksCommand } = require('./tasks');
        await bot.answerCallbackQuery(callbackQuery.id);
        await handleTasksCommand(bot, callbackQuery);
        return; // –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑–≤–∞—Ç—å answerCallbackQuery –¥–≤–∞–∂–¥—ã
        
      default:
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à–∏ callback'–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        // —á—Ç–æ–±—ã –∏—Ö –º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å callbackHandler
        console.log('Commands handler skipping callback:', data);
        return;
    }

    bot.answerCallbackQuery(callbackQuery.id);
  });
};