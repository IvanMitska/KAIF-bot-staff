// –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–î–ê–ß - –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï
(function() {
    console.log('üéØ AUTO LOAD TASKS - FINAL SOLUTION');
    
    let tasksLoaded = false;
    let loadInterval = null;
    let lastLoadTime = 0;
    
    // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á
    async function autoLoadTasks() {
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
        const now = Date.now();
        if (now - lastLoadTime < 2000) {
            console.log('‚è≥ Too soon, skipping load');
            return;
        }
        lastLoadTime = now;
        
        console.log('üîÑ Auto loading tasks...');
        
        const tasksList = document.getElementById('tasksList');
        const tasksSection = document.getElementById('tasks');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–¥–∞—á
        if (!tasksSection || !tasksSection.classList.contains('active')) {
            console.log('üìç Not on tasks page, skipping');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!tasksList) {
            console.log('Creating tasks container...');
            const container = document.createElement('div');
            container.id = 'tasksList';
            container.className = 'tasks-container';
            container.style.padding = '20px';
            tasksSection.appendChild(container);
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º Telegram WebApp
            const tg = window.Telegram?.WebApp;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
            const headers = {};
            if (tg?.initData) {
                headers['X-Telegram-Init-Data'] = tg.initData;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL - –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º test=1 –µ—Å–ª–∏ –Ω–µ—Ç initData
            let url = '/api/tasks/my';
            if (!tg?.initData || window.location.search.includes('test')) {
                url += '?test=1';
            }
            
            console.log(`üì° Fetching from: ${url}`);
            console.log('üì° Headers:', headers);
            
            const response = await fetch(url, {
                method: 'GET',
                headers: headers,
                credentials: 'same-origin'
            });
            
            console.log(`üì° Response: ${response.status}`);
            
            if (!response.ok) {
                // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 –∏ –Ω–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ —Å test
                if (response.status === 401 && !url.includes('test=1')) {
                    console.log('üîÑ Got 401, retrying with test mode...');
                    url += '?test=1';
                    const retryResponse = await fetch(url, { headers });
                    if (retryResponse.ok) {
                        const tasks = await retryResponse.json();
                        displayTasks(tasks);
                        tasksLoaded = true;
                        stopAutoLoad(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
                        return;
                    }
                }
                throw new Error(`HTTP ${response.status}`);
            }
            
            const tasks = await response.json();
            console.log(`‚úÖ Loaded ${tasks.length} tasks successfully`);
            
            displayTasks(tasks);
            tasksLoaded = true;
            stopAutoLoad(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
            
        } catch (error) {
            console.error('‚ùå Auto load failed:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –Ω–æ –ù–ï –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
            const tasksList = document.getElementById('tasksList');
            if (tasksList && !tasksLoaded) {
                tasksList.innerHTML = `
                    <div style="text-align: center; padding: 40px;">
                        <div style="font-size: 48px; margin-bottom: 20px;">‚è≥</div>
                        <h3>–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...</h3>
                        <p style="color: var(--text-secondary); margin-bottom: 20px;">
                            –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                        </p>
                        <button onclick="autoLoadTasks()" style="
                            padding: 10px 20px;
                            background: var(--primary-color, #667eea);
                            color: white;
                            border: none;
                            border-radius: 8px;
                            cursor: pointer;
                        ">–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å</button>
                    </div>
                `;
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á
    function displayTasks(tasks) {
        console.log(`üìù Displaying ${tasks.length} tasks`);
        
        const tasksList = document.getElementById('tasksList');
        if (!tasksList) return;
        
        if (!tasks || tasks.length === 0) {
            tasksList.innerHTML = `
                <div style="text-align: center; padding: 60px 20px;">
                    <div style="font-size: 64px; margin-bottom: 20px;">üì≠</div>
                    <h3>–ù–µ—Ç –∑–∞–¥–∞—á</h3>
                    <p style="color: var(--text-secondary);">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</p>
                </div>
            `;
            return;
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–¥–∞—á–∏
        tasksList.innerHTML = `
            <div style="display: flex; flex-direction: column; gap: 12px;">
                ${tasks.map(task => createTaskCard(task)).join('')}
            </div>
        `;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
        window.currentTasks = tasks;
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á–∏
    function createTaskCard(task) {
        const statusColors = {
            '–ù–æ–≤–∞—è': '#2196F3',
            '–í —Ä–∞–±–æ—Ç–µ': '#FF9800',
            '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': '#4CAF50',
            '–û—Ç–º–µ–Ω–µ–Ω–∞': '#9E9E9E'
        };
        
        const priorityColors = {
            '–í—ã—Å–æ–∫–∏–π': '#F44336',
            '–°—Ä–µ–¥–Ω–∏–π': '#FF9800',
            '–ù–∏–∑–∫–∏–π': '#4CAF50'
        };
        
        return `
            <div class="task-card" style="
                background: rgba(255,255,255,0.05);
                border-radius: 12px;
                padding: 16px;
                border: 1px solid rgba(255,255,255,0.1);
                backdrop-filter: blur(10px);
                transition: transform 0.2s;
            ">
                <h4 style="margin: 0 0 8px 0; font-size: 16px; font-weight: 600;">
                    ${task.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                </h4>
                <p style="margin: 0 0 12px 0; color: var(--text-secondary); font-size: 14px;">
                    ${task.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
                </p>
                <div style="display: flex; gap: 8px; flex-wrap: wrap; font-size: 12px;">
                    <span style="
                        padding: 4px 10px;
                        background: ${statusColors[task.status] || '#666'}22;
                        color: ${statusColors[task.status] || '#666'};
                        border-radius: 6px;
                        font-weight: 500;
                    ">${task.status || '–ù–æ–≤–∞—è'}</span>
                    
                    <span style="
                        padding: 4px 10px;
                        background: ${priorityColors[task.priority] || '#666'}22;
                        color: ${priorityColors[task.priority] || '#666'};
                        border-radius: 6px;
                        font-weight: 500;
                    ">${task.priority || '–°—Ä–µ–¥–Ω–∏–π'}</span>
                    
                    ${task.deadline ? `
                        <span style="
                            padding: 4px 10px;
                            background: rgba(255,255,255,0.1);
                            border-radius: 6px;
                        ">üìÖ ${new Date(task.deadline).toLocaleDateString('ru-RU')}</span>
                    ` : ''}
                </div>
            </div>
        `;
    }
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
    function startAutoLoad() {
        console.log('üöÄ Starting auto load...');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        stopAutoLoad();
        
        // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å—Ä–∞–∑—É
        autoLoadTasks();
        
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
        loadInterval = setInterval(() => {
            if (!tasksLoaded) {
                console.log('‚è∞ Auto load interval triggered');
                autoLoadTasks();
            } else {
                stopAutoLoad();
            }
        }, 3000);
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
    function stopAutoLoad() {
        if (loadInterval) {
            console.log('üõë Stopping auto load');
            clearInterval(loadInterval);
            loadInterval = null;
        }
    }
    
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    function resetTasksState() {
        tasksLoaded = false;
        stopAutoLoad();
    }
    
    // –ì–õ–ê–í–ù–´–ô –ö–û–î –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadTasks
    if (window.loadTasks) {
        window.originalLoadTasks = window.loadTasks;
    }
    window.loadTasks = autoLoadTasks;
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å
    window.forceLoadTasks = autoLoadTasks;
    window.loadTasksImproved = autoLoadTasks;
    window.loadTasksFixed = autoLoadTasks;
    
    // –°–ª—É—à–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞—á
    document.addEventListener('click', (e) => {
        const target = e.target;
        
        // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –∑–∞–¥–∞—á–∞–º
        if (target.closest('[data-section="tasks"]') || 
            target.closest('.nav-btn') && target.textContent.includes('–ó–∞–¥–∞—á–∏')) {
            console.log('üìã Navigating to tasks page');
            resetTasksState();
            setTimeout(() => startAutoLoad(), 500);
        }
        
        // –ï—Å–ª–∏ —É—Ö–æ–¥–∏–º —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á
        if (target.closest('[data-section]') && !target.closest('[data-section="tasks"]')) {
            console.log('üëã Leaving tasks page');
            resetTasksState();
        }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function checkOnLoad() {
        const tasksSection = document.getElementById('tasks');
        if (tasksSection && tasksSection.classList.contains('active')) {
            console.log('üìã Tasks page is active on load');
            startAutoLoad();
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(checkOnLoad, 1000);
        });
    } else {
        setTimeout(checkOnLoad, 1000);
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å–±—Ä–æ—Å –∑–∞–¥–∞—á –¥—Ä—É–≥–∏–º–∏ —Å–∫—Ä–∏–ø—Ç–∞–º–∏
    let protectionInterval = setInterval(() => {
        const tasksSection = document.getElementById('tasks');
        const tasksList = document.getElementById('tasksList');
        
        if (tasksSection && tasksSection.classList.contains('active') && tasksList) {
            // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É, –∞ –∑–∞–¥–∞—á–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if (tasksLoaded && window.currentTasks && window.currentTasks.length > 0) {
                const hasContent = tasksList.querySelector('.task-card');
                if (!hasContent) {
                    console.log('üõ°Ô∏è Protecting tasks from being cleared');
                    displayTasks(window.currentTasks);
                }
            }
        }
    }, 2000);
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.autoLoadTasks = autoLoadTasks;
    window.startAutoLoad = startAutoLoad;
    window.stopAutoLoad = stopAutoLoad;
    
    console.log('‚úÖ AUTO LOAD TASKS READY!');
})();