// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.ready();
tg.expand();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let isManager = false;
const MANAGER_IDS = [385436658, 1734337242];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
        const initData = tg.initDataUnsafe;
        if (initData.user) {
            currentUser = initData.user;
            isManager = MANAGER_IDS.includes(currentUser.id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            updateUserInterface();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await loadDashboard();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
            hideLoader();
        } else {
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        }
    } catch (error) {
        console.error('Init error:', error);
        showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function updateUserInterface() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.getElementById('userName').textContent = currentUser.first_name;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if (isManager) {
        document.getElementById('createTaskBtn').style.display = 'block';
        document.getElementById('employeesBtn').style.display = 'block';
    }
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–º—É
    applyTheme();
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
function applyTheme() {
    const root = document.documentElement;
    const theme = tg.themeParams;
    
    root.style.setProperty('--tg-theme-bg-color', theme.bg_color || '#ffffff');
    root.style.setProperty('--tg-theme-text-color', theme.text_color || '#000000');
    root.style.setProperty('--tg-theme-hint-color', theme.hint_color || '#999999');
    root.style.setProperty('--tg-theme-link-color', theme.link_color || '#2481cc');
    root.style.setProperty('--tg-theme-button-color', theme.button_color || '#2481cc');
    root.style.setProperty('--tg-theme-button-text-color', theme.button_text_color || '#ffffff');
    root.style.setProperty('--tg-theme-secondary-bg-color', theme.secondary_bg_color || '#f1f1f1');
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è
document.querySelectorAll('.nav-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
        const section = btn.dataset.section;
        showSection(section);
    });
});

function showSection(sectionId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
    document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
    document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–µ–∫—Ü–∏—é
    document.getElementById(sectionId).classList.add('active');
    document.querySelector(`[data-section="${sectionId}"]`).classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏
    loadSectionData(sectionId);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–∫—Ü–∏–π
async function loadSectionData(section) {
    showLoader();
    
    try {
        switch(section) {
            case 'dashboard':
                await loadDashboard();
                break;
            case 'reports':
                await loadReports();
                break;
            case 'tasks':
                await loadTasks();
                break;
            case 'stats':
                await loadStats();
                break;
            case 'profile':
                await loadProfile();
                break;
        }
    } catch (error) {
        console.error(`Error loading ${section}:`, error);
        showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö`);
    } finally {
        hideLoader();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function loadDashboard() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        const todayStatus = await apiRequest('/api/reports/today-status');
        updateTodayStatus(todayStatus);
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        const tasks = await apiRequest('/api/tasks/my');
        const activeTasks = tasks.filter(t => t.status !== '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length;
        document.getElementById('activeTasksCount').textContent = activeTasks;
    } catch (error) {
        console.error('Dashboard error:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞
document.getElementById('reportForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const report = {
        whatDone: formData.get('whatDone'),
        problems: formData.get('problems') || '–ù–µ—Ç',
        goals: formData.get('goals')
    };
    
    try {
        showLoader();
        await apiRequest('/api/reports', 'POST', report);
        
        tg.showAlert('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
        e.target.reset();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        await loadDashboard();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
        showSection('dashboard');
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞');
    } finally {
        hideLoader();
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
async function loadReports() {
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        const today = new Date().toLocaleDateString('ru-RU', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
        document.getElementById('reportDate').textContent = today;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—á–µ—Ç–æ–≤
        const reports = await apiRequest('/api/reports/history');
        displayReportHistory(reports);
    } catch (error) {
        console.error('Reports error:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç—á–µ—Ç–æ–≤
function displayReportHistory(reports) {
    const container = document.getElementById('reportHistory');
    
    if (reports.length === 0) {
        container.innerHTML = '<p class="empty-message">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤</p>';
        return;
    }
    
    container.innerHTML = reports.map(report => `
        <div class="history-item">
            <div class="history-date">
                ${new Date(report.date).toLocaleDateString('ru-RU')}
            </div>
            <div class="history-content">
                <div class="history-field">
                    <strong>–ß—Ç–æ —Å–¥–µ–ª–∞–ª:</strong>
                    <p>${report.whatDone}</p>
                </div>
                <div class="history-field">
                    <strong>–ü—Ä–æ–±–ª–µ–º—ã:</strong>
                    <p>${report.problems}</p>
                </div>
                <div class="history-field">
                    <strong>–ü–ª–∞–Ω—ã:</strong>
                    <p>${report.goals}</p>
                </div>
            </div>
        </div>
    `).join('');
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
async function loadTasks() {
    try {
        const tasks = await apiRequest('/api/tasks/my');
        displayTasks(tasks);
        updateTaskFilters(tasks);
    } catch (error) {
        console.error('Tasks error:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
function displayTasks(tasks) {
    const container = document.getElementById('tasksList');
    
    if (tasks.length === 0) {
        container.innerHTML = '<p class="empty-message">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á</p>';
        return;
    }
    
    container.innerHTML = tasks.map(task => `
        <div class="task-card ${task.status.toLowerCase().replace(' ', '-')}" data-task-id="${task.id}">
            <div class="task-header">
                <h3>${task.title}</h3>
                <span class="task-priority priority-${task.priority || 'medium'}">
                    ${getPriorityIcon(task.priority)}
                </span>
            </div>
            <p class="task-description">${task.description || ''}</p>
            <div class="task-meta">
                ${task.deadline ? `<span>üìÖ ${formatDate(task.deadline)}</span>` : ''}
                <span class="task-status">${getStatusIcon(task.status)} ${task.status}</span>
            </div>
            <div class="task-actions">
                ${getTaskActions(task)}
            </div>
        </div>
    `).join('');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
    attachTaskActionHandlers();
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
function getPriorityIcon(priority) {
    const icons = {
        high: 'üî¥',
        medium: 'üü°',
        low: 'üü¢'
    };
    return icons[priority] || 'üü°';
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
function getStatusIcon(status) {
    const icons = {
        '–ù–æ–≤–∞—è': 'üî¥',
        '–í —Ä–∞–±–æ—Ç–µ': 'üü°',
        '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': 'üü¢'
    };
    return icons[status] || '‚ö™';
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU');
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏
function getTaskActions(task) {
    if (task.status === '–ù–æ–≤–∞—è') {
        return `<button class="task-btn" onclick="updateTaskStatus('${task.id}', '–í —Ä–∞–±–æ—Ç–µ')">–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É</button>`;
    } else if (task.status === '–í —Ä–∞–±–æ—Ç–µ') {
        return `<button class="task-btn success" onclick="updateTaskStatus('${task.id}', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞')">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</button>`;
    }
    return '';
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
async function updateTaskStatus(taskId, newStatus) {
    try {
        showLoader();
        await apiRequest(`/api/tasks/${taskId}/status`, 'PUT', { status: newStatus });
        
        tg.showAlert('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!');
        await loadTasks();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    } finally {
        hideLoader();
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
document.querySelectorAll('.filter-btn').forEach(btn => {
    btn.addEventListener('click', () => {
        const filter = btn.dataset.filter;
        filterTasks(filter);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
    });
});

function filterTasks(filter) {
    const tasks = document.querySelectorAll('.task-card');
    
    tasks.forEach(task => {
        if (filter === 'all') {
            task.style.display = 'block';
        } else {
            const status = task.querySelector('.task-status').textContent.trim();
            if (filter === 'new' && status.includes('–ù–æ–≤–∞—è')) {
                task.style.display = 'block';
            } else if (filter === 'in_progress' && status.includes('–í —Ä–∞–±–æ—Ç–µ')) {
                task.style.display = 'block';
            } else if (filter === 'completed' && status.includes('–í—ã–ø–æ–ª–Ω–µ–Ω–∞')) {
                task.style.display = 'block';
            } else {
                task.style.display = 'none';
            }
        }
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤
function updateTaskFilters(tasks) {
    const counts = {
        all: tasks.length,
        new: tasks.filter(t => t.status === '–ù–æ–≤–∞—è').length,
        in_progress: tasks.filter(t => t.status === '–í —Ä–∞–±–æ—Ç–µ').length,
        completed: tasks.filter(t => t.status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length
    };
    
    Object.entries(counts).forEach(([filter, count]) => {
        const btn = document.querySelector(`.filter-btn[data-filter="${filter}"] .count`);
        if (btn) btn.textContent = count;
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        const stats = await apiRequest('/api/stats');
        displayStats(stats);
    } catch (error) {
        console.error('Stats error:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function displayStats(stats) {
    document.getElementById('totalReports').textContent = stats.totalReports || 0;
    document.getElementById('completedTasks').textContent = stats.completedTasks || 0;
    document.getElementById('currentStreak').textContent = stats.currentStreak || 0;
    document.getElementById('completionRate').textContent = `${stats.completionRate || 0}%`;
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    // drawActivityChart(stats.weeklyActivity);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function loadProfile() {
    try {
        const profile = await apiRequest('/api/profile');
        displayProfile(profile);
    } catch (error) {
        console.error('Profile error:', error);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function displayProfile(profile) {
    document.getElementById('profileName').textContent = profile.name;
    document.getElementById('profilePosition').textContent = profile.position;
    document.getElementById('profileId').textContent = profile.telegramId;
}

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
document.getElementById('createTaskBtn').addEventListener('click', async () => {
    await loadEmployeesForTask();
    document.getElementById('taskModal').classList.add('active');
});

function closeTaskModal() {
    document.getElementById('taskModal').classList.remove('active');
    document.getElementById('taskForm').reset();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
async function loadEmployeesForTask() {
    try {
        const employees = await apiRequest('/api/users');
        const select = document.getElementById('taskEmployee');
        
        select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</option>' +
            employees
                .filter(e => e.telegramId !== currentUser.id)
                .map(e => `<option value="${e.telegramId}">${e.name} - ${e.position}</option>`)
                .join('');
    } catch (error) {
        console.error('Load employees error:', error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
document.getElementById('taskForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const task = {
        assigneeId: parseInt(formData.get('taskEmployee')),
        title: formData.get('taskTitle'),
        description: formData.get('taskDescription'),
        deadline: formData.get('taskDeadline'),
        priority: formData.get('taskPriority')
    };
    
    try {
        showLoader();
        await apiRequest('/api/tasks', 'POST', task);
        
        tg.showAlert('–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!');
        closeTaskModal();
        await loadTasks();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    } finally {
        hideLoader();
    }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π
function updateTodayStatus(status) {
    const statusContainer = document.getElementById('todayStatus');
    
    if (status.reportSent) {
        statusContainer.innerHTML = `
            <div class="status-item success">
                <span class="status-icon">‚úÖ</span>
                <span class="status-text">–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>
            </div>
        `;
    } else {
        statusContainer.innerHTML = `
            <div class="status-item warning">
                <span class="status-icon">‚ö†Ô∏è</span>
                <span class="status-text">–û—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>
            </div>
        `;
    }
}

// API –∑–∞–ø—Ä–æ—Å—ã
async function apiRequest(endpoint, method = 'GET', data = null) {
    const options = {
        method,
        headers: {
            'Content-Type': 'application/json',
            'X-Telegram-Init-Data': tg.initData
        }
    };
    
    if (data) {
        options.body = JSON.stringify(data);
    }
    
    const response = await fetch(endpoint, options);
    
    if (!response.ok) {
        throw new Error(`API error: ${response.status}`);
    }
    
    return response.json();
}

// –£—Ç–∏–ª–∏—Ç—ã
function showLoader() {
    document.getElementById('loader').classList.add('active');
}

function hideLoader() {
    document.getElementById('loader').classList.remove('active');
}

function showError(message) {
    tg.showAlert(message);
}

function showHelp() {
    tg.showAlert(
        'KAIF Staff Bot\n\n' +
        'üìù –û—Ç—á–µ—Ç—ã - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ —Ä–∞–±–æ—Ç–µ\n' +
        '‚úÖ –ó–∞–¥–∞—á–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏\n' +
        'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n\n' +
        '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    );
}

async function showEmployees() {
    try {
        showLoader();
        const employees = await apiRequest('/api/users');
        
        const list = employees.map(e => 
            `${e.name} - ${e.position}`
        ).join('\n');
        
        tg.showAlert('üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n\n' + list);
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤');
    } finally {
        hideLoader();
    }
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
document.getElementById('taskModal').addEventListener('click', (e) => {
    if (e.target.id === 'taskModal') {
        closeTaskModal();
    }
});