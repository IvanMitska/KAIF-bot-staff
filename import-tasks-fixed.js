#!/usr/bin/env node

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á –∏–∑ CSV —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π
 */

require('dotenv').config();
const fs = require('fs').promises;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –æ–±—ã—á–Ω—ã–π
let notionService;
try {
    notionService = require('./src/services/optimizedNotionService');
    console.log('Using optimized Notion service');
} catch (error) {
    notionService = require('./src/services/notionService');
    console.log('Using regular Notion service');
}

// –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ Telegram ID
const USER_MAPPING = {
    '–ö—Å–µ–Ω–∏—è': { telegramId: '1151085087', name: '–ö—Å–µ–Ω–∏—è' },
    '–ë–æ—Ä–∏—Å': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' },
    '–ò–≤–∞–Ω': { telegramId: '1734337242', name: '–ò–≤–∞–Ω' },
    '–ò–≥–æ—Ä—å': { telegramId: '321654987', name: '–ò–≥–æ—Ä—å' },
    '–ú–∞–∫—Å–∏–º': { telegramId: '303267717', name: '–ú–∞–∫—Å–∏–º' },
    '–î–º–∏—Ç—Ä–∏–π': { telegramId: '5937587032', name: '–î–º–∏—Ç—Ä–∏–π' },
    '–ê–ª–ª–∞': { telegramId: '642664990', name: '–ê–ª—è' },
    '–ê–ª—è': { telegramId: '642664990', name: '–ê–ª—è' },
    '–ï–ª–µ–Ω–∞': { telegramId: '726915228', name: '–ï–ª–µ–Ω–∞' },
    '–Ø–∫–æ–≤': { telegramId: '893020643', name: '–Ø–∫–æ–≤' },
    // –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ - –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
    '–ë–æ—Ä–∏—Å + –ö—Å–µ–Ω–∏—è': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' },
    '–ö—Å–µ–Ω–∏—è + –ë–æ—Ä–∏—Å': { telegramId: '1151085087', name: '–ö—Å–µ–Ω–∏—è' },
    '–ë–æ—Ä–∏—Å + –ò–≤–∞–Ω': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' },
    '–ú–∞–∫—Å–∏–º + –ë–æ—Ä–∏—Å': { telegramId: '303267717', name: '–ú–∞–∫—Å–∏–º' },
    '–î–º–∏—Ç—Ä–∏–π + –ú–∞–∫—Å–∏–º': { telegramId: '5937587032', name: '–î–º–∏—Ç—Ä–∏–π' },
    '–ò–≤–∞–Ω + –ë–æ—Ä–∏—Å': { telegramId: '1734337242', name: '–ò–≤–∞–Ω' },
    '–ë–æ—Ä–∏—Å + –ò–≤–∞–Ω + –î–º–∏—Ç—Ä–∏–π': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' },
    '–ö—Å–µ–Ω–∏—è + –ê–ª–ª–∞': { telegramId: '1151085087', name: '–ö—Å–µ–Ω–∏—è' },
    '–ö—Å–µ–Ω–∏—è + –ê–ª—è': { telegramId: '1151085087', name: '–ö—Å–µ–Ω–∏—è' },
    '–ö—Å–µ–Ω–∏—è + –ê–ª–ª–∞ + –ï–ª–µ–Ω–∞': { telegramId: '1151085087', name: '–ö—Å–µ–Ω–∏—è' },
    '–ò–≥–æ—Ä—å + –ë–æ—Ä–∏—Å': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' },
    '–ë–æ—Ä–∏—Å + –ò–≥–æ—Ä—å': { telegramId: '385436658', name: '–ë–æ—Ä–∏—Å' }
};

/**
 * –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ "18.08" –∏–ª–∏ "1-2 –Ω–µ–¥–µ–ª–∏"
 */
function parseDeadline(dateStr) {
    if (!dateStr) return null;
    
    const today = new Date();
    const year = today.getFullYear();
    
    console.log(`  –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ä–æ–∫–∞: "${dateStr}"`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç DD.MM
    if (dateStr.match(/^\d{1,2}\.\d{2}$/)) {
        const [day, month] = dateStr.split('.');
        const deadline = new Date(year, parseInt(month) - 1, parseInt(day));
        
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
        if (deadline < today) {
            deadline.setFullYear(year + 1);
        }
        
        const result = deadline.toISOString().split('T')[0];
        console.log(`    -> –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞: ${result}`);
        return result;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º "X –Ω–µ–¥–µ–ª–∏/–Ω–µ–¥–µ–ª—å" –∏–ª–∏ "X‚ÄìY –Ω–µ–¥–µ–ª–∏"
    if (dateStr.includes('–Ω–µ–¥–µ–ª')) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –Ω–µ–¥–µ–ª—å (–±–µ—Ä–µ–º –±–æ–ª—å—à–µ–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
        const matches = dateStr.match(/\d+/g);
        const weeks = matches ? Math.max(...matches.map(n => parseInt(n))) : 1;
        const deadline = new Date(today);
        deadline.setDate(deadline.getDate() + (weeks * 7));
        const result = deadline.toISOString().split('T')[0];
        console.log(`    -> ${weeks} –Ω–µ–¥–µ–ª—å –æ—Ç —Å–µ–≥–æ–¥–Ω—è: ${result}`);
        return result;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º "X –¥–Ω–µ–π/–¥–Ω—è" –∏–ª–∏ "X‚ÄìY –¥–Ω–µ–π"
    if (dateStr.includes('–¥–Ω')) {
        const matches = dateStr.match(/\d+/g);
        const days = matches ? Math.max(...matches.map(n => parseInt(n))) : 1;
        const deadline = new Date(today);
        deadline.setDate(deadline.getDate() + days);
        const result = deadline.toISOString().split('T')[0];
        console.log(`    -> ${days} –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è: ${result}`);
        return result;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–ü–æ—Å—Ç–æ—è–Ω–Ω–æ" –∏–ª–∏ "—Å—Ä–∞–∑—É"
    if (dateStr.toLowerCase().includes('–ø–æ—Å—Ç–æ—è–Ω–Ω–æ') || dateStr.toLowerCase().includes('—Å—Ä–∞–∑—É')) {
        // –î–ª—è —Å—Ä–æ—á–Ω—ã—Ö/–ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∑–∞–¥–∞—á —Å—Ç–∞–≤–∏–º –¥–µ–¥–ª–∞–π–Ω —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        const deadline = new Date(today);
        deadline.setDate(deadline.getDate() + 3);
        const result = deadline.toISOString().split('T')[0];
        console.log(`    -> –°—Ä–æ—á–Ω–∞—è –∑–∞–¥–∞—á–∞: ${result}`);
        return result;
    }
    
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
    const defaultDeadline = new Date(today);
    defaultDeadline.setDate(defaultDeadline.getDate() + 7);
    const result = defaultDeadline.toISOString().split('T')[0];
    console.log(`    -> –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (7 –¥–Ω–µ–π): ${result}`);
    return result;
}

/**
 * –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä CSV —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö –ø–æ–ª–µ–π
 */
function parseCSV(text) {
    const rows = [];
    let currentRow = [];
    let currentField = '';
    let inQuotes = false;
    
    for (let i = 0; i < text.length; i++) {
        const char = text[i];
        const nextChar = text[i + 1];
        
        if (char === '"') {
            if (inQuotes) {
                if (nextChar === '"') {
                    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–∞–≤—ã—á–∫–∞
                    currentField += '"';
                    i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞–≤—ã—á–∫—É
                } else {
                    // –ö–æ–Ω–µ—Ü –ø–æ–ª—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                    inQuotes = false;
                }
            } else {
                // –ù–∞—á–∞–ª–æ –ø–æ–ª—è –≤ –∫–∞–≤—ã—á–∫–∞—Ö
                inQuotes = true;
            }
        } else if (char === ',' && !inQuotes) {
            // –ö–æ–Ω–µ—Ü –ø–æ–ª—è
            currentRow.push(currentField);
            currentField = '';
        } else if ((char === '\n' || char === '\r') && !inQuotes) {
            // –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
            if (char === '\r' && nextChar === '\n') {
                i++; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º \n –ø–æ—Å–ª–µ \r
            }
            if (currentField || currentRow.length > 0) {
                currentRow.push(currentField);
                rows.push(currentRow);
                currentRow = [];
                currentField = '';
            }
        } else {
            // –û–±—ã—á–Ω—ã–π —Å–∏–º–≤–æ–ª
            currentField += char;
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ –∏ —Å—Ç—Ä–æ–∫—É
    if (currentField || currentRow.length > 0) {
        currentRow.push(currentField);
        rows.push(currentRow);
    }
    
    return rows;
}

/**
 * –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞
 */
async function importFromCSV(filePath) {
    console.log('\nüìÑ –ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞...');
    
    try {
        const csvContent = await fs.readFile(filePath, 'utf8');
        const rows = parseCSV(csvContent);
        
        console.log(`‚úÖ –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ —Å—Ç—Ä–æ–∫: ${rows.length}`);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const dataRows = rows.slice(1);
        
        console.log(`\nüì• –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${dataRows.length}`);
        console.log('=' .repeat(50));
        
        let successCount = 0;
        let errorCount = 0;
        const errors = [];
        
        for (let i = 0; i < dataRows.length; i++) {
            const row = dataRows[i];
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫)
            const [
                category,       // 0 - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
                taskTitle,      // 1 - –ó–∞–¥–∞—á–∞
                details,        // 2 - –î–µ—Ç–∞–ª–∏/—à–∞–≥–∏
                dateCreated,    // 3 - –î–∞—Ç–∞ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                deadline,       // 4 - –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Å—Ä–æ–∫
                assignee,       // 5 - –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π
                priority,       // 6 - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                comment,        // 7 - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                result,         // 8 - –†–µ–∑—É–ª—å—Ç–∞—Ç
                status          // 9 - –°—Ç–∞—Ç—É—Å
            ] = row;
            
            // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
            const cleanTitle = taskTitle?.trim();
            const cleanAssignee = assignee?.trim();
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if (!cleanTitle || !cleanAssignee) {
                console.log(`‚è≠Ô∏è  –°—Ç—Ä–æ–∫–∞ ${i + 2}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è)`);
                continue;
            }
            
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            if (status && (status.toLowerCase().includes('–≤—ã–ø–æ–ª–Ω–µ–Ω') || status.toLowerCase().includes('–≥–æ—Ç–æ–≤'))) {
                console.log(`‚úÖ –°—Ç—Ä–æ–∫–∞ ${i + 2}: –ø—Ä–æ–ø—É—â–µ–Ω–∞ (—É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)`);
                continue;
            }
            
            // –ù–∞—Ö–æ–¥–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            let user = USER_MAPPING[cleanAssignee];
            
            if (!user) {
                // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É –∏–º–µ–Ω–∏
                const firstName = cleanAssignee.split(' ')[0].trim();
                user = USER_MAPPING[firstName];
            }
            
            if (!user) {
                console.log(`‚ö†Ô∏è  –°—Ç—Ä–æ–∫–∞ ${i + 2}: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${cleanAssignee}"`);
                errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${cleanAssignee}"`);
                errorCount++;
                continue;
            }
            
            try {
                // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                let description = '';
                if (details && details.trim()) {
                    description += `üìã –î–µ—Ç–∞–ª–∏: ${details.trim()}\n\n`;
                }
                if (result && result.trim() && result !== '0') {
                    description += `üéØ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${result.trim()}\n\n`;
                }
                if (category && category.trim()) {
                    description += `üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.trim()}`;
                }
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                let taskPriority = '–°—Ä–µ–¥–Ω–∏–π';
                if (priority) {
                    const priorityLower = priority.toLowerCase();
                    if (priorityLower.includes('–≤—ã—Å–æ–∫') || priorityLower.includes('—Å—Ä–æ—á–Ω')) {
                        taskPriority = '–í—ã—Å–æ–∫–∏–π';
                    } else if (priorityLower.includes('–Ω–∏–∑–∫')) {
                        taskPriority = '–ù–∏–∑–∫–∏–π';
                    }
                }
                
                // –ü–∞—Ä—Å–∏–º –¥–µ–¥–ª–∞–π–Ω
                const taskDeadline = parseDeadline(deadline) || parseDeadline(dateCreated);
                
                // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
                const taskData = {
                    title: cleanTitle,
                    description: description.trim() || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è',
                    assigneeId: user.telegramId,
                    assigneeName: user.name,
                    creatorId: 'import_script',
                    creatorName: '–ò–º–ø–æ—Ä—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã',
                    status: '–ù–æ–≤–∞—è',
                    priority: taskPriority,
                    deadline: taskDeadline || new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]
                };
                
                console.log(`\nüìù –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É ${i + 2}/${dataRows.length}:`);
                console.log(`   –ù–∞–∑–≤–∞–Ω–∏–µ: ${cleanTitle}`);
                console.log(`   –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${user.name} (${user.telegramId})`);
                console.log(`   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${taskPriority}`);
                console.log(`   –î–µ–¥–ª–∞–π–Ω: ${taskData.deadline}`);
                
                await notionService.createTask(taskData);
                
                successCount++;
                console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
                await new Promise(resolve => setTimeout(resolve, 300));
                
            } catch (error) {
                console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 2}: ${error.message}`);
                errorCount++;
            }
        }
        
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('\n' + '='.repeat(50));
        console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–ú–ü–û–†–¢–ê:');
        console.log('='.repeat(50));
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successCount} –∑–∞–¥–∞—á`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        
        if (errors.length > 0) {
            console.log('\n‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
            errors.forEach(err => console.log(`   - ${err}`));
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ CSV —Ñ–∞–π–ª–∞:', error.message);
    }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–¥–∞—á –∏–∑ CSV');
    console.log('=' .repeat(50));
    
    const args = process.argv.slice(2);
    
    if (args[0] === '--help' || !args[0]) {
        console.log('\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
        console.log('  node import-tasks-fixed.js <file.csv>');
        console.log('\n–ü—Ä–∏–º–µ—Ä:');
        console.log('  node import-tasks-fixed.js "/Users/ivan/Downloads/–ó–∞–¥–∞—á–∏ –ö–ê–ô–§ - –ê–≤–≥—É—Å—Ç.csv"');
        return;
    }
    
    await importFromCSV(args[0]);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main().catch(console.error);