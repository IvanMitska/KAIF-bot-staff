// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.ready();
tg.expand();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ initData
console.log('Telegram WebApp initialized:', {
    initData: tg.initData ? 'Present' : 'Missing',
    initDataLength: tg.initData?.length || 0,
    user: tg.initDataUnsafe?.user
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#0F0F14');
document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#FFFFFF');

// API URL
const API_URL = window.location.origin;

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message, type = 'info') {
    console.log(`Notification [${type}]:`, message);
    if (tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentFilter = 'all';
let lastNewTasksCount = 0;
let currentTaskType = 'my'; // 'my' –∏–ª–∏ 'created'
let currentTasks = []; // –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    if (tg.initDataUnsafe.user) {
        document.getElementById('userName').textContent = tg.initDataUnsafe.user.first_name;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await loadProfile();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
    await checkReportStatus();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    await checkAttendanceStatus();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    await loadTasksCount();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    setCurrentDate();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞
    document.getElementById('reportForm').addEventListener('submit', submitReport);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(async () => {
        await loadTasksCount();
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞—á, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        if (document.getElementById('tasks').classList.contains('active')) {
            loadTasks();
        }
    }, 30000);
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
function showPage(pageId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.getElementById(pageId).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButtons = document.querySelectorAll('.nav-btn');
    const pageIndex = ['home', 'report', 'tasks', 'stats', 'profile'].indexOf(pageId);
    if (pageIndex !== -1 && navButtons[pageIndex]) {
        navButtons[pageIndex].classList.add('active');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    switch(pageId) {
        case 'tasks':
            loadTasks();
            break;
        case 'stats':
            loadStats();
            break;
        case 'profile':
            loadFullProfile();
            break;
    }
    
    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function loadProfile() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ Telegram
        if (!tg.initData || tg.initData.length === 0) {
            console.error('No initData available. WebApp context:', {
                platform: tg.platform,
                version: tg.version,
                initDataUnsafe: tg.initDataUnsafe
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const errorHTML = `
                <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; padding: 20px;">
                    <div style="background: var(--bg-card); border-radius: 20px; padding: 32px; text-align: center; max-width: 320px;">
                        <div style="font-size: 64px; margin-bottom: 24px;">üîí</div>
                        <h2 style="margin-bottom: 16px; color: var(--text-primary);">–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
                        <p style="color: var(--text-secondary); margin-bottom: 24px;">
                            –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ @Report_KAIF_bot
                        </p>
                        <div style="background: var(--bg-secondary); border-radius: 12px; padding: 16px;">
                            <p style="color: var(--text-muted); font-size: 14px; margin: 0;">
                                –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –±–æ—Ç—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
                            </p>
                        </div>
                    </div>
                </div>
            `;
            document.body.innerHTML = errorHTML;
            return;
        }
        
        console.log('Loading profile with initData length:', tg.initData.length);
        
        const response = await fetch(`${API_URL}/api/profile`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        console.log('Profile response:', response.status);
        
        if (response.ok) {
            currentUser = await response.json();
            
            if (currentUser && !currentUser.needsRegistration) {
                document.getElementById('userName').textContent = currentUser.name.split(' ')[0];
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                const createTaskBtn = document.getElementById('createTaskBtn');
                if (createTaskBtn) {
                    createTaskBtn.style.display = 'inline-flex';
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                const MANAGER_IDS = [385436658, 1734337242]; // Boris, Ivan
                const isManager = MANAGER_IDS.includes(tg.initDataUnsafe.user?.id);
                
                if (isManager) {
                    document.getElementById('managerSection')?.style.setProperty('display', 'block');
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–∏–ø–∞ –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
                    const createdTasksBtn = document.getElementById('createdTasksBtn');
                    if (createdTasksBtn) {
                        createdTasksBtn.style.display = 'block';
                    }
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
                window.isManager = isManager;
            }
        }
    } catch (error) {
        console.error('Error loading profile:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞
async function checkReportStatus() {
    try {
        const response = await fetch(`${API_URL}/api/reports/today-status`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            const statusItem = document.getElementById('reportStatusItem');
            
            if (data.reportSent) {
                statusItem.classList.remove('status-warning');
                statusItem.classList.add('status-success');
                statusItem.innerHTML = `
                    <span class="status-icon">‚úÖ</span>
                    <span class="status-text">–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>
                `;
            }
        }
    } catch (error) {
        console.error('Error checking report status:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
async function loadTasksCount() {
    try {
        if (!tg.initData) {
            console.error('No initData for tasks count');
            return;
        }
        
        const response = await fetch(`${API_URL}/api/tasks/my`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        console.log('Tasks count response:', response.status);
        
        if (response.ok) {
            const tasks = await response.json();
            const activeTasks = tasks.filter(t => t.status !== '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length;
            const newTasks = tasks.filter(t => t.status === '–ù–æ–≤–∞—è').length;
            
            document.getElementById('activeTasksCount').textContent = activeTasks;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂ —Å –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
            updateTaskBadge(newTasks);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            if (newTasks > lastNewTasksCount) {
                // –í–∏–±—Ä–∞—Ü–∏—è –∏ –∑–≤—É–∫ –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
                if (tg.HapticFeedback) {
                    tg.HapticFeedback.notificationOccurred('success');
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (newTasks - lastNewTasksCount === 1) {
                    tg.showAlert('–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞! üìã');
                } else {
                    tg.showAlert(`–£ –≤–∞—Å ${newTasks - lastNewTasksCount} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á! üìã`);
                }
            }
            
            lastNewTasksCount = newTasks;
        }
    } catch (error) {
        console.error('Error loading tasks count:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
function updateTaskBadge(count) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –∫–Ω–æ–ø–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const taskNavBtn = document.querySelector('.nav-btn[onclick*="tasks"]');
    if (taskNavBtn) {
        let badge = taskNavBtn.querySelector('.nav-badge');
        if (count > 0) {
            if (!badge) {
                badge = document.createElement('span');
                badge.className = 'nav-badge';
                taskNavBtn.appendChild(badge);
            }
            badge.textContent = count;
            badge.style.display = 'block';
        } else if (badge) {
            badge.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–¥–∞—á
    const taskCard = document.querySelector('.action-card[onclick*="tasks"]');
    if (taskCard) {
        let badge = taskCard.querySelector('.card-badge');
        if (count > 0) {
            if (!badge) {
                badge = document.createElement('span');
                badge.className = 'card-badge';
                badge.style.cssText = 'position: absolute; top: 20px; right: 20px; background: var(--danger); color: white; border-radius: 12px; padding: 4px 8px; font-size: 12px; font-weight: 600;';
                taskCard.style.position = 'relative';
                taskCard.appendChild(badge);
            }
            badge.textContent = `${count} ${count === 1 ? '–Ω–æ–≤–∞—è' : '–Ω–æ–≤—ã—Ö'}`;
        } else if (badge) {
            badge.remove();
        }
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
async function submitReport(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const report = {
        whatDone: formData.get('whatDone'),
        problems: formData.get('problems') || '–ù–µ—Ç'
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const submitBtn = event.target.querySelector('.submit-btn');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    submitBtn.disabled = true;
    
    try {
        const response = await fetch(`${API_URL}/api/reports`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-Init-Data': tg.initData
            },
            body: JSON.stringify(report)
        });
        
        if (response.ok) {
            // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }
            
            tg.showAlert('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚úÖ', () => {
                event.target.reset();
                showPage('home');
                checkReportStatus();
            });
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
    } catch (error) {
        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞–¥–∞—á
function switchTaskType(type) {
    currentTaskType = type;
    currentFilter = 'all';
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    const myBtn = document.getElementById('myTasksBtn');
    const createdBtn = document.getElementById('createdTasksBtn');
    
    if (type === 'my') {
        myBtn.classList.add('active');
        myBtn.style.background = 'var(--bg-card)';
        myBtn.style.color = 'var(--text-primary)';
        createdBtn.classList.remove('active');
        createdBtn.style.background = 'transparent';
        createdBtn.style.color = 'var(--text-secondary)';
    } else {
        createdBtn.classList.add('active');
        createdBtn.style.background = 'var(--bg-card)';
        createdBtn.style.color = 'var(--text-primary)';
        myBtn.classList.remove('active');
        myBtn.style.background = 'transparent';
        myBtn.style.color = 'var(--text-secondary)';
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector('.filter-btn[onclick*="all"]').classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
    loadTasks();
    
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
async function loadTasks() {
    const tasksList = document.getElementById('tasksList');
    tasksList.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p style="margin-top: 16px;">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</p>
        </div>
    `;
    
    try {
        console.log('Loading tasks...');
        console.log('Task type:', currentTaskType);
        console.log('Init data available:', !!tg.initData);
        
        const endpoint = currentTaskType === 'my' ? '/api/tasks/my' : '/api/tasks/created';
        
        const response = await fetch(`${API_URL}${endpoint}`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        console.log('Response status:', response.status);
        
        if (response.ok) {
            const tasks = await response.json();
            console.log('Tasks loaded:', tasks.length);
            currentTasks = tasks; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
            displayTasks(tasks);
            updateTaskCounts(tasks);
        } else {
            const error = await response.text();
            console.error('Error response:', error);
            tasksList.innerHTML = `<p style="text-align: center; color: var(--text-muted);">–û—à–∏–±–∫–∞: ${response.status}</p>`;
        }
    } catch (error) {
        console.error('Error loading tasks:', error);
        tasksList.innerHTML = '<p style="text-align: center; color: var(--text-muted);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
function displayTasks(tasks) {
    const tasksList = document.getElementById('tasksList');
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    let filteredTasks = tasks;
    if (currentFilter !== 'all') {
        const statusMap = {
            'new': '–ù–æ–≤–∞—è',
            'in-progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
        };
        filteredTasks = tasks.filter(task => task.status === statusMap[currentFilter]);
    }
    
    if (filteredTasks.length === 0) {
        tasksList.innerHTML = '<p style="text-align: center; color: var(--text-muted); padding: 40px;">–ù–µ—Ç –∑–∞–¥–∞—á</p>';
        return;
    }
    
    tasksList.innerHTML = filteredTasks.map(task => {
        const statusClass = task.status === '–ù–æ–≤–∞—è' ? 'new' : 
                          task.status === '–í —Ä–∞–±–æ—Ç–µ' ? 'in-progress' : 'completed';
        
        return `
            <div class="task-item" onclick="openTaskDetail('${task.id}')" style="cursor: pointer;">
                <div class="task-header">
                    <h3 class="task-title">${task.title}</h3>
                    <span class="task-status ${statusClass}">${task.status}</span>
                </div>
                ${task.description ? `<p class="task-description">${task.description}</p>` : ''}
                <div class="task-meta">
                    <span>üìÖ ${formatDate(task.deadline)}</span>
                    <span>üë§ ${currentTaskType === 'my' ? 
                        (task.creatorName === currentUser?.name ? '–Ø' : (task.creatorName || '–°–∏—Å—Ç–µ–º–∞')) : 
                        (task.assigneeName || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}</span>
                </div>
            </div>
        `;
    }).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á
function updateTaskCounts(tasks) {
    const counts = {
        all: tasks.length,
        new: tasks.filter(t => t.status === '–ù–æ–≤–∞—è').length,
        'in-progress': tasks.filter(t => t.status === '–í —Ä–∞–±–æ—Ç–µ').length,
        completed: tasks.filter(t => t.status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length
    };
    
    document.querySelectorAll('.filter-btn').forEach(btn => {
        const filter = btn.getAttribute('onclick').match(/filterTasks\('(.+)'\)/)[1];
        const countSpan = btn.querySelector('.count');
        if (countSpan) {
            countSpan.textContent = counts[filter] || 0;
        }
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
function filterTasks(filter) {
    currentFilter = filter;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
    loadTasks();
    
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        const response = await fetch(`${API_URL}/api/stats`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const stats = await response.json();
            
            document.getElementById('totalReports').textContent = stats.totalReports || 0;
            document.getElementById('completedTasks').textContent = stats.completedTasks || 0;
            document.getElementById('currentStreak').textContent = stats.currentStreak || 0;
            document.getElementById('completionRate').textContent = `${stats.completionRate || 0}%`;
        }
    } catch (error) {
        console.error('Error loading stats:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
async function loadFullProfile() {
    if (currentUser) {
        document.getElementById('profileName').textContent = currentUser.name;
        document.getElementById('profilePosition').textContent = currentUser.position;
        document.getElementById('profileId').textContent = currentUser.telegramId;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function setCurrentDate() {
    const date = new Date();
    const options = { day: 'numeric', month: 'long', year: 'numeric' };
    const formattedDate = date.toLocaleDateString('ru-RU', options);
    document.getElementById('reportDate').textContent = formattedDate;
}

function formatDate(dateString) {
    if (!dateString) return '–ë–µ–∑ —Å—Ä–æ–∫–∞';
    const date = new Date(dateString);
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    if (date.toDateString() === today.toDateString()) {
        return '–°–µ–≥–æ–¥–Ω—è';
    } else if (date.toDateString() === tomorrow.toDateString()) {
        return '–ó–∞–≤—Ç—Ä–∞';
    } else {
        return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
    }
}

// –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
function showHelp() {
    tg.showAlert(
        'KAIF App v1.0\n\n' +
        'üìù –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n' +
        '‚úÖ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∞–º–∏\n' +
        'üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n\n' +
        '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    );
}

// –§—É–Ω–∫—Ü–∏–∏ —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
async function checkAttendanceStatus() {
    try {
        const response = await fetch(`${API_URL}/api/attendance/today`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const attendance = await response.json();
            const statusItem = document.getElementById('attendanceStatusItem');
            const checkInBtn = document.getElementById('checkInBtn');
            const checkOutBtn = document.getElementById('checkOutBtn');
            const checkInTime = document.getElementById('checkInTime');
            const checkOutTime = document.getElementById('checkOutTime');
            
            if (attendance) {
                if (attendance.checkIn) {
                    // –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø—Ä–∏—à–µ–ª
                    const checkInDate = new Date(attendance.checkIn);
                    const timeStr = checkInDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
                    
                    checkInBtn.disabled = true;
                    checkInBtn.classList.add('active');
                    checkInTime.textContent = `–ü—Ä–∏—à–µ–ª –≤ ${timeStr}`;
                    checkInTime.style.display = 'block';
                    
                    if (attendance.checkOut) {
                        // –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—à–µ–ª
                        const checkOutDate = new Date(attendance.checkOut);
                        const timeStr = checkOutDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
                        
                        checkOutBtn.disabled = true;
                        checkOutBtn.classList.add('active');
                        checkOutTime.textContent = `–£—à–µ–ª –≤ ${timeStr}`;
                        checkOutTime.style.display = 'block';
                        
                        statusItem.className = 'status-item status-success';
                        statusItem.innerHTML = `
                            <span class="status-icon">‚úÖ</span>
                            <span class="status-text">–†–∞–±–æ—á–∏–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω (${attendance.workHours} —á)</span>
                        `;
                    } else {
                        // –ù–∞ —Ä–∞–±–æ—Ç–µ
                        checkOutBtn.disabled = false;
                        
                        statusItem.className = 'status-item status-success';
                        statusItem.innerHTML = `
                            <span class="status-icon">üü¢</span>
                            <span class="status-text">–ù–∞ —Ä–∞–±–æ—Ç–µ —Å ${timeStr}</span>
                        `;
                    }
                } else {
                    // –ù–µ –ø—Ä–∏—à–µ–ª
                    checkInBtn.disabled = false;
                    checkOutBtn.disabled = true;
                    
                    statusItem.className = 'status-item status-warning';
                    statusItem.innerHTML = `
                        <span class="status-icon">‚è∞</span>
                        <span class="status-text">–ù–µ –æ—Ç–º–µ—á–µ–Ω –ø—Ä–∏—Ö–æ–¥</span>
                    `;
                }
            } else {
                // –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                checkInBtn.disabled = false;
                checkOutBtn.disabled = true;
                
                statusItem.className = 'status-item status-warning';
                statusItem.innerHTML = `
                    <span class="status-icon">‚è∞</span>
                    <span class="status-text">–ù–µ –æ—Ç–º–µ—á–µ–Ω –ø—Ä–∏—Ö–æ–¥</span>
                `;
            }
        }
    } catch (error) {
        console.error('Error checking attendance status:', error);
    }
}

// –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥
window.checkIn = async function() {
    try {
        const checkInBtn = document.getElementById('checkInBtn');
        checkInBtn.disabled = true;
        
        const response = await fetch(`${API_URL}/api/attendance/check-in`, {
            method: 'POST',
            headers: {
                'X-Telegram-Init-Data': tg.initData,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            showNotification('–ü—Ä–∏—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω', 'success');
            await checkAttendanceStatus();
            
            // –í–∏–±—Ä–∞—Ü–∏—è
            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }
        } else {
            showNotification('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞', 'error');
            checkInBtn.disabled = false;
        }
    } catch (error) {
        console.error('Error checking in:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–∏—Ö–æ–¥–∞', 'error');
        document.getElementById('checkInBtn').disabled = false;
    }
}

// –û—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥
window.checkOut = async function() {
    try {
        const checkOutBtn = document.getElementById('checkOutBtn');
        checkOutBtn.disabled = true;
        
        const response = await fetch(`${API_URL}/api/attendance/check-out`, {
            method: 'POST',
            headers: {
                'X-Telegram-Init-Data': tg.initData,
                'Content-Type': 'application/json'
            }
        });
        
        if (response.ok) {
            const result = await response.json();
            showNotification(`–£—Ö–æ–¥ –æ—Ç–º–µ—á–µ–Ω. –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${result.workHours} —á–∞—Å–æ–≤`, 'success');
            await checkAttendanceStatus();
            
            // –í–∏–±—Ä–∞—Ü–∏—è
            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }
        } else {
            showNotification('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É—Ö–æ–¥–∞', 'error');
            checkOutBtn.disabled = false;
        }
    } catch (error) {
        console.error('Error checking out:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É—Ö–æ–¥–∞', 'error');
        document.getElementById('checkOutBtn').disabled = false;
    }
}

// –û—Ç–ª–∞–¥–∫–∞ –∑–∞–¥–∞—á
// –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
window.showAdminPanel = function() {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(currentUser?.telegramId)) {
        showNotification('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', 'error');
        return;
    }
    
    showPage('adminPanel');
    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º dashboard
    switchAdminTab('dashboard');
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
window.switchAdminTab = function(tab) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
    document.querySelectorAll('.admin-tab').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelectorAll('.admin-tab-content').forEach(content => {
        content.classList.remove('active');
    });
    
    document.getElementById(`${tab}Tab`).classList.add('active');
    document.getElementById(`${tab}Content`).classList.add('active');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∫–ª–∞–¥–∫–∏
    if (tab === 'dashboard') {
        loadDashboard();
    } else if (tab === 'reports') {
        loadAdminPanel();
    } else if (tab === 'attendance') {
        loadAttendanceTab();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ dashboard
async function loadDashboard() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [employeesRes, todayReportsRes, tasksRes] = await Promise.all([
            fetch(`${API_URL}/api/employees`, {
                headers: { 'X-Telegram-Init-Data': tg.initData }
            }),
            fetch(`${API_URL}/api/admin/reports?startDate=${new Date().toISOString().split('T')[0]}&endDate=${new Date().toISOString().split('T')[0]}`, {
                headers: { 'X-Telegram-Init-Data': tg.initData }
            }),
            fetch(`${API_URL}/api/admin/dashboard/stats`, {
                headers: { 'X-Telegram-Init-Data': tg.initData }
            })
        ]);
        
        if (employeesRes.ok && todayReportsRes.ok && tasksRes.ok) {
            const employees = await employeesRes.json();
            const todayData = await todayReportsRes.json();
            const dashboardStats = await tasksRes.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            document.getElementById('dashboardTodayReports').textContent = todayData.todayReports;
            document.getElementById('dashboardMissingReports').textContent = employees.length - todayData.todayReports;
            document.getElementById('dashboardActiveTasks').textContent = dashboardStats.activeTasks;
            document.getElementById('dashboardCompletedToday').textContent = dashboardStats.completedToday;
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
            loadActivityChart(dashboardStats.weekActivity);
            loadTopEmployees(dashboardStats.topEmployees);
            loadTasksStatus(dashboardStats.tasksStatus);
            loadMissingReports(employees, todayData.reports);
            loadAttendanceStatus();
        }
        
    } catch (error) {
        console.error('Error loading dashboard:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dashboard', 'error');
    }
}

// –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
function loadActivityChart(weekData) {
    const container = document.getElementById('activityChart');
    
    if (!weekData || weekData.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å –ø–æ–º–æ—â—å—é HTML/CSS
    let maxValue = Math.max(...weekData.map(d => d.count));
    if (maxValue === 0) maxValue = 1;
    
    let html = '<div style="display: flex; align-items: flex-end; justify-content: space-between; height: 160px; margin-bottom: 16px;">';
    
    weekData.forEach(day => {
        const height = (day.count / maxValue) * 140;
        const dayName = new Date(day.date).toLocaleDateString('ru-RU', { weekday: 'short' });
        
        html += `
            <div style="flex: 1; display: flex; flex-direction: column; align-items: center; gap: 8px;">
                <div style="position: relative; width: 100%; max-width: 40px;">
                    <div style="background: var(--gradient-primary); height: ${height}px; border-radius: 8px 8px 0 0; transition: all 0.3s; cursor: pointer;"
                         onmouseover="this.style.transform='scaleY(1.05)'"
                         onmouseout="this.style.transform='scaleY(1)'">
                    </div>
                    <div style="position: absolute; top: -24px; left: 50%; transform: translateX(-50%); font-size: 12px; font-weight: 600; color: var(--text-primary);">
                        ${day.count}
                    </div>
                </div>
                <div style="font-size: 12px; color: var(--text-secondary);">${dayName}</div>
            </div>
        `;
    });
    
    html += '</div>';
    container.innerHTML = html;
}

// –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function loadTopEmployees(topEmployees) {
    const container = document.getElementById('topEmployees');
    
    if (!topEmployees || topEmployees.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
        return;
    }
    
    let html = '<div style="display: flex; flex-direction: column; gap: 12px;">';
    
    topEmployees.forEach((employee, index) => {
        const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üèÜ';
        
        html += `
            <div style="display: flex; align-items: center; gap: 12px; padding: 12px; background: var(--bg-card); border-radius: 12px;">
                <span style="font-size: 24px;">${medal}</span>
                <div style="flex: 1;">
                    <div style="font-weight: 600; color: var(--text-primary);">${employee.name}</div>
                    <div style="font-size: 12px; color: var(--text-secondary);">${employee.reportsCount} –æ—Ç—á–µ—Ç–æ–≤</div>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    container.innerHTML = html;
}

// –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á
function loadTasksStatus(tasksStatus) {
    const container = document.getElementById('tasksStatus');
    
    if (!tasksStatus) {
        container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>';
        return;
    }
    
    const total = tasksStatus.new + tasksStatus.inProgress + tasksStatus.completed;
    
    let html = `
        <div style="margin-bottom: 20px;">
            <div style="display: flex; height: 20px; border-radius: 10px; overflow: hidden; background: var(--bg-primary);">
                ${tasksStatus.new > 0 ? `<div style="width: ${(tasksStatus.new / total) * 100}%; background: var(--danger);"></div>` : ''}
                ${tasksStatus.inProgress > 0 ? `<div style="width: ${(tasksStatus.inProgress / total) * 100}%; background: var(--warning);"></div>` : ''}
                ${tasksStatus.completed > 0 ? `<div style="width: ${(tasksStatus.completed / total) * 100}%; background: var(--success);"></div>` : ''}
            </div>
        </div>
        
        <div style="display: flex; flex-direction: column; gap: 8px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <div style="width: 12px; height: 12px; background: var(--danger); border-radius: 3px;"></div>
                    <span style="font-size: 14px; color: var(--text-secondary);">–ù–æ–≤—ã–µ</span>
                </div>
                <span style="font-weight: 600;">${tasksStatus.new}</span>
            </div>
            
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <div style="width: 12px; height: 12px; background: var(--warning); border-radius: 3px;"></div>
                    <span style="font-size: 14px; color: var(--text-secondary);">–í —Ä–∞–±–æ—Ç–µ</span>
                </div>
                <span style="font-weight: 600;">${tasksStatus.inProgress}</span>
            </div>
            
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <div style="display: flex; align-items: center; gap: 8px;">
                    <div style="width: 12px; height: 12px; background: var(--success); border-radius: 3px;"></div>
                    <span style="font-size: 14px; color: var(--text-secondary);">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
                </div>
                <span style="font-weight: 600;">${tasksStatus.completed}</span>
            </div>
        </div>
    `;
    
    container.innerHTML = html;
}

// –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –±–µ–∑ –æ—Ç—á–µ—Ç–æ–≤
function loadMissingReports(allEmployees, todayReports) {
    const container = document.getElementById('missingReportsList');
    
    // –ü–æ–ª—É—á–∞–µ–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç—ã
    const reportedIds = todayReports.map(r => parseInt(r.telegramId));
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª
    const missingEmployees = allEmployees.filter(emp => !reportedIds.includes(emp.telegramId));
    
    if (missingEmployees.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: 20px;">
                <p style="color: var(--success); font-size: 16px;">‚úÖ –í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç—ã!</p>
            </div>
        `;
        return;
    }
    
    let html = '<div style="display: flex; flex-direction: column; gap: 12px;">';
    
    missingEmployees.forEach(employee => {
        html += `
            <div style="display: flex; align-items: center; justify-content: space-between; padding: 12px; background: var(--bg-card); border-radius: 12px; border: 1px solid rgba(255, 107, 107, 0.2);">
                <div>
                    <div style="font-weight: 600; color: var(--text-primary);">${employee.name}</div>
                    <div style="font-size: 12px; color: var(--text-secondary);">${employee.position}</div>
                </div>
                <button onclick="sendReminderToEmployee(${employee.telegramId}, '${employee.name}')" 
                        style="padding: 8px 16px; background: var(--warning); border: none; border-radius: 8px; color: black; font-size: 12px; font-weight: 600; cursor: pointer;">
                    –ù–∞–ø–æ–º–Ω–∏—Ç—å
                </button>
            </div>
        `;
    });
    
    html += '</div>';
    container.innerHTML = html;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É
window.sendReminderToEmployee = async function(employeeId, employeeName) {
    if (!confirm(`–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ${employeeName}?`)) {
        return;
    }
    
    try {
        const response = await fetch(`${API_URL}/api/admin/send-reminder`, {
            method: 'POST',
            headers: {
                'X-Telegram-Init-Data': tg.initData,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ employeeId })
        });
        
        if (response.ok) {
            showNotification('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
        } else {
            showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'error');
        }
    } catch (error) {
        console.error('Error sending reminder:', error);
        showNotification('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', 'error');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
async function loadAttendanceStatus() {
    const container = document.getElementById('attendanceStatus');
    
    try {
        const response = await fetch(`${API_URL}/api/admin/attendance/current`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const attendanceData = await response.json();
            
            if (attendanceData.length === 0) {
                container.innerHTML = `
                    <div style="text-align: center; padding: 20px;">
                        <p style="color: var(--text-secondary);">–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è</p>
                    </div>
                `;
                return;
            }
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É (–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–≤—ã–º–∏)
            attendanceData.sort((a, b) => {
                if (a.isPresent && !b.isPresent) return -1;
                if (!a.isPresent && b.isPresent) return 1;
                return 0;
            });
            
            let html = '<div style="display: flex; flex-direction: column; gap: 12px;">';
            
            attendanceData.forEach(attendance => {
                const checkInTime = new Date(attendance.checkIn).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
                const checkOutTime = attendance.checkOut ? 
                    new Date(attendance.checkOut).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : null;
                
                html += `
                    <div style="display: flex; align-items: center; justify-content: space-between; padding: 12px; background: var(--bg-card); border-radius: 12px; border: 1px solid ${attendance.isPresent ? 'rgba(78, 205, 196, 0.2)' : 'rgba(255, 255, 255, 0.05)'};">
                        <div style="display: flex; align-items: center; gap: 12px;">
                            <div style="font-size: 20px;">${attendance.isPresent ? 'üü¢' : 'üî¥'}</div>
                            <div>
                                <div style="font-weight: 600; color: var(--text-primary);">${attendance.employeeName}</div>
                                <div style="font-size: 12px; color: var(--text-secondary);">
                                    –ü—Ä–∏—à–µ–ª: ${checkInTime}
                                    ${checkOutTime ? ` ‚Ä¢ –£—à–µ–ª: ${checkOutTime}` : ''}
                                    ${attendance.workHours ? ` ‚Ä¢ ${attendance.workHours.toFixed(1)} —á` : ''}
                                </div>
                            </div>
                        </div>
                        <div style="font-size: 12px; padding: 4px 12px; background: ${attendance.isPresent ? 'rgba(78, 205, 196, 0.1)' : 'rgba(255, 107, 107, 0.1)'}; color: ${attendance.isPresent ? 'var(--success)' : 'var(--danger)'}; border-radius: 20px; font-weight: 600;">
                            ${attendance.isPresent ? '–ù–∞ —Ä–∞–±–æ—Ç–µ' : '–£—à–µ–ª'}
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const presentCount = attendanceData.filter(a => a.isPresent).length;
            const totalCount = attendanceData.length;
            
            html += `
                <div style="margin-top: 16px; padding-top: 16px; border-top: 1px solid rgba(255, 255, 255, 0.05);">
                    <div style="display: flex; justify-content: space-between; align-items: center; font-size: 14px;">
                        <span style="color: var(--text-secondary);">–°–µ–π—á–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ:</span>
                        <span style="font-weight: 600; color: var(--success);">${presentCount} –∏–∑ ${totalCount}</span>
                    </div>
                </div>
            `;
            
            container.innerHTML = html;
        } else {
            container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>';
        }
    } catch (error) {
        console.error('Error loading attendance status:', error);
        container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>';
    }
}

async function loadAdminPanel() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        const employeesResponse = await fetch(`${API_URL}/api/employees`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (employeesResponse.ok) {
            const employees = await employeesResponse.json();
            const employeeFilter = document.getElementById('employeeFilter');
            
            // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º select
            employeeFilter.innerHTML = '<option value="all">–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</option>';
            employees.forEach(emp => {
                const option = document.createElement('option');
                option.value = emp.telegramId;
                option.textContent = emp.name;
                employeeFilter.appendChild(option);
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            document.getElementById('adminActiveEmployees').textContent = employees.length;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç—ã
        updateAdminPanel();
        
    } catch (error) {
        console.error('Error loading admin panel:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏', 'error');
    }
}

window.updateAdminPanel = async function() {
    const period = document.getElementById('periodFilter').value;
    const employeeId = document.getElementById('employeeFilter').value;
    const customDateRange = document.getElementById('customDateRange');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç
    if (period === 'custom') {
        customDateRange.style.display = 'flex';
    } else {
        customDateRange.style.display = 'none';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—ã
    let startDate, endDate;
    const today = new Date();
    
    switch(period) {
        case 'today':
            startDate = endDate = today.toISOString().split('T')[0];
            break;
        case 'week':
            const weekStart = new Date(today);
            weekStart.setDate(today.getDate() - today.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            startDate = weekStart.toISOString().split('T')[0];
            endDate = today.toISOString().split('T')[0];
            break;
        case 'month':
            const monthStart = new Date(today.getFullYear(), today.getMonth(), 1);
            startDate = monthStart.toISOString().split('T')[0];
            endDate = today.toISOString().split('T')[0];
            break;
        case 'custom':
            startDate = document.getElementById('startDate').value;
            endDate = document.getElementById('endDate').value;
            if (!startDate || !endDate) return;
            break;
    }
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç—ã
        const params = new URLSearchParams({
            startDate,
            endDate,
            employeeId: employeeId === 'all' ? '' : employeeId
        });
        
        const response = await fetch(`${API_URL}/api/admin/reports?${params}`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            document.getElementById('adminTotalReports').textContent = data.totalReports;
            document.getElementById('adminTodayReports').textContent = data.todayReports;
            document.getElementById('adminCompletedTasks').textContent = data.completedTasks;
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—á–µ—Ç—ã
            displayAdminReports(data.reports);
        }
        
    } catch (error) {
        console.error('Error updating admin panel:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
    }
}

function displayAdminReports(reports) {
    const container = document.getElementById('adminReportsList');
    
    if (reports.length === 0) {
        container.innerHTML = `
            <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                <p>–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>
            </div>
        `;
        return;
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –¥–∞—Ç–∞–º
    const groupedReports = {};
    reports.forEach(report => {
        const date = new Date(report.date).toLocaleDateString('ru-RU', {
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
        
        if (!groupedReports[date]) {
            groupedReports[date] = [];
        }
        groupedReports[date].push(report);
    });
    
    let html = '';
    Object.entries(groupedReports).forEach(([date, dayReports]) => {
        html += `
            <div style="margin-bottom: 24px;">
                <h4 style="color: var(--text-secondary); font-size: 14px; margin-bottom: 12px;">${date}</h4>
                <div style="display: flex; flex-direction: column; gap: 12px;">
        `;
        
        dayReports.forEach(report => {
            const time = new Date(report.timestamp).toLocaleTimeString('ru-RU', {
                hour: '2-digit',
                minute: '2-digit'
            });
            
            html += `
                <div style="background: var(--bg-card); border-radius: 12px; padding: 16px;">
                    <div style="display: flex; justify-content: space-between; align-items: start; margin-bottom: 8px;">
                        <div>
                            <h5 style="margin: 0; font-size: 16px; color: var(--text-primary);">${report.employeeName}</h5>
                            <p style="margin: 0; font-size: 12px; color: var(--text-secondary);">–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ${time}</p>
                        </div>
                        <span style="background: var(--success-light); color: var(--success); padding: 4px 8px; border-radius: 8px; font-size: 12px;">
                            ${report.status}
                        </span>
                    </div>
                    
                    <div style="margin-top: 12px;">
                        <p style="margin: 0 0 8px 0; font-size: 14px; color: var(--text-secondary);">–ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ:</p>
                        <p style="margin: 0; font-size: 14px; color: var(--text-primary); white-space: pre-wrap;">${report.whatDone}</p>
                    </div>
                    
                    ${report.problems && report.problems !== '–ù–µ—Ç' ? `
                        <div style="margin-top: 12px;">
                            <p style="margin: 0 0 8px 0; font-size: 14px; color: var(--text-secondary);">–ü—Ä–æ–±–ª–µ–º—ã:</p>
                            <p style="margin: 0; font-size: 14px; color: var(--warning); white-space: pre-wrap;">${report.problems}</p>
                        </div>
                    ` : ''}
                </div>
            `;
        });
        
        html += `
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
}

async function debugTasks() {
    try {
        console.log('Debug: Current user:', tg.initDataUnsafe.user);
        console.log('Debug: Init data:', tg.initData);
        
        const response = await fetch(`${API_URL}/api/debug/tasks`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const debug = await response.json();
            console.log('Debug info:', debug);
            
            tg.showAlert(
                `Debug Info:\n\n` +
                `Your ID: ${debug.currentUserId}\n` +
                `Total tasks in DB: ${debug.totalTasksInDB}\n` +
                `Your tasks: ${debug.userTasksFound}\n\n` +
                `Check console for details`
            );
        } else {
            const error = await response.text();
            console.error('Debug error:', error);
            tg.showAlert(`Debug Error: ${response.status}`);
        }
    } catch (error) {
        console.error('Debug error:', error);
        tg.showAlert('Debug error: ' + error.message);
    }
}

// –ü–æ–∫–∞–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
async function showEmployees() {
    showPage('employees');
    loadEmployees();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
async function loadEmployees() {
    const employeesList = document.getElementById('employeesList');
    if (!employeesList) {
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        createEmployeesPage();
        return;
    }
    
    employeesList.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p style="margin-top: 16px;">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...</p>
        </div>
    `;
    
    try {
        const response = await fetch(`${API_URL}/api/employees`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const employees = await response.json();
            displayEmployees(employees);
        }
    } catch (error) {
        employeesList.innerHTML = '<p style="text-align: center; color: var(--text-muted);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function displayEmployees(employees) {
    const employeesList = document.getElementById('employeesList');
    
    if (employees.length === 0) {
        employeesList.innerHTML = '<p style="text-align: center; color: var(--text-muted);">–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>';
        return;
    }
    
    employeesList.innerHTML = employees.map(emp => `
        <div class="action-card" onclick="createTaskForEmployee('${emp.telegramId}', '${emp.name}')">
            <div style="display: flex; align-items: center; gap: 16px;">
                <div style="font-size: 40px;">üë§</div>
                <div>
                    <h3 style="margin: 0; font-size: 18px;">${emp.name}</h3>
                    <p style="margin: 4px 0 0 0; color: var(--text-secondary);">${emp.position}</p>
                </div>
            </div>
        </div>
    `).join('');
}

// –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
function createTaskForEmployee(employeeId, employeeName) {
    showCreateTaskModal(employeeId, employeeName);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
function showCreateTaskModal(employeeId = null, employeeName = null) {
    const modal = document.getElementById('taskModal');
    if (!modal) {
        createTaskModal();
        return;
    }
    
    modal.style.display = 'flex';
    
    const select = document.getElementById('taskEmployee');
    
    // –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–±—è
    if (!window.isManager) {
        select.innerHTML = `<option value="${tg.initDataUnsafe.user.id}" selected>${currentUser.name} (–Ø)</option>`;
        select.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
        
        // –°–∫—Ä—ã–≤–∞–µ–º label –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ
        const formGroup = select.closest('.form-group');
        if (formGroup) {
            const label = formGroup.querySelector('label');
            if (label) {
                label.textContent = '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è)';
            }
        }
    } else {
        // –ú–µ–Ω–µ–¥–∂–µ—Ä - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        select.disabled = false;
        const formGroup = select.closest('.form-group');
        if (formGroup) {
            const label = formGroup.querySelector('label');
            if (label) {
                label.textContent = '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å';
            }
        }
        
        if (employeeId && employeeName) {
            select.innerHTML = `<option value="${employeeId}" selected>${employeeName}</option>`;
            loadEmployeesForSelect(employeeId);
        } else {
            loadEmployeesForSelect();
        }
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É - —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('taskDeadline').min = today;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
async function loadEmployeesForSelect(selectedId = null) {
    try {
        const response = await fetch(`${API_URL}/api/employees`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const employees = await response.json();
            const select = document.getElementById('taskEmployee');
            
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</option>' +
                employees.map(emp => 
                    `<option value="${emp.telegramId}" ${emp.telegramId == selectedId ? 'selected' : ''}>${emp.name}</option>`
                ).join('');
        }
    } catch (error) {
        console.error('Error loading employees:', error);
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeTaskModal() {
    const modal = document.getElementById('taskModal');
    if (modal) {
        modal.style.display = 'none';
        document.getElementById('taskForm').reset();
    }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
async function submitTask(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const task = {
        assigneeId: parseInt(formData.get('employee')),
        title: formData.get('title'),
        description: formData.get('description') || '',
        deadline: formData.get('deadline'),
        priority: formData.get('priority')
    };
    
    const submitBtn = event.target.querySelector('.submit-btn');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';
    submitBtn.disabled = true;
    
    try {
        const response = await fetch(`${API_URL}/api/tasks`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-Init-Data': tg.initData
            },
            body: JSON.stringify(task)
        });
        
        if (response.ok) {
            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }
            
            tg.showAlert('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ‚úÖ', () => {
                closeTaskModal();
                if (document.getElementById('tasks').classList.contains('active')) {
                    loadTasks();
                }
            });
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
        }
    } catch (error) {
        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

// –û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á–∏
window.openTaskDetail = async function(taskId) {
    console.log('Opening task detail for:', taskId);
    console.log('Current tasks:', currentTasks);
    
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–µ–º —Å–ø–∏—Å–∫–µ
    const task = currentTasks.find(t => t.id === taskId);
    if (!task) {
        console.error('Task not found:', taskId);
        console.error('Available task IDs:', currentTasks.map(t => t.id));
        return;
    }
    
    console.log('Found task:', task);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    showPage('taskDetail');
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
    displayTaskDetail(task);
}

// –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
function displayTaskDetail(task) {
    const content = document.querySelector('.task-detail-content');
    
    const statusClass = task.status === '–ù–æ–≤–∞—è' ? 'new' : 
                      task.status === '–í —Ä–∞–±–æ—Ç–µ' ? 'in-progress' : 'completed';
    
    const priorityText = task.priority === 'high' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' : 
                        task.priority === 'medium' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π';
    
    const canComplete = task.status !== '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' && currentTaskType === 'my';
    
    content.innerHTML = `
        <div class="task-detail-card">
            <div class="task-detail-header">
                <h1>${task.title}</h1>
                <span class="task-status ${statusClass}">${task.status}</span>
            </div>
            
            ${task.description ? `
                <div class="task-detail-section">
                    <h3>üìù –û–ø–∏—Å–∞–Ω–∏–µ</h3>
                    <p>${task.description}</p>
                </div>
            ` : ''}
            
            <div class="task-detail-section">
                <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <div class="task-detail-info">
                    <div class="info-row">
                        <span class="info-label">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</span>
                        <span class="info-value">${priorityText}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">–°—Ä–æ–∫:</span>
                        <span class="info-value">üìÖ ${formatDate(task.deadline)}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">–°–æ–∑–¥–∞–Ω–∞:</span>
                        <span class="info-value">${formatDate(task.createdDate)}</span>
                    </div>
                    <div class="info-row">
                        <span class="info-label">–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫:</span>
                        <span class="info-value">üë§ ${task.creatorName === currentUser?.name ? '–Ø' : (task.creatorName || '–°–∏—Å—Ç–µ–º–∞')}</span>
                    </div>
                    ${currentTaskType === 'created' ? `
                        <div class="info-row">
                            <span class="info-label">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</span>
                            <span class="info-value">üë§ ${task.assigneeName || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'}</span>
                        </div>
                    ` : ''}
                </div>
            </div>
            
            ${canComplete ? `
                <div class="task-detail-actions">
                    ${task.status === '–ù–æ–≤–∞—è' ? `
                        <button class="action-btn start-btn" onclick="updateTaskStatus('${task.id}', '–í —Ä–∞–±–æ—Ç–µ')">
                            üöÄ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É
                        </button>
                    ` : ''}
                    <button class="action-btn complete-btn" onclick="updateTaskStatus('${task.id}', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞')">
                        ‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
                    </button>
                </div>
            ` : ''}
            
            ${window.isManager && currentTaskType === 'created' ? `
                <div class="task-detail-actions" style="margin-top: 12px;">
                    <button class="action-btn edit-btn" onclick="editTask('${task.id}')">
                        ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
                    </button>
                </div>
            ` : ''}
            
            ${task.status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' ? `
                <div class="task-completed-badge">
                    ‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
                </div>
            ` : ''}
        </div>
    `;
}

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
window.updateTaskStatus = async function(taskId, newStatus) {
    try {
        if (tg.HapticFeedback) {
            tg.HapticFeedback.impactOccurred('medium');
        }
        
        const response = await fetch(`${API_URL}/api/tasks/${taskId}/status`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-Init-Data': tg.initData
            },
            body: JSON.stringify({ status: newStatus })
        });
        
        if (response.ok) {
            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }
            
            const message = newStatus === '–í —Ä–∞–±–æ—Ç–µ' ? '–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!' : '–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! üéâ';
            
            tg.showAlert(message, () => {
                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–ø–∏—Å–∫–µ
                const task = currentTasks.find(t => t.id === taskId);
                if (task) {
                    task.status = newStatus;
                    displayTaskDetail(task);
                }
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
                loadTasks();
            });
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    }
}

// –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
window.editTask = async function(taskId) {
    const task = currentTasks.find(t => t.id === taskId);
    if (!task) {
        console.error('Task not found for editing:', taskId);
        return;
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏
    document.getElementById('editTaskId').value = task.id;
    document.getElementById('editTaskTitle').value = task.title;
    document.getElementById('editTaskDescription').value = task.description || '';
    document.getElementById('editTaskPriority').value = task.priority || 'medium';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É
    if (task.deadline) {
        const date = new Date(task.deadline);
        document.getElementById('editTaskDeadline').value = date.toISOString().split('T')[0];
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    await loadEmployeesForEditSelect(task.assigneeId);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    document.getElementById('editTaskModal').style.display = 'flex';
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function loadEmployeesForEditSelect(selectedId = null) {
    try {
        const response = await fetch(`${API_URL}/api/employees`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const employees = await response.json();
            const select = document.getElementById('editTaskEmployee');
            
            select.innerHTML = employees.map(emp => 
                `<option value="${emp.telegramId}" ${emp.telegramId == selectedId ? 'selected' : ''}>${emp.name}</option>`
            ).join('');
        }
    } catch (error) {
        console.error('Error loading employees for edit:', error);
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.closeEditTaskModal = function() {
    document.getElementById('editTaskModal').style.display = 'none';
    document.getElementById('editTaskForm').reset();
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
window.submitEditTask = async function(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const taskId = formData.get('taskId');
    const updatedTask = {
        title: formData.get('title'),
        description: formData.get('description') || '',
        deadline: formData.get('deadline'),
        priority: formData.get('priority'),
        assigneeId: parseInt(formData.get('employee'))
    };
    
    const submitBtn = event.target.querySelector('.submit-btn');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
    submitBtn.disabled = true;
    
    try {
        const response = await fetch(`${API_URL}/api/tasks/${taskId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-Init-Data': tg.initData
            },
            body: JSON.stringify(updatedTask)
        });
        
        if (response.ok) {
            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }
            
            tg.showAlert('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! ‚úÖ', () => {
                closeEditTaskModal();
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
                loadTasks();
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
                showPage('tasks');
            });
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        }
    } catch (error) {
        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª–∞–¥–∫–∏ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
async function loadAttendanceTab() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞
        const employeesResponse = await fetch(`${API_URL}/api/employees`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (employeesResponse.ok) {
            const employees = await employeesResponse.json();
            const employeeFilter = document.getElementById('attendanceEmployeeFilter');
            
            employeeFilter.innerHTML = '<option value="all">–í—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</option>' +
                employees.map(emp => 
                    `<option value="${emp.telegramId}">${emp.name}</option>`
                ).join('');
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
        const periodFilter = document.getElementById('attendancePeriodFilter');
        const customDateRange = document.getElementById('attendanceCustomDateRange');
        
        periodFilter.addEventListener('change', (e) => {
            customDateRange.style.display = e.target.value === 'custom' ? 'flex' : 'none';
        });
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        updateAttendanceHistory();
        
    } catch (error) {
        console.error('Error loading attendance tab:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏', 'error');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
window.updateAttendanceHistory = async function() {
    const container = document.getElementById('attendanceHistoryList');
    container.innerHTML = '<div class="loading"><div class="spinner"></div><p style="margin-top: 16px;">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</p></div>';
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
        const period = document.getElementById('attendancePeriodFilter').value;
        const employeeId = document.getElementById('attendanceEmployeeFilter').value;
        
        let startDate, endDate;
        const today = new Date();
        
        switch (period) {
            case 'today':
                startDate = endDate = today.toISOString().split('T')[0];
                break;
            case 'week':
                const weekStart = new Date(today);
                weekStart.setDate(today.getDate() - today.getDay() + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                startDate = weekStart.toISOString().split('T')[0];
                endDate = today.toISOString().split('T')[0];
                break;
            case 'month':
                startDate = new Date(today.getFullYear(), today.getMonth(), 1).toISOString().split('T')[0];
                endDate = today.toISOString().split('T')[0];
                break;
            case 'custom':
                startDate = document.getElementById('attendanceStartDate').value;
                endDate = document.getElementById('attendanceEndDate').value;
                if (!startDate || !endDate) {
                    container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã</p>';
                    return;
                }
                break;
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        const params = new URLSearchParams({
            startDate: startDate,
            endDate: endDate
        });
        
        if (employeeId !== 'all') {
            params.append('employeeId', employeeId);
        }
        
        const response = await fetch(`${API_URL}/api/admin/attendance/history?${params}`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const attendanceData = await response.json();
            
            if (attendanceData.length === 0) {
                container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥</p>';
                updateAttendanceStats([]); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                return;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            updateAttendanceStats(attendanceData);
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            const groupedByDate = {};
            attendanceData.forEach(record => {
                const date = record.date;
                if (!groupedByDate[date]) {
                    groupedByDate[date] = [];
                }
                groupedByDate[date].push(record);
            });
            
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            const sortedDates = Object.keys(groupedByDate).sort((a, b) => b.localeCompare(a));
            
            let html = '<div style="display: flex; flex-direction: column; gap: 20px;">';
            
            sortedDates.forEach(date => {
                const dateRecords = groupedByDate[date];
                const dateObj = new Date(date);
                const dateStr = dateObj.toLocaleDateString('ru-RU', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
                
                html += `
                    <div>
                        <h4 style="font-size: 16px; font-weight: 600; margin-bottom: 12px; color: var(--text-secondary);">
                            ${dateStr}
                        </h4>
                        <div style="display: flex; flex-direction: column; gap: 8px;">
                `;
                
                dateRecords.forEach(record => {
                    const checkInTime = record.checkIn ? 
                        new Date(record.checkIn).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : '-';
                    const checkOutTime = record.checkOut ? 
                        new Date(record.checkOut).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' }) : '-';
                    const workHours = record.workHours ? `${record.workHours.toFixed(1)} —á` : '-';
                    
                    html += `
                        <div style="display: flex; align-items: center; justify-content: space-between; padding: 12px; background: var(--bg-card); border-radius: 12px; border: 1px solid rgba(255, 255, 255, 0.05);">
                            <div style="flex: 1;">
                                <div style="font-weight: 600; color: var(--text-primary);">${record.employeeName}</div>
                                <div style="font-size: 12px; color: var(--text-secondary); margin-top: 4px;">
                                    –ü—Ä–∏—à–µ–ª: ${checkInTime} ‚Ä¢ 
                                    –£—à–µ–ª: ${checkOutTime} ‚Ä¢ 
                                    –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${workHours}
                                    ${record.late ? ' ‚Ä¢ <span style="color: var(--warning);">–û–ø–æ–∑–¥–∞–Ω–∏–µ</span>' : ''}
                                </div>
                            </div>
                            <div style="display: flex; align-items: center; gap: 8px;">
                                ${record.late ? '<span style="font-size: 20px;">‚ö†Ô∏è</span>' : ''}
                                <div style="font-size: 12px; padding: 4px 12px; background: ${record.status === 'Completed' ? 'rgba(78, 205, 196, 0.1)' : 'rgba(255, 217, 61, 0.1)'}; color: ${record.status === 'Completed' ? 'var(--success)' : 'var(--warning)'}; border-radius: 20px; font-weight: 600;">
                                    ${record.status === 'Completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                                </div>
                            </div>
                        </div>
                    `;
                });
                
                html += '</div></div>';
            });
            
            html += '</div>';
            container.innerHTML = html;
            
        } else {
            container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>';
        }
        
    } catch (error) {
        console.error('Error loading attendance history:', error);
        container.innerHTML = '<p style="text-align: center; color: var(--text-secondary);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>';
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
function updateAttendanceStats(attendanceData) {
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const totalDays = new Set(attendanceData.map(r => r.date)).size;
    const totalHours = attendanceData.reduce((sum, r) => sum + (r.workHours || 0), 0);
    const lateCount = attendanceData.filter(r => r.late).length;
    const avgHours = totalDays > 0 ? (totalHours / totalDays).toFixed(1) : 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    document.getElementById('attendanceTotalDays').textContent = totalDays;
    document.getElementById('attendanceTotalHours').textContent = totalHours.toFixed(1);
    document.getElementById('attendanceLateCount').textContent = lateCount;
    document.getElementById('attendanceAvgHours').textContent = avgHours;
}