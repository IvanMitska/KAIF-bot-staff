const notionService = require('../../services/notionService');
const userService = require('../../services/userService');
const keyboards = require('../keyboards/inline');

module.exports = (bot) => {
  // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥
  // –í–µ—Å—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
  
  const ADMIN_IDS = [385436658, 1734337242]; // Boris –∏ Ivan
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
  bot.onText(/\/check_task_statuses/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (!ADMIN_IDS.includes(userId)) return;
    
    try {
      const { getAllTasks } = require('../../services/notionService');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞
      const allTasks = await getAllTasks();
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const statusGroups = {};
      allTasks.forEach(task => {
        const status = task.status || '–ë–µ–∑ —Å—Ç–∞—Ç—É—Å–∞';
        if (!statusGroups[status]) {
          statusGroups[status] = 0;
        }
        statusGroups[status]++;
      });
      
      let message = 'üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n\n';
      message += `–í—Å–µ–≥–æ –∑–∞–¥–∞—á: ${allTasks.length}\n\n`;
      
      Object.entries(statusGroups).forEach(([status, count]) => {
        message += `${status}: ${count} –∑–∞–¥–∞—á\n`;
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
      message += '\n*–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤:*\n';
      const statuses = ['–ù–æ–≤–∞—è', '–í —Ä–∞–±–æ—Ç–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'];
      
      for (const status of statuses) {
        const tasksWithStatus = await getAllTasks(status);
        message += `"${status}": ${tasksWithStatus.length} –∑–∞–¥–∞—á\n`;
      }
      
      await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('Check task statuses error:', error);
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });
  
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
  bot.onText(/\/check_db/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    if (!ADMIN_IDS.includes(userId)) return;
    
    try {
      const connected = await notionService.testTasksDatabase();
      if (connected) {
        await bot.sendMessage(chatId, '‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
      } else {
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á');
      }
    } catch (error) {
      console.error('Check DB error:', error);
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  });
};