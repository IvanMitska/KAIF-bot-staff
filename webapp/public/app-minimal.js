// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π app.js –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –º–æ–¥—É–ª–∏ –≤ –ø–∞–ø–∫–µ modules/

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App (–¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞)
const tg = window.Telegram.WebApp;

// API URL
const API_URL = window.location.origin;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
let currentUser = null;
let currentFilter = 'all';
let currentTaskType = 'my';
let currentTasks = [];
let isSubmittingTask = false;

// –§—É–Ω–∫—Ü–∏—è getApiUrl –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞
function getApiUrl(endpoint) {
    const urlParams = new URLSearchParams(window.location.search);
    const isTestMode = urlParams.has('test') || window.location.search.includes('test=');

    if (!tg.initData || isTestMode) {
        const separator = endpoint.includes('?') ? '&' : '?';
        return `${API_URL}${endpoint}${separator}test=1`;
    }
    return `${API_URL}${endpoint}`;
}

// –§—É–Ω–∫—Ü–∏—è showNotification –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞
function showNotification(message, type = 'info') {
    console.log(`Notification [${type}]:`, message);
    if (tg.showAlert) {
        tg.showAlert(message);
    } else {
        alert(message);
    }
}

// –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–ø–µ—Ä—å –≤ –º–æ–¥—É–ª—è—Ö
// –û–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–æ–¥—É–ª—è–º–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

function showPage(pageId) {
    console.log('showPage –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º');
}

function showTasks() {
    console.log('showTasks –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º');
}

function showEmployees() {
    console.log('showEmployees –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º');
}

function showReportForm() {
    console.log('showReportForm –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º');
}

function checkIn() {
    console.log('checkIn –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º');
}

function checkOut() {
    console.log('checkOut –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º');
}

function showCreateTaskModal(employeeId, employeeName) {
    console.log('showCreateTaskModal –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º');
}

function closeTaskModal() {
    console.log('closeTaskModal –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º');
}

function submitTask(event) {
    console.log('submitTask –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–æ–¥—É–ª–µ–º');
}

// –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç—É—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
function animateNumber(element, endValue, options = {}) {
    const defaults = {
        duration: 500,
        startValue: null,
        addPulse: false,
        easing: 'easeOut'
    };

    const settings = { ...defaults, ...options };
    const startValue = settings.startValue ?? (parseInt(element.textContent) || 0);

    if (startValue === endValue) return;

    const startTime = performance.now();

    function update(currentTime) {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / settings.duration, 1);

        let eased = progress;
        if (settings.easing === 'easeOut') {
            eased = 1 - Math.pow(1 - progress, 3);
        }

        const currentValue = Math.round(startValue + (endValue - startValue) * eased);
        element.textContent = currentValue;

        if (progress < 1) {
            requestAnimationFrame(update);
        } else {
            element.textContent = endValue;

            if (settings.addPulse && endValue > startValue) {
                element.style.transform = 'scale(1.2)';
                element.style.color = 'var(--primary)';
                setTimeout(() => {
                    element.style.transform = '';
                    element.style.color = '';
                }, 300);
            }
        }
    }

    requestAnimationFrame(update);
}

// –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
function animateCounterUpdate(element, newValue) {
    animateNumber(element, newValue, { addPulse: true });
}

function animateNumberChange(element, startValue, endValue, duration) {
    animateNumber(element, endValue, { startValue, duration });
}

console.log('üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π app.js –∑–∞–≥—Ä—É–∂–µ–Ω. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ –º–æ–¥—É–ª—è—Ö.');