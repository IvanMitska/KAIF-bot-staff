const { getTasksByAssignee, getAllTasks, updateTaskStatus, getUser } = require('../../services/notionService');
const { taskKeyboards } = require('../keyboards/taskKeyboards');
const { userStates } = require('../state');
const moment = require('moment-timezone');

const MANAGER_IDS = [385436658, 1734337242]; // –ë–æ—Ä–∏—Å –∏ –ò–≤–∞–Ω

async function handleMyTasks(bot, callbackQuery, statusFilter = null) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  try {
    console.log('Employee viewing tasks - userId:', userId, 'statusFilter:', statusFilter);
    const tasks = await getTasksByAssignee(userId, statusFilter);
    
    if (tasks.length === 0) {
      const statusText = statusFilter ? ` —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${statusFilter}"` : '';
      await bot.editMessageText(
        `üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á${statusText}`,
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          reply_markup: taskKeyboards.employeeMenu()
        }
      );
      return;
    }
    
    const tasksList = formatTasksList(tasks);
    await bot.editMessageText(
      `üìã <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏ (${tasks.length})</b>\n\n${tasksList}`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'HTML',
        reply_markup: createTasksListKeyboard(tasks)
      }
    );
  } catch (error) {
    console.error('Error getting tasks for employee:', error);
    console.error('User ID:', userId);
    console.error('Status filter:', statusFilter);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
  }
}

async function handleAllTasks(bot, callbackQuery, statusFilter = null) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  console.log('handleAllTasks called with callback data:', callbackQuery.data);
  
  if (!MANAGER_IDS.includes(userId)) {
    await bot.sendMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏');
    return;
  }
  
  try {
    const statusMap = {
      'completed_tasks': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞',
      'in_progress_tasks': '–í —Ä–∞–±–æ—Ç–µ',
      'new_tasks': '–ù–æ–≤–∞—è'
    };
    
    const status = statusMap[callbackQuery.data] || null;
    console.log('Manager viewing tasks - callback data:', callbackQuery.data);
    console.log('Mapped status:', status);
    
    const tasks = await getAllTasks(status);
    
    if (tasks.length === 0) {
      const statusText = status ? ` —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}"` : '';
      await bot.editMessageText(
        `üìã –ù–µ—Ç –∑–∞–¥–∞—á${statusText}`,
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          reply_markup: taskKeyboards.managerMenu()
        }
      );
      return;
    }
    
    const title = status ? `–ó–∞–¥–∞—á–∏: ${status}` : '–í—Å–µ –∑–∞–¥–∞—á–∏';
    const tasksList = formatManagerTasksList(tasks);
    
    await bot.editMessageText(
      `üìã <b>${title} (${tasks.length})</b>\n\n${tasksList}`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'HTML',
        reply_markup: taskKeyboards.managerMenu()
      }
    );
  } catch (error) {
    console.error('Error getting all tasks for manager:', error);
    console.error('Manager ID:', userId);
    console.error('Status filter:', status);
    console.error('Callback data:', callbackQuery.data);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
  }
}

async function handleTaskDetails(bot, callbackQuery, taskId) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  try {
    const isManager = MANAGER_IDS.includes(userId);
    const tasks = isManager ? await getAllTasks() : await getTasksByAssignee(userId);
    const task = tasks.find(t => t.id === taskId);
    
    if (!task) {
      await bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    
    const details = formatTaskDetails(task);
    const canModify = !isManager && task.status !== '–í—ã–ø–æ–ª–Ω–µ–Ω–∞';
    
    await bot.editMessageText(
      details,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'HTML',
        reply_markup: taskKeyboards.taskActions(taskId, canModify)
      }
    );
  } catch (error) {
    console.error('Error getting task details:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏');
  }
}

async function handleTaskStatusUpdate(bot, callbackQuery, action, taskId) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  
  try {
    const statusMap = {
      'start_task': '–í —Ä–∞–±–æ—Ç–µ',
      'complete_task': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
    };
    
    const newStatus = statusMap[action];
    if (!newStatus) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const tasks = await getTasksByAssignee(userId);
    const task = tasks.find(t => t.id === taskId);
    
    if (!task) {
      await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ');
      return;
    }
    
    if (action === 'complete_task') {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
      userStates[userId] = {
        state: 'completing_task',
        taskId: taskId,
        taskTitle: task.title
      };
      
      await bot.editMessageText(
        'üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è):',
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id
        }
      );
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    console.log(`Updating task status: ${taskId} -> ${newStatus}`);
    await updateTaskStatus(taskId, newStatus);
    
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: `‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${newStatus}"`,
      show_alert: true
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏
    await handleTaskDetails(bot, callbackQuery, taskId);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    if (newStatus === '–í —Ä–∞–±–æ—Ç–µ') {
      const user = await getUser(userId);
      console.log('Notifying managers about task start:', task.title);
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      for (const managerId of MANAGER_IDS) {
        if (managerId !== userId) { // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
          try {
            await bot.sendMessage(
              managerId,
              `üîî ${user.name} –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –∑–∞–¥–∞—á—É "${task.title}"`
            );
            console.log(`Notified manager ${managerId} about task start`);
          } catch (notifyError) {
            console.error(`Failed to notify manager ${managerId}:`, notifyError);
          }
        }
      }
    }
  } catch (error) {
    console.error('Error updating task status:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
  }
}

async function handleTaskCompletion(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  const state = userStates[userId];
  if (!state || state.state !== 'completing_task') return false;
  
  try {
    const comment = text === '-' ? null : text;
    console.log('Completing task:', { taskId: state.taskId, status: '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', comment });
    
    await updateTaskStatus(state.taskId, '–í—ã–ø–æ–ª–Ω–µ–Ω–∞', comment);
    
    console.log('Task completion successful, sending confirmation...');
    
    await bot.sendMessage(
      chatId,
      '‚úÖ –ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!',
      { reply_markup: taskKeyboards.employeeMenu() }
    );
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const user = await getUser(userId);
    const notificationText = `üéâ ${user.name} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É "${state.taskTitle}"${comment ? `\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}` : ''}`;
    
    console.log('Sending notifications to managers:', MANAGER_IDS);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    for (const managerId of MANAGER_IDS) {
      try {
        await bot.sendMessage(managerId, notificationText);
        console.log(`Notification sent to manager ${managerId}`);
      } catch (notifyError) {
        console.error(`Failed to notify manager ${managerId}:`, notifyError);
      }
    }
    
    delete userStates[userId];
    return true;
  } catch (error) {
    console.error('Error completing task:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    delete userStates[userId];
    return true;
  }
}

function formatTasksList(tasks) {
  return tasks.map(task => {
    const emoji = getStatusEmoji(task.status);
    const priority = getPriorityEmoji(task.priority);
    const deadline = task.deadline ? ` (–¥–æ ${formatDate(task.deadline)})` : '';
    return `${emoji} ${priority} <b>${task.title}</b>${deadline}`;
  }).join('\n');
}

function formatManagerTasksList(tasks) {
  return tasks.map(task => {
    const emoji = getStatusEmoji(task.status);
    const priority = getPriorityEmoji(task.priority);
    const deadline = task.deadline ? ` (–¥–æ ${formatDate(task.deadline)})` : '';
    return `${emoji} ${priority} <b>${task.title}</b>\n   üë§ ${task.assigneeName}${deadline}`;
  }).join('\n\n');
}

function formatTaskDetails(task) {
  const emoji = getStatusEmoji(task.status);
  const priority = getPriorityEmoji(task.priority);
  
  return `${emoji} <b>–ó–∞–¥–∞—á–∞: ${task.title}</b>

<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${task.description}
<b>–°—Ç–∞—Ç—É—Å:</b> ${task.status}
<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priority} ${task.priority}
<b>–ü–æ—Å—Ç–∞–Ω–æ–≤—â–∏–∫:</b> ${task.creatorName}
<b>–°–æ–∑–¥–∞–Ω–∞:</b> ${formatDate(task.createdDate)}
${task.deadline ? `<b>–°—Ä–æ–∫:</b> ${formatDate(task.deadline)}` : ''}`;
}

function createTasksListKeyboard(tasks) {
  const buttons = tasks.map(task => [{
    text: `${getStatusEmoji(task.status)} ${task.title}`,
    callback_data: `task_${task.id}`
  }]);
  
  buttons.push([{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_tasks' }]);
  
  return { inline_keyboard: buttons };
}

function getStatusEmoji(status) {
  const emojis = {
    '–ù–æ–≤–∞—è': 'üîµ',
    '–í —Ä–∞–±–æ—Ç–µ': 'üü°',
    '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': '‚úÖ',
    '–û—Ç–º–µ–Ω–µ–Ω–∞': '‚ùå'
  };
  return emojis[status] || '‚ö™';
}

function getPriorityEmoji(priority) {
  const emojis = {
    '–í—ã—Å–æ–∫–∏–π': 'üî¥',
    '–°—Ä–µ–¥–Ω–∏–π': 'üü°', 
    '–ù–∏–∑–∫–∏–π': 'üü¢'
  };
  return emojis[priority] || '‚ö™';
}

function formatDate(isoDate) {
  return moment(isoDate).tz('Asia/Bangkok').format('DD.MM.YYYY');
}

module.exports = {
  handleMyTasks,
  handleAllTasks,
  handleTaskDetails,
  handleTaskStatusUpdate,
  handleTaskCompletion
};