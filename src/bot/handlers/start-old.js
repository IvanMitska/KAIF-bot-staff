const userService = require('../../services/userService');
const keyboards = require('../keyboards/inline');

module.exports = (bot) => {
  console.log('Registering /start handler');
  
  bot.onText(/\/start/, async (msg) => {
    console.log('Start command received from:', msg.from.username || msg.from.id);
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username || '';
    
    try {
      console.log('Checking for existing user with ID:', userId);
      const existingUser = await userService.getUserByTelegramId(userId);
      console.log('Existing user:', existingUser);
      
      if (existingUser) {
        console.log('Sending welcome back message');
        await bot.sendMessage(chatId, `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${existingUser.name}! üëã`, {
          reply_markup: keyboards.mainMenu()
        });
      } else {
        console.log('New user, sending registration prompt to chat:', chatId);
        await bot.sendMessage(chatId, 
          '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n' +
          '–Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n' +
          '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n' +
          '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?'
        ).then(() => {
          console.log('Registration prompt sent successfully');
        }).catch(err => {
          console.error('Failed to send registration prompt:', err);
        });
        
        bot.once('message', async (nameMsg) => {
          if (nameMsg.chat.id !== chatId) return;
          if (nameMsg.text && nameMsg.text.startsWith('/')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
          
          const name = nameMsg.text;
          console.log('User provided name:', name);
          await bot.sendMessage(chatId, `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${name}!\n\n–ö–∞–∫–∞—è —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å?`);
          
          bot.once('message', async (positionMsg) => {
            if (positionMsg.chat.id !== chatId) return;
            if (positionMsg.text && positionMsg.text.startsWith('/')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
            
            const position = positionMsg.text;
            
            try {
              await userService.createUser({
                telegramId: userId,
                username: username,
                name: name,
                position: position
              });
              
              bot.sendMessage(chatId, 
                `–û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ‚úÖ\n\n` +
                `–ò–º—è: ${name}\n` +
                `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${position}\n\n` +
                `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.\n` +
                `–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± —ç—Ç–æ–º.`,
                {
                  reply_markup: keyboards.mainMenu()
                }
              );
            } catch (error) {
              console.error('Registration error:', error);
              bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start');
            }
          });
        });
      }
    } catch (error) {
      console.error('Start command error:', error);
      console.error('Error details:', error.message);
      console.error('Stack trace:', error.stack);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  });
};