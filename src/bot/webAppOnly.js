const TelegramBot = require('node-telegram-bot-api');
const userService = require('../services/userService');
const security = require('../utils/security');

module.exports = (bot) => {
  console.log('üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web App Only —Ä–µ–∂–∏–º–∞');
  
  // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!security.isUserAuthorized(userId)) {
      await bot.sendMessage(chatId, 
        'üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n\n' +
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'
      );
      return;
    }
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º URL Web App
      let webAppUrl = process.env.WEBAPP_URL;
      
      if (!webAppUrl && process.env.RAILWAY_STATIC_URL) {
        webAppUrl = `https://${process.env.RAILWAY_STATIC_URL}/webapp/public`;
      } else if (!webAppUrl && process.env.RAILWAY_PUBLIC_DOMAIN) {
        webAppUrl = `https://${process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public`;
      } else if (!webAppUrl) {
        webAppUrl = 'http://localhost:3001';
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const existingUser = await userService.getUserByTelegramId(userId);
      
      const welcomeText = existingUser 
        ? `–ü—Ä–∏–≤–µ—Ç, ${existingUser.name}! üëã\n\n–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:`
        : `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É Web App
      await bot.sendMessage(chatId, welcomeText, {
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å KAIF App',
              web_app: { url: webAppUrl }
            }
          ]]
        }
      });
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
      await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  bot.on('message', async (msg) => {
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
    if (msg.text && msg.text.startsWith('/start')) return;
    
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!security.isUserAuthorized(userId)) return;
    
    // –ü–æ–ª—É—á–∞–µ–º URL Web App
    let webAppUrl = process.env.WEBAPP_URL;
    
    if (!webAppUrl && process.env.RAILWAY_STATIC_URL) {
      webAppUrl = `https://${process.env.RAILWAY_STATIC_URL}/webapp/public`;
    } else if (!webAppUrl && process.env.RAILWAY_PUBLIC_DOMAIN) {
      webAppUrl = `https://${process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public`;
    } else if (!webAppUrl) {
      webAppUrl = 'http://localhost:3001';
    }
    
    // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É Web App
    await bot.sendMessage(chatId, 
      '–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:', 
      {
        reply_markup: {
          inline_keyboard: [[
            {
              text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å KAIF App',
              web_app: { url: webAppUrl }
            }
          ]]
        }
      }
    );
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–∞–∂–º–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏)
  bot.on('callback_query', async (callbackQuery) => {
    await bot.answerCallbackQuery(callbackQuery.id, {
      text: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web App –¥–ª—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
      show_alert: true
    });
  });
};