// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
const tg = window.Telegram.WebApp;
tg.ready();
tg.expand();

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#0F0F14');
document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#FFFFFF');

// API URL
const API_URL = window.location.origin;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentUser = null;
let currentFilter = 'all';
let lastNewTasksCount = 0;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    if (tg.initDataUnsafe.user) {
        document.getElementById('userName').textContent = tg.initDataUnsafe.user.first_name;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await loadProfile();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç—á–µ—Ç–∞
    await checkReportStatus();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
    await loadTasksCount();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    setCurrentDate();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –æ—Ç—á–µ—Ç–∞
    document.getElementById('reportForm').addEventListener('submit', submitReport);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(async () => {
        await loadTasksCount();
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–¥–∞—á, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        if (document.getElementById('tasks').classList.contains('active')) {
            loadTasks();
        }
    }, 30000);
});

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
function showPage(pageId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    document.getElementById(pageId).classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButtons = document.querySelectorAll('.nav-btn');
    const pageIndex = ['home', 'report', 'tasks', 'stats', 'profile'].indexOf(pageId);
    if (pageIndex !== -1 && navButtons[pageIndex]) {
        navButtons[pageIndex].classList.add('active');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    switch(pageId) {
        case 'tasks':
            loadTasks();
            break;
        case 'stats':
            loadStats();
            break;
        case 'profile':
            loadFullProfile();
            break;
    }
    
    // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function loadProfile() {
    try {
        const response = await fetch(`${API_URL}/api/profile`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            currentUser = await response.json();
            
            if (currentUser && !currentUser.needsRegistration) {
                document.getElementById('userName').textContent = currentUser.name.split(' ')[0];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
                const MANAGER_IDS = [385436658, 1734337242]; // Boris, Ivan
                if (MANAGER_IDS.includes(tg.initDataUnsafe.user?.id)) {
                    document.getElementById('managerSection')?.style.setProperty('display', 'block');
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
                    const createTaskBtn = document.getElementById('createTaskBtn');
                    if (createTaskBtn) {
                        createTaskBtn.style.display = 'inline-flex';
                    }
                }
            }
        }
    } catch (error) {
        console.error('Error loading profile:', error);
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç—á–µ—Ç–∞
async function checkReportStatus() {
    try {
        const response = await fetch(`${API_URL}/api/reports/today-status`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const data = await response.json();
            const statusItem = document.getElementById('reportStatusItem');
            
            if (data.reportSent) {
                statusItem.classList.remove('status-warning');
                statusItem.classList.add('status-success');
                statusItem.innerHTML = `
                    <span class="status-icon">‚úÖ</span>
                    <span class="status-text">–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</span>
                `;
            }
        }
    } catch (error) {
        console.error('Error checking report status:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
async function loadTasksCount() {
    try {
        const response = await fetch(`${API_URL}/api/tasks/my`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const tasks = await response.json();
            const activeTasks = tasks.filter(t => t.status !== '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length;
            const newTasks = tasks.filter(t => t.status === '–ù–æ–≤–∞—è').length;
            
            document.getElementById('activeTasksCount').textContent = activeTasks;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–π–¥–∂ —Å –Ω–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
            updateTaskBadge(newTasks);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            if (newTasks > lastNewTasksCount) {
                // –í–∏–±—Ä–∞—Ü–∏—è –∏ –∑–≤—É–∫ –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
                if (tg.HapticFeedback) {
                    tg.HapticFeedback.notificationOccurred('success');
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if (newTasks - lastNewTasksCount === 1) {
                    tg.showAlert('–£ –≤–∞—Å –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞! üìã');
                } else {
                    tg.showAlert(`–£ –≤–∞—Å ${newTasks - lastNewTasksCount} –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á! üìã`);
                }
            }
            
            lastNewTasksCount = newTasks;
        }
    } catch (error) {
        console.error('Error loading tasks count:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–π–¥–∂–∞ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
function updateTaskBadge(count) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –∫–Ω–æ–ø–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const taskNavBtn = document.querySelector('.nav-btn[onclick*="tasks"]');
    if (taskNavBtn) {
        let badge = taskNavBtn.querySelector('.nav-badge');
        if (count > 0) {
            if (!badge) {
                badge = document.createElement('span');
                badge.className = 'nav-badge';
                taskNavBtn.appendChild(badge);
            }
            badge.textContent = count;
            badge.style.display = 'block';
        } else if (badge) {
            badge.style.display = 'none';
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–µ–π–¥–∂ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–¥–∞—á
    const taskCard = document.querySelector('.action-card[onclick*="tasks"]');
    if (taskCard) {
        let badge = taskCard.querySelector('.card-badge');
        if (count > 0) {
            if (!badge) {
                badge = document.createElement('span');
                badge.className = 'card-badge';
                badge.style.cssText = 'position: absolute; top: 20px; right: 20px; background: var(--danger); color: white; border-radius: 12px; padding: 4px 8px; font-size: 12px; font-weight: 600;';
                taskCard.style.position = 'relative';
                taskCard.appendChild(badge);
            }
            badge.textContent = `${count} ${count === 1 ? '–Ω–æ–≤–∞—è' : '–Ω–æ–≤—ã—Ö'}`;
        } else if (badge) {
            badge.remove();
        }
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞
async function submitReport(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const report = {
        whatDone: formData.get('whatDone'),
        problems: formData.get('problems') || '–ù–µ—Ç'
    };
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    const submitBtn = event.target.querySelector('.submit-btn');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    submitBtn.disabled = true;
    
    try {
        const response = await fetch(`${API_URL}/api/reports`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-Init-Data': tg.initData
            },
            body: JSON.stringify(report)
        });
        
        if (response.ok) {
            // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }
            
            tg.showAlert('–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! ‚úÖ', () => {
                event.target.reset();
                showPage('home');
                checkReportStatus();
            });
        } else {
            throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
        }
    } catch (error) {
        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
async function loadTasks() {
    const tasksList = document.getElementById('tasksList');
    tasksList.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p style="margin-top: 16px;">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</p>
        </div>
    `;
    
    try {
        const response = await fetch(`${API_URL}/api/tasks/my`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const tasks = await response.json();
            displayTasks(tasks);
            updateTaskCounts(tasks);
        }
    } catch (error) {
        tasksList.innerHTML = '<p style="text-align: center; color: var(--text-muted);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
function displayTasks(tasks) {
    const tasksList = document.getElementById('tasksList');
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
    let filteredTasks = tasks;
    if (currentFilter !== 'all') {
        const statusMap = {
            'new': '–ù–æ–≤–∞—è',
            'in-progress': '–í —Ä–∞–±–æ—Ç–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
        };
        filteredTasks = tasks.filter(task => task.status === statusMap[currentFilter]);
    }
    
    if (filteredTasks.length === 0) {
        tasksList.innerHTML = '<p style="text-align: center; color: var(--text-muted); padding: 40px;">–ù–µ—Ç –∑–∞–¥–∞—á</p>';
        return;
    }
    
    tasksList.innerHTML = filteredTasks.map(task => {
        const statusClass = task.status === '–ù–æ–≤–∞—è' ? 'new' : 
                          task.status === '–í —Ä–∞–±–æ—Ç–µ' ? 'in-progress' : 'completed';
        
        return `
            <div class="task-item" onclick="toggleTask('${task.id}')">
                <div class="task-header">
                    <h3 class="task-title">${task.title}</h3>
                    <span class="task-status ${statusClass}">${task.status}</span>
                </div>
                ${task.description ? `<p class="task-description">${task.description}</p>` : ''}
                <div class="task-meta">
                    <span>üìÖ ${formatDate(task.deadline)}</span>
                    <span>üë§ ${task.createdBy || task.assignedBy || '–°–∏—Å—Ç–µ–º–∞'}</span>
                </div>
            </div>
        `;
    }).join('');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∑–∞–¥–∞—á
function updateTaskCounts(tasks) {
    const counts = {
        all: tasks.length,
        new: tasks.filter(t => t.status === '–ù–æ–≤–∞—è').length,
        'in-progress': tasks.filter(t => t.status === '–í —Ä–∞–±–æ—Ç–µ').length,
        completed: tasks.filter(t => t.status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length
    };
    
    document.querySelectorAll('.filter-btn').forEach(btn => {
        const filter = btn.getAttribute('onclick').match(/filterTasks\('(.+)'\)/)[1];
        const countSpan = btn.querySelector('.count');
        if (countSpan) {
            countSpan.textContent = counts[filter] || 0;
        }
    });
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
function filterTasks(filter) {
    currentFilter = filter;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
    loadTasks();
    
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function loadStats() {
    try {
        const response = await fetch(`${API_URL}/api/stats`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const stats = await response.json();
            
            document.getElementById('totalReports').textContent = stats.totalReports || 0;
            document.getElementById('completedTasks').textContent = stats.completedTasks || 0;
            document.getElementById('currentStreak').textContent = stats.currentStreak || 0;
            document.getElementById('completionRate').textContent = `${stats.completionRate || 0}%`;
        }
    } catch (error) {
        console.error('Error loading stats:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
async function loadFullProfile() {
    if (currentUser) {
        document.getElementById('profileName').textContent = currentUser.name;
        document.getElementById('profilePosition').textContent = currentUser.position;
        document.getElementById('profileId').textContent = currentUser.telegramId;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function setCurrentDate() {
    const date = new Date();
    const options = { day: 'numeric', month: 'long', year: 'numeric' };
    const formattedDate = date.toLocaleDateString('ru-RU', options);
    document.getElementById('reportDate').textContent = formattedDate;
}

function formatDate(dateString) {
    if (!dateString) return '–ë–µ–∑ —Å—Ä–æ–∫–∞';
    const date = new Date(dateString);
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    
    if (date.toDateString() === today.toDateString()) {
        return '–°–µ–≥–æ–¥–Ω—è';
    } else if (date.toDateString() === tomorrow.toDateString()) {
        return '–ó–∞–≤—Ç—Ä–∞';
    } else {
        return date.toLocaleDateString('ru-RU', { day: 'numeric', month: 'short' });
    }
}

// –ü–æ–∫–∞–∑ —Å–ø—Ä–∞–≤–∫–∏
function showHelp() {
    tg.showAlert(
        'KAIF App v1.0\n\n' +
        'üìù –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã\n' +
        '‚úÖ –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–¥–∞—á–∞–º–∏\n' +
        'üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n\n' +
        '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    );
}

// –ü–æ–∫–∞–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
async function showEmployees() {
    showPage('employees');
    loadEmployees();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
async function loadEmployees() {
    const employeesList = document.getElementById('employeesList');
    if (!employeesList) {
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        createEmployeesPage();
        return;
    }
    
    employeesList.innerHTML = `
        <div class="loading">
            <div class="spinner"></div>
            <p style="margin-top: 16px;">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤...</p>
        </div>
    `;
    
    try {
        const response = await fetch(`${API_URL}/api/employees`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const employees = await response.json();
            displayEmployees(employees);
        }
    } catch (error) {
        employeesList.innerHTML = '<p style="text-align: center; color: var(--text-muted);">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
function displayEmployees(employees) {
    const employeesList = document.getElementById('employeesList');
    
    if (employees.length === 0) {
        employeesList.innerHTML = '<p style="text-align: center; color: var(--text-muted);">–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</p>';
        return;
    }
    
    employeesList.innerHTML = employees.map(emp => `
        <div class="action-card" onclick="createTaskForEmployee('${emp.telegramId}', '${emp.name}')">
            <div style="display: flex; align-items: center; gap: 16px;">
                <div style="font-size: 40px;">üë§</div>
                <div>
                    <h3 style="margin: 0; font-size: 18px;">${emp.name}</h3>
                    <p style="margin: 4px 0 0 0; color: var(--text-secondary);">${emp.position}</p>
                </div>
            </div>
        </div>
    `).join('');
}

// –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
function createTaskForEmployee(employeeId, employeeName) {
    showCreateTaskModal(employeeId, employeeName);
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
function showCreateTaskModal(employeeId = null, employeeName = null) {
    const modal = document.getElementById('taskModal');
    if (!modal) {
        createTaskModal();
        return;
    }
    
    modal.style.display = 'flex';
    
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
    if (employeeId && employeeName) {
        const select = document.getElementById('taskEmployee');
        select.innerHTML = `<option value="${employeeId}" selected>${employeeName}</option>`;
        loadEmployeesForSelect(employeeId);
    } else {
        loadEmployeesForSelect();
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É - —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('taskDeadline').min = today;
}

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
async function loadEmployeesForSelect(selectedId = null) {
    try {
        const response = await fetch(`${API_URL}/api/employees`, {
            headers: {
                'X-Telegram-Init-Data': tg.initData
            }
        });
        
        if (response.ok) {
            const employees = await response.json();
            const select = document.getElementById('taskEmployee');
            
            select.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</option>' +
                employees.map(emp => 
                    `<option value="${emp.telegramId}" ${emp.telegramId == selectedId ? 'selected' : ''}>${emp.name}</option>`
                ).join('');
        }
    } catch (error) {
        console.error('Error loading employees:', error);
    }
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
function closeTaskModal() {
    const modal = document.getElementById('taskModal');
    if (modal) {
        modal.style.display = 'none';
        document.getElementById('taskForm').reset();
    }
}

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
async function submitTask(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const task = {
        assigneeId: parseInt(formData.get('employee')),
        title: formData.get('title'),
        description: formData.get('description') || '',
        deadline: formData.get('deadline'),
        priority: formData.get('priority')
    };
    
    const submitBtn = event.target.querySelector('.submit-btn');
    const originalText = submitBtn.textContent;
    submitBtn.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ...';
    submitBtn.disabled = true;
    
    try {
        const response = await fetch(`${API_URL}/api/tasks`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Telegram-Init-Data': tg.initData
            },
            body: JSON.stringify(task)
        });
        
        if (response.ok) {
            if (tg.HapticFeedback) {
                tg.HapticFeedback.notificationOccurred('success');
            }
            
            tg.showAlert('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ‚úÖ', () => {
                closeTaskModal();
                if (document.getElementById('tasks').classList.contains('active')) {
                    loadTasks();
                }
            });
        } else {
            throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è');
        }
    } catch (error) {
        if (tg.HapticFeedback) {
            tg.HapticFeedback.notificationOccurred('error');
        }
        tg.showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
    } finally {
        submitBtn.textContent = originalText;
        submitBtn.disabled = false;
    }
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
function toggleTask(taskId) {
    if (tg.HapticFeedback) {
        tg.HapticFeedback.impactOccurred('light');
    }
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
}