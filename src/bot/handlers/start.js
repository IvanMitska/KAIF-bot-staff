const userService = require('../../services/userService');
const keyboards = require('../keyboards/inline');
const replyKeyboards = require('../keyboards/reply');
const security = require('../../utils/security');

// –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const registrationStates = new Map();

module.exports = (bot) => {
  console.log('Registering /start handler');
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    security.secureLog('Start command received', { 
      userId: msg.from.id,
      username: msg.from.username 
    });
    
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username || '';
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!security.isUserAuthorized(userId)) {
      security.secureLog('Unauthorized access attempt', { userId });
      await bot.sendMessage(chatId, 
        'üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n' +
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.'
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    const rateLimit = security.checkRateLimit(userId, 'start', 5, 300000); // 5 —Ä–∞–∑ –∑–∞ 5 –º–∏–Ω—É—Ç
    if (!rateLimit.allowed) {
      await bot.sendMessage(chatId, 
        `‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${rateLimit.resetIn} —Å–µ–∫—É–Ω–¥.`
      );
      return;
    }
    
    try {
      console.log('Checking for existing user with ID:', userId);
      const existingUser = await userService.getUserByTelegramId(userId);
      console.log('Existing user:', existingUser);
      
      if (existingUser) {
        console.log('Sending welcome back message');
        const MANAGER_IDS = [385436658, 1734337242];
        const isManager = MANAGER_IDS.includes(userId);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π Web App
        const webAppUrl = process.env.WEBAPP_URL || `https://${process.env.RAILWAY_STATIC_URL || 'localhost:3000'}`;
        
        await bot.sendMessage(chatId, 
          `–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${existingUser.name}! üëã\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Web App –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤ –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å KAIF App',
                    web_app: { url: webAppUrl }
                  }
                ],
                [
                  { text: 'üì± –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º', callback_data: 'classic_mode' }
                ]
              ]
            }
          }
        );
        // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        registrationStates.delete(userId);
      } else {
        console.log('New user, sending registration prompt to chat:', chatId);
        await bot.sendMessage(chatId, 
          '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã\n\n' +
          '–Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.\n' +
          '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n' +
          '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?'
        );
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registrationStates.set(userId, {
          step: 'name',
          chatId: chatId,
          username: username
        });
      }
    } catch (error) {
      console.error('Start command error:', error);
      console.error('Error details:', error.message);
      console.error('Stack trace:', error.stack);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  bot.on('message', async (msg) => {
    console.log('Message handler in start.js:', msg.text, 'from:', msg.from.id);
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (msg.text && msg.text.startsWith('/')) {
      console.log('Ignoring command in registration handler');
      return;
    }
    
    const userId = msg.from.id;
    const chatId = msg.chat.id;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('Current registration states:', Array.from(registrationStates.keys()));
    console.log('Checking for userId:', userId);
    
    if (registrationStates.has(userId)) {
      const state = registrationStates.get(userId);
      console.log('User state found:', state);
      
      if (state.step === 'name') {
        const name = msg.text;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
        const sanitizedName = security.sanitizeInput(name, security.getFieldLimits().name);
        if (sanitizedName.length < 2) {
          await bot.sendMessage(chatId, '‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.');
          return;
        }
        
        security.secureLog('User provided name', { userId });
        
        await bot.sendMessage(chatId, `–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${security.escapeMarkdown(sanitizedName)}!\n\n–ö–∞–∫–∞—è —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å?`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        registrationStates.set(userId, {
          ...state,
          step: 'position',
          name: sanitizedName
        });
        
      } else if (state.step === 'position') {
        const position = msg.text;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
        const sanitizedPosition = security.sanitizeInput(position, security.getFieldLimits().position);
        if (sanitizedPosition.length < 2) {
          await bot.sendMessage(chatId, '‚ùå –î–æ–ª–∂–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.');
          return;
        }
        
        security.secureLog('User provided position', { userId });
        
        try {
          await userService.createUser({
            telegramId: userId,
            username: state.username,
            name: state.name,
            position: sanitizedPosition
          });
          
          await bot.sendMessage(chatId, 
            `–û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ‚úÖ\n\n` +
            `–ò–º—è: ${state.name}\n` +
            `–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${sanitizedPosition}\n\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã.\n` +
            `–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00 —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ–± —ç—Ç–æ–º.`,
            {
              reply_markup: keyboards.mainMenu()
            }
          );
          
          // –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          registrationStates.delete(userId);
          
        } catch (error) {
          console.error('Registration error:', error);
          bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start');
          registrationStates.delete(userId);
        }
      }
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –æ—Ç—á–µ—Ç–∞
      const reportHandler = require('./report');
      if (reportHandler.handleMessageInput) {
        await reportHandler.handleMessageInput(bot, msg);
      }
    }
  });
};