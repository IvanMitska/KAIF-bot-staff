const { createTask, getUsers } = require('../../services/notionService');
const moment = require('moment-timezone');

// –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –Ω–∞ Telegram ID
const USER_MAPPING = {
  '–∏–≤–∞–Ω': 1734337242,
  'ivan': 1734337242,
  'ivanmitska': 1734337242,
  '–≤–∞–Ω—è': 1734337242,
  '–±–æ—Ä–∏—Å': 385436658,
  'boris': 385436658,
  '–±–æ—Ä—è': 385436658
};

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
const EMPLOYEE_IDS = [1151085087, 726915228, 642664990, 5937587032];

// –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
function parseTaskDate(text) {
  const bangkokTz = 'Asia/Bangkok';
  const now = moment.tz(bangkokTz);
  const lowerText = text.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  if (lowerText.includes('—Å–µ–≥–æ–¥–Ω—è') || lowerText.includes('today')) {
    return now.clone().endOf('day').toISOString();
  }
  if (lowerText.includes('–∑–∞–≤—Ç—Ä–∞') || lowerText.includes('tomorrow')) {
    return now.clone().add(1, 'day').endOf('day').toISOString();
  }
  if (lowerText.includes('–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞')) {
    return now.clone().add(2, 'days').endOf('day').toISOString();
  }
  if (lowerText.includes('—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é') || lowerText.includes('next week')) {
    return now.clone().add(7, 'days').endOf('day').toISOString();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º "—á–µ—Ä–µ–∑ X –¥–Ω–µ–π"
  const daysMatch = lowerText.match(/—á–µ—Ä–µ–∑\s+(\d+)\s+–¥[–µ–Ω][–Ω—å–µ]/);
  if (daysMatch) {
    return now.clone().add(parseInt(daysMatch[1]), 'days').endOf('day').toISOString();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
  if (lowerText.includes('–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ') || lowerText.includes('this week')) {
    return now.clone().endOf('week').toISOString();
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º "–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫" –∏ —Ç.–¥.
  const weekdays = {
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 1, '–≤—Ç–æ—Ä–Ω–∏–∫': 2, '—Å—Ä–µ–¥–∞': 3, '—á–µ—Ç–≤–µ—Ä–≥': 4, 
    '–ø—è—Ç–Ω–∏—Ü–∞': 5, '–ø—è—Ç–Ω–∏—Ü—É': 5, '—Å—É–±–±–æ—Ç–∞': 6, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 0
  };
  for (const [day, num] of Object.entries(weekdays)) {
    if (lowerText.includes(day)) {
      const targetDay = now.clone().day(num);
      if (targetDay.isBefore(now)) {
        targetDay.add(1, 'week');
      }
      return targetDay.endOf('day').toISOString();
    }
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–≤—Ç—Ä–∞
  return now.clone().add(1, 'day').endOf('day').toISOString();
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
function parsePriority(text) {
  const lowerText = text.toLowerCase();
  if (lowerText.includes('—Å—Ä–æ—á–Ω–æ') || lowerText.includes('–≤–∞–∂–Ω–æ') || lowerText.includes('urgent')) {
    return '–í—ã—Å–æ–∫–∏–π';
  }
  if (lowerText.includes('–Ω–µ —Å—Ä–æ—á–Ω–æ') || lowerText.includes('–ø–æ—Ç–æ–º')) {
    return '–ù–∏–∑–∫–∏–π';
  }
  return '–°—Ä–µ–¥–Ω–∏–π';
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ
function hasNameInText(text) {
  const lowerText = text.toLowerCase();
  const names = ['–∏–≤–∞–Ω', 'ivan', '–≤–∞–Ω—è', '–±–æ—Ä–∏—Å', 'boris', '–±–æ—Ä—è'];
  return names.some(name => lowerText.includes(name));
}

// –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
async function parseAssignee(text) {
  const users = await getUsers();
  const lowerText = text.toLowerCase();
  
  // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ @
  const mentionMatch = text.match(/@(\w+)/);
  if (mentionMatch) {
    const username = mentionMatch[1].toLowerCase();
    const user = users.find(u => u.username && u.username.toLowerCase() === username);
    if (user) return user;
  }
  
  // –ò—â–µ–º –ø–æ –∏–º–µ–Ω–∏
  for (const user of users) {
    if (user.name && lowerText.includes(user.name.toLowerCase())) {
      return user;
    }
  }
  
  // –ò—â–µ–º –ø–æ –º–∞–ø–ø–∏–Ω–≥—É
  for (const [key, id] of Object.entries(USER_MAPPING)) {
    if (lowerText.includes(key)) {
      const user = users.find(u => u.telegramId === id);
      if (user) return user;
    }
  }
  
  return null;
}

async function handleQuickTask(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  const MANAGER_IDS = [385436658, 1734337242];
  
  // –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const taskText = text.replace(/^\/task\s+/i, '').trim();
  
  if (!taskText) {
    const helpText = MANAGER_IDS.includes(userId) ? 
      'üìù *–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É:*\n\n' +
      '`/task @username –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–æ –∑–∞–≤—Ç—Ä–∞`\n' +
      '`/task –ò–≤–∞–Ω —Å–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç —Å—Ä–æ—á–Ω–æ`\n' +
      '`/task @ivan –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é`\n' +
      '`/task —Å–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç`\n\n' +
      'üïê *–ü–æ–Ω–∏–º–∞—é –¥–∞—Ç—ã:* —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ X –¥–Ω–µ–π, —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é, –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫\n' +
      '‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* —Å—Ä–æ—á–Ω–æ, –≤–∞–∂–Ω–æ, –Ω–µ —Å—Ä–æ—á–Ω–æ\n\n' +
      'üí° *–ü—Ä–∏–º–µ—Ä—ã –¥–∞—Ç:*\n' +
      '‚Ä¢ "–¥–æ –∑–∞–≤—Ç—Ä–∞" ‚Üí –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n' +
      '‚Ä¢ "—á–µ—Ä–µ–∑ 3 –¥–Ω—è" ‚Üí —á–µ—Ä–µ–∑ 3 –¥–Ω—è\n' +
      '‚Ä¢ "–≤ –ø—è—Ç–Ω–∏—Ü—É" ‚Üí –±–ª–∏–∂–∞–π—à–∞—è –ø—è—Ç–Ω–∏—Ü–∞\n' +
      '‚Ä¢ "–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ" ‚Üí –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏' :
      'üìù *–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å–µ–±–µ:*\n\n' +
      '`/task —Å–µ–±–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏`\n' +
      '`/task –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ—Ç—á–µ—Ç —Å—Ä–æ—á–Ω–æ`\n\n' +
      'üïê *–ü–æ–Ω–∏–º–∞—é –¥–∞—Ç—ã:* —Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞, —á–µ—Ä–µ–∑ X –¥–Ω–µ–π\n' +
      '‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* —Å—Ä–æ—á–Ω–æ, –≤–∞–∂–Ω–æ, –Ω–µ —Å—Ä–æ—á–Ω–æ\n\n' +
      '‚ÑπÔ∏è –í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ';
    
    await bot.sendMessage(chatId, helpText, { parse_mode: 'Markdown' });
    return;
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–≤–∏—Ç –ª–∏ –∑–∞–¥–∞—á—É —Å–µ–±–µ
    const selfTask = taskText.toLowerCase().includes('—Å–µ–±–µ') || 
                     taskText.toLowerCase().includes('–º–Ω–µ') ||
                     !taskText.match(/@\w+/) && !hasNameInText(taskText);
    
    let assignee;
    
    if (selfTask) {
      // –°—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É —Å–µ–±–µ
      assignee = await require('../../services/notionService').getUser(userId);
      if (!assignee) {
        await bot.sendMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ');
        return;
      }
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –¥—Ä—É–≥–∏–º
      if (!MANAGER_IDS.includes(userId)) {
        await bot.sendMessage(chatId, 
          '‚ùå –í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/task —Å–µ–±–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏`',
          { parse_mode: 'Markdown' }
        );
        return;
      }
      
      // –ü–∞—Ä—Å–∏–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      assignee = await parseAssignee(taskText);
      if (!assignee) {
        await bot.sendMessage(chatId, 
          '‚ùå –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n\n' +
          '–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ @ –∏–ª–∏ –∏–º—è:\n' +
          '`/task @username –∑–∞–¥–∞—á–∞`\n' +
          '`/task –ò–≤–∞–Ω –∑–∞–¥–∞—á–∞`'
        , { parse_mode: 'Markdown' });
        return;
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –∏–º—è/username –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    let taskDescription = taskText
      .replace(/@\w+/g, '')
      .replace(/\b(—Å–µ–±–µ|–º–Ω–µ)\b/gi, '')
      .replace(new RegExp(assignee.name || '', 'gi'), '');
    
    // –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
    const timePatterns = [
      /\b(—Å–µ–≥–æ–¥–Ω—è|–∑–∞–≤—Ç—Ä–∞|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|—Å—Ä–æ—á–Ω–æ|–≤–∞–∂–Ω–æ|–Ω–µ —Å—Ä–æ—á–Ω–æ)\b/gi,
      /\b—á–µ—Ä–µ–∑\s+\d+\s+–¥[–µ–Ω][–Ω—å–µ]/gi,
      /\b(—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é|–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ)\b/gi,
      /\b(–≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤–æ –≤—Ç–æ—Ä–Ω–∏–∫|–≤ —Å—Ä–µ–¥—É|–≤ —á–µ—Ç–≤–µ—Ä–≥|–≤ –ø—è—Ç–Ω–∏—Ü—É|–≤ —Å—É–±–±–æ—Ç—É|–≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)\b/gi
    ];
    
    for (const pattern of timePatterns) {
      taskDescription = taskDescription.replace(pattern, '');
    }
    
    taskDescription = taskDescription.trim();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const deadline = parseTaskDate(taskText);
    const priority = parsePriority(taskText);
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    const creator = await require('../../services/notionService').getUser(userId);
    const taskData = {
      title: taskDescription.slice(0, 50) + (taskDescription.length > 50 ? '...' : ''),
      description: taskDescription,
      assigneeId: assignee.telegramId,
      assigneeName: assignee.name,
      creatorId: userId,
      creatorName: creator.name,
      priority: priority,
      deadline: deadline
    };
    
    await createTask(taskData);
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    const deadlineText = moment(deadline).tz('Asia/Bangkok').format('DD.MM.YYYY');
    await bot.sendMessage(chatId, 
      `‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
      `üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ${assignee.name}\n` +
      `üìù *–ó–∞–¥–∞—á–∞:* ${taskDescription}\n` +
      `‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${priority}\n` +
      `üìÖ *–°—Ä–æ–∫:* ${deadlineText}`,
      { parse_mode: 'Markdown' }
    );
    
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
    await bot.sendMessage(assignee.telegramId,
      `üîî *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç ${creator.name}!*\n\n` +
      `üìù ${taskDescription}\n` +
      `‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${priority}\n` +
      `üìÖ *–°—Ä–æ–∫:* ${deadlineText}\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è`,
      { parse_mode: 'Markdown' }
    );
    
  } catch (error) {
    console.error('Error creating quick task:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏');
  }
}

module.exports = { handleQuickTask };