// –§–û–†–°–ò–†–û–í–ê–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ó–ê–î–ê–ß
(function() {
    console.log('üöÄ FORCE TASKS LOAD STARTING...');
    
    // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function waitAndLoad() {
        const tasksSection = document.getElementById('tasks');
        const tasksList = document.getElementById('tasksList');
        
        // –ï—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–¥–∞—á
        if (tasksSection && tasksSection.classList.contains('active')) {
            console.log('üìã Tasks page detected, forcing load...');
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if (!tasksList) {
                const container = document.createElement('div');
                container.id = 'tasksList';
                container.style.padding = '20px';
                tasksSection.appendChild(container);
            }
            
            // –§–æ—Ä—Å–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            forceLoadTasks();
        }
    }
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    async function forceLoadTasks() {
        console.log('‚ö° FORCING TASKS LOAD...');
        
        const tasksList = document.getElementById('tasksList');
        if (!tasksList) {
            console.error('Tasks list not found!');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º
        tasksList.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="font-size: 24px; margin-bottom: 10px;">‚è≥</div>
                <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏...</p>
            </div>
        `;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º Telegram WebApp
            const tg = window.Telegram?.WebApp;
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
            const urls = [
                '/api/tasks/my',
                '/api/tasks/my?test=1',
                `${window.location.origin}/api/tasks/my`,
                `${window.location.origin}/api/tasks/my?test=1`
            ];
            
            let tasks = null;
            let successUrl = null;
            
            // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π URL
            for (const url of urls) {
                console.log(`üîç Trying: ${url}`);
                
                try {
                    const headers = {};
                    if (tg?.initData) {
                        headers['X-Telegram-Init-Data'] = tg.initData;
                    }
                    
                    const response = await fetch(url, { 
                        method: 'GET',
                        headers: headers,
                        credentials: 'same-origin'
                    });
                    
                    console.log(`Response from ${url}: ${response.status}`);
                    
                    if (response.ok) {
                        tasks = await response.json();
                        successUrl = url;
                        console.log(`‚úÖ SUCCESS! Got ${tasks.length} tasks from ${url}`);
                        break;
                    }
                } catch (err) {
                    console.error(`Failed ${url}:`, err);
                }
            }
            
            // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–¥–∞—á–∏
            if (tasks && Array.isArray(tasks)) {
                console.log(`üìã Displaying ${tasks.length} tasks`);
                
                if (tasks.length === 0) {
                    tasksList.innerHTML = `
                        <div style="text-align: center; padding: 60px 20px;">
                            <div style="font-size: 64px; margin-bottom: 20px;">üì≠</div>
                            <h3>–ù–µ—Ç –∑–∞–¥–∞—á</h3>
                            <p style="color: var(--text-secondary);">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á</p>
                        </div>
                    `;
                } else {
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–¥–∞—á–∏
                    tasksList.innerHTML = `
                        <div style="display: flex; flex-direction: column; gap: 12px;">
                            ${tasks.map(task => `
                                <div style="
                                    background: rgba(255,255,255,0.05);
                                    border-radius: 12px;
                                    padding: 16px;
                                    border: 1px solid rgba(255,255,255,0.1);
                                ">
                                    <h4 style="margin: 0 0 8px 0; font-size: 16px;">
                                        ${task.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                                    </h4>
                                    <p style="margin: 0 0 12px 0; color: var(--text-secondary); font-size: 14px;">
                                        ${task.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
                                    </p>
                                    <div style="display: flex; gap: 8px; flex-wrap: wrap; font-size: 12px;">
                                        <span style="
                                            padding: 4px 10px;
                                            background: ${getStatusColor(task.status)}22;
                                            color: ${getStatusColor(task.status)};
                                            border-radius: 6px;
                                        ">${task.status || '–ù–æ–≤–∞—è'}</span>
                                        <span style="
                                            padding: 4px 10px;
                                            background: ${getPriorityColor(task.priority)}22;
                                            color: ${getPriorityColor(task.priority)};
                                            border-radius: 6px;
                                        ">${task.priority || '–°—Ä–µ–¥–Ω–∏–π'}</span>
                                        ${task.deadline ? `
                                            <span style="
                                                padding: 4px 10px;
                                                background: rgba(255,255,255,0.1);
                                                border-radius: 6px;
                                            ">üìÖ ${formatDate(task.deadline)}</span>
                                        ` : ''}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–ª
                window.workingTasksUrl = successUrl;
                
            } else {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
            }
            
        } catch (error) {
            console.error('‚ùå FORCE LOAD FAILED:', error);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ UI
            tasksList.innerHTML = `
                <div style="text-align: center; padding: 40px;">
                    <div style="font-size: 48px; margin-bottom: 20px; color: #f44336;">‚ö†Ô∏è</div>
                    <h3 style="color: #f44336;">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏</h3>
                    <p style="margin: 20px 0;">${error.message}</p>
                    <button onclick="location.reload()" style="
                        padding: 10px 20px;
                        background: var(--primary-color, #667eea);
                        color: white;
                        border: none;
                        border-radius: 8px;
                        cursor: pointer;
                    ">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</button>
                    
                    <div style="margin-top: 30px; padding: 20px; background: rgba(255,255,255,0.05); border-radius: 8px; text-align: left;">
                        <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:</h4>
                        <p style="font-size: 12px; font-family: monospace;">
                            Platform: ${window.Telegram?.WebApp?.platform || 'Unknown'}<br>
                            InitData: ${window.Telegram?.WebApp?.initData ? 'Present' : 'Missing'}<br>
                            User: ${JSON.stringify(window.Telegram?.WebApp?.initDataUnsafe?.user || {})}<br>
                            URL: ${window.location.href}
                        </p>
                    </div>
                </div>
            `;
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function getStatusColor(status) {
        const colors = {
            '–ù–æ–≤–∞—è': '#2196F3',
            '–í —Ä–∞–±–æ—Ç–µ': '#FF9800', 
            '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': '#4CAF50',
            '–û—Ç–º–µ–Ω–µ–Ω–∞': '#9E9E9E'
        };
        return colors[status] || '#666';
    }
    
    function getPriorityColor(priority) {
        const colors = {
            '–í—ã—Å–æ–∫–∏–π': '#F44336',
            '–°—Ä–µ–¥–Ω–∏–π': '#FF9800',
            '–ù–∏–∑–∫–∏–π': '#4CAF50'
        };
        return colors[priority] || '#666';
    }
    
    function formatDate(dateStr) {
        try {
            return new Date(dateStr).toLocaleDateString('ru-RU');
        } catch {
            return dateStr;
        }
    }
    
    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
    window.retryLoadTasks = forceLoadTasks;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(waitAndLoad, 1000);
        });
    } else {
        setTimeout(waitAndLoad, 1000);
    }
    
    // –°–ª—É—à–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞–¥–∞—á
    document.addEventListener('click', (e) => {
        const target = e.target;
        if (target.closest('[data-section="tasks"]') || 
            target.closest('.nav-btn') && target.textContent.includes('–ó–∞–¥–∞—á–∏') ||
            target.textContent === '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞') {
            setTimeout(waitAndLoad, 500);
        }
    });
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–æ–±–∞–ª—å–Ω–æ
    window.forceLoadTasks = forceLoadTasks;
    
    console.log('‚úÖ FORCE TASKS LOAD READY');
})();