const { getUser, createTask } = require('../../services/optimizedNotionService');
const { taskKeyboards } = require('../keyboards/taskKeyboards');
const { userStates } = require('../state');
const moment = require('moment-timezone');

async function handleTaskCreationFlow(bot, msg) {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text;
  
  const state = userStates[userId];
  if (!state || state.state !== 'creating_task') return false;
  
  try {
    switch (state.step) {
      case 'input_task':
        // –ü–∞—Ä—Å–∏–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const parsedData = parseTaskMessage(text);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å–ª–æ–≤
        state.taskData.title = text.slice(0, 50) + (text.length > 50 ? '...' : '');
        state.taskData.description = text;
        state.taskData.priority = parsedData.priority;
        state.taskData.deadline = parsedData.deadline;
        
        // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        const creator = await getUser(userId);
        state.taskData.creatorId = userId;
        state.taskData.creatorName = creator.name;
        
        await createTask(state.taskData);
        
        const deadlineText = moment(state.taskData.deadline).tz('Asia/Bangkok').format('DD.MM.YYYY');
        await bot.sendMessage(
          chatId,
          `‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
          `üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ${state.taskData.assigneeName}\n` +
          `üìù *–ó–∞–¥–∞—á–∞:* ${state.taskData.title}\n` +
          `‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${getPriorityEmoji(state.taskData.priority)} ${state.taskData.priority}\n` +
          `üìÖ *–°—Ä–æ–∫:* ${deadlineText}`,
          { parse_mode: 'Markdown' }
        );
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        await bot.sendMessage(
          state.taskData.assigneeId,
          `üîî *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç ${creator.name}!*\n\n` +
          `üìù ${state.taskData.description}\n` +
          `‚ö° *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${state.taskData.priority}\n` +
          `üìÖ *–°—Ä–æ–∫:* ${deadlineText}\n\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tasks –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è`,
          { parse_mode: 'Markdown' }
        );
        
        delete userStates[userId];
        return true;
    }
  } catch (error) {
    console.error('Error in task creation flow:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    delete userStates[userId];
  }
  
  return false;
}

async function handleEmployeeSelection(bot, callbackQuery, employeeId) {
  const chatId = callbackQuery.message.chat.id;
  const userId = callbackQuery.from.id;
  const state = userStates[userId];
  
  if (!state || state.state !== 'creating_task') return;
  
  try {
    const employee = await getUser(employeeId);
    if (!employee) {
      await bot.sendMessage(chatId, '‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    state.taskData.assigneeId = employeeId;
    state.taskData.assigneeName = employee.name;
    state.step = 'input_task';
    
    await bot.editMessageText(
      `üë§ *–°–æ—Ç—Ä—É–¥–Ω–∏–∫:* ${employee.name}\n\n` +
      `üìù *–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏*\n\n` +
      `–ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫ —Å–ª–æ–≤–∞–º–∏:\n` +
      `‚Ä¢ "—Å–¥–µ–ª–∞—Ç—å –æ—Ç—á–µ—Ç –∑–∞–≤—Ç—Ä–∞"\n` +
      `‚Ä¢ "–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 –¥–Ω—è"\n` +
      `‚Ä¢ "–ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É –≤ –ø—è—Ç–Ω–∏—Ü—É"\n\n` +
      `–î–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ–±–∞–≤—å—Ç–µ: —Å—Ä–æ—á–Ω–æ, –≤–∞–∂–Ω–æ`,
      {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id,
        parse_mode: 'Markdown'
      }
    );
  } catch (error) {
    console.error('Error selecting employee:', error);
    await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
  }
}

// –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
async function handlePrioritySelection(bot, callbackQuery, priority) {
  // Deprecated - priority is now parsed automatically
  return;
}

// –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
async function confirmTaskCreation(bot, callbackQuery) {
  // Deprecated - task is created immediately after input
  return;
}

function parseTaskMessage(text) {
  const bangkokTz = 'Asia/Bangkok';
  const now = moment.tz(bangkokTz);
  const lowerText = text.toLowerCase();
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
  let priority = '–°—Ä–µ–¥–Ω–∏–π';
  if (lowerText.includes('—Å—Ä–æ—á–Ω–æ') || lowerText.includes('–≤–∞–∂–Ω–æ') || lowerText.includes('urgent')) {
    priority = '–í—ã—Å–æ–∫–∏–π';
  } else if (lowerText.includes('–Ω–µ —Å—Ä–æ—á–Ω–æ') || lowerText.includes('–ø–æ—Ç–æ–º')) {
    priority = '–ù–∏–∑–∫–∏–π';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
  let deadline = now.clone().add(1, 'day').endOf('day').toISOString(); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–≤—Ç—Ä–∞
  
  if (lowerText.includes('—Å–µ–≥–æ–¥–Ω—è') || lowerText.includes('today')) {
    deadline = now.clone().endOf('day').toISOString();
  } else if (lowerText.includes('–∑–∞–≤—Ç—Ä–∞') || lowerText.includes('tomorrow')) {
    deadline = now.clone().add(1, 'day').endOf('day').toISOString();
  } else if (lowerText.includes('–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞')) {
    deadline = now.clone().add(2, 'days').endOf('day').toISOString();
  } else if (lowerText.includes('—á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é') || lowerText.includes('next week')) {
    deadline = now.clone().add(7, 'days').endOf('day').toISOString();
  } else if (lowerText.includes('–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ') || lowerText.includes('this week')) {
    deadline = now.clone().endOf('week').toISOString();
  } else {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º "—á–µ—Ä–µ–∑ X –¥–Ω–µ–π"
    const daysMatch = lowerText.match(/—á–µ—Ä–µ–∑\s+(\d+)\s+–¥[–µ–Ω][–Ω—å–µ]/);
    if (daysMatch) {
      deadline = now.clone().add(parseInt(daysMatch[1]), 'days').endOf('day').toISOString();
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
      const weekdays = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 1, '–≤—Ç–æ—Ä–Ω–∏–∫': 2, '—Å—Ä–µ–¥–∞': 3, '—á–µ—Ç–≤–µ—Ä–≥': 4, 
        '–ø—è—Ç–Ω–∏—Ü—É': 5, '–ø—è—Ç–Ω–∏—Ü–∞': 5, '—Å—É–±–±–æ—Ç—É': 6, '—Å—É–±–±–æ—Ç–∞': 6, '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 0
      };
      for (const [day, num] of Object.entries(weekdays)) {
        if (lowerText.includes(day)) {
          const targetDay = now.clone().day(num);
          if (targetDay.isBefore(now)) {
            targetDay.add(1, 'week');
          }
          deadline = targetDay.endOf('day').toISOString();
          break;
        }
      }
    }
  }
  
  return { priority, deadline };
}

function parseDeadline(text) {
  // Deprecated - use parseTaskMessage instead
  const parsed = parseTaskMessage(text);
  return parsed.deadline;
}

function formatTaskSummary(taskData) {
  return `<b>üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏</b>

<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> ${taskData.assigneeName}
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${taskData.title}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${taskData.description}
<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${getPriorityEmoji(taskData.priority)} ${taskData.priority}
<b>–°—Ä–æ–∫:</b> ${formatDate(taskData.deadline)}

–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É?`;
}

function getPriorityEmoji(priority) {
  const emojis = {
    '–í—ã—Å–æ–∫–∏–π': 'üî¥',
    '–°—Ä–µ–¥–Ω–∏–π': 'üü°',
    '–ù–∏–∑–∫–∏–π': 'üü¢'
  };
  return emojis[priority] || '‚ö™';
}

function formatDate(isoDate) {
  return moment(isoDate).tz('Asia/Bangkok').format('DD.MM.YYYY');
}

module.exports = {
  handleTaskCreationFlow,
  handleEmployeeSelection,
  handlePrioritySelection,
  confirmTaskCreation
};