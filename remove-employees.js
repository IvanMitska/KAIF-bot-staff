const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'bot.db');
const db = new sqlite3.Database(dbPath);

console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ï–ª–µ–Ω–∞ –∏ –Ø–∫–æ–≤ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
console.log('================================================');

// ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
const usersToRemove = [
    { telegramId: '726915228', name: '–ï–ª–µ–Ω–∞' },
    { telegramId: '893020643', name: '–Ø–∫–æ–≤' }
];

db.serialize(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:');
    db.all("SELECT telegram_id, name, position FROM users ORDER BY name", (err, rows) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
            return;
        }

        console.table(rows);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        const existingUsers = rows.filter(row =>
            usersToRemove.some(user => user.telegramId === row.telegram_id)
        );

        if (existingUsers.length === 0) {
            console.log('\n‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ï–ª–µ–Ω–∞ –∏ –Ø–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ.');
            console.log('–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ —É–∂–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.');
            db.close();
            return;
        }

        console.log('\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
        console.table(existingUsers);

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        const userIds = existingUsers.map(u => u.telegram_id).join(',');

        db.all(`
            SELECT
                t.id,
                t.title,
                t.status,
                t.assignee_name as assignee
            FROM tasks t
            WHERE t.assignee_id IN (${userIds.split(',').map(() => '?').join(',')})
                AND t.status != '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'
        `, userIds.split(','), (err, tasks) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞—á:', err);
                db.close();
                return;
            }

            if (tasks && tasks.length > 0) {
                console.log('\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –£ —ç—Ç–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:');
                console.table(tasks);
                console.log('\n‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á—å—Ç–µ –∏–ª–∏ –∑–∞–∫—Ä–æ–π—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.');
                db.close();
                return;
            }

            // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');

            const deleteStmt = db.prepare("DELETE FROM users WHERE telegram_id = ?");

            existingUsers.forEach(user => {
                deleteStmt.run(user.telegram_id, function(err) {
                    if (err) {
                        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ ${user.name}:`, err);
                    } else {
                        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} (ID: ${user.telegram_id})`);
                    }
                });
            });

            deleteStmt.finalize(() => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                console.log('\nüìã –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:');
                db.all("SELECT telegram_id, name, position FROM users ORDER BY name", (err, rows) => {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
                        db.close();
                        return;
                    }

                    console.table(rows);

                    // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü
                    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');

                    // –£–¥–∞–ª—è–µ–º –æ—Ç—á–µ—Ç—ã
                    db.run(`DELETE FROM reports WHERE user_telegram_id IN (${userIds.split(',').map(() => '?').join(',')})`,
                        userIds.split(','),
                        function(err) {
                            if (err) {
                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤:', err);
                            } else if (this.changes > 0) {
                                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –æ—Ç—á–µ—Ç–æ–≤: ${this.changes}`);
                            }
                        }
                    );

                    // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏
                    db.run(`DELETE FROM attendance WHERE user_telegram_id IN (${userIds.split(',').map(() => '?').join(',')})`,
                        userIds.split(','),
                        function(err) {
                            if (err) {
                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è:', err);
                            } else if (this.changes > 0) {
                                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è: ${this.changes}`);
                            }
                        }
                    );

                    // –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    db.run(`DELETE FROM tasks WHERE assignee_id IN (${userIds.split(',').map(() => '?').join(',')}) AND status = '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'`,
                        userIds.split(','),
                        function(err) {
                            if (err) {
                                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á:', err);
                            } else if (this.changes > 0) {
                                console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${this.changes}`);
                            }

                            console.log('\n‚úÖ –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!');
                            db.close();
                        }
                    );
                });
            });
        });
    });
});