// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω task-detail-modal.js');
console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ window.showTaskDetails:', typeof window.showTaskDetails);

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏
let currentTaskDetails = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–¥–∞—á–∏
window.showTaskDetails = function(taskId) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º taskId –≤ —á–∏—Å–ª–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    taskId = parseInt(taskId);

    console.log('üîç –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏:', taskId, typeof taskId);

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
    let modal = document.getElementById('taskDetailModal');

    if (!modal) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        console.log('üì¶ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ');
        createTaskDetailModal();
        modal = document.getElementById('taskDetailModal');

        if (!modal) {
            console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ!');
            return;
        }
    }

    console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞–π–¥–µ–Ω–æ/—Å–æ–∑–¥–∞–Ω–æ');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    modal.classList.remove('hidden');
    modal.style.display = 'flex';
    modal.style.opacity = '1';
    modal.style.visibility = 'visible';

    console.log('üîç –ò—â–µ–º –∑–∞–¥–∞—á—É –≤ –∫–µ—à–µ, –≤—Å–µ–≥–æ –∑–∞–¥–∞—á:', window.currentTasks?.length);

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á—É –≤ currentTasks –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (window.currentTasks && Array.isArray(window.currentTasks)) {
        const task = window.currentTasks.find(t => parseInt(t.id) === taskId);
        if (task) {
            console.log('‚úÖ –ó–∞–¥–∞—á–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–µ—à–µ:', task);
            currentTaskDetails = task;
            displayTaskDetails(task);
            return;
        }
    }

    console.log('‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–µ—à–µ, –∑–∞–≥—Ä—É–∂–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞...');

    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∏ –Ω–µ—Ç –≤ –∫–µ—à–µ, –ø–æ–ª—É—á–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    const endpoint = typeof getApiUrl === 'function' ? getApiUrl(`/api/tasks/${taskId}`) : `/api/tasks/${taskId}`;

    fetch(endpoint)
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to load task');
            }
            return response.json();
        })
        .then(task => {
            console.log('‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:', task);
            currentTaskDetails = task;
            displayTaskDetails(task);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏:', error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            const modalContent = modal.querySelector('.task-detail-content');
            if (modalContent) {
                modalContent.innerHTML = `
                    <div style="text-align: center; padding: 40px; color: var(--text-secondary);">
                        <i data-lucide="alert-circle" style="width: 48px; height: 48px; margin-bottom: 16px; color: red;"></i>
                        <h3>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á—É</h3>
                        <p style="margin-top: 10px;">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
                    </div>
                `;
                if (typeof lucide !== 'undefined') {
                    lucide.createIcons();
                }
            }
        });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
function displayTaskDetails(task) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    let modal = document.getElementById('taskDetailModal');

    if (!modal) {
        // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        createTaskDetailModal();
        modal = document.getElementById('taskDetailModal');
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const safeSetText = (id, text) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = text;
        }
    };

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    safeSetText('detailTaskTitle', task.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è');
    safeSetText('detailTaskDescription', task.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    safeSetText('detailTaskEmployee', task.employeeName || task.employee || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω');
    safeSetText('detailTaskCreator', task.creatorName || task.creator || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
    safeSetText('detailTaskDeadline', formatDate(task.deadline));
    safeSetText('detailTaskCreatedAt', formatDate(task.createdAt || task.created_at));

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    const priorityElement = document.getElementById('detailTaskPriority');
    if (priorityElement) {
        priorityElement.textContent = getPriorityText(task.priority);
        priorityElement.className = `task-priority priority-${(task.priority || '–°—Ä–µ–¥–Ω–∏–π').toLowerCase()}`;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
    const statusElement = document.getElementById('detailTaskStatus');
    if (statusElement) {
        statusElement.textContent = getStatusText(task.status);
        statusElement.className = `task-status status-${(task.status || '–ù–æ–≤–∞—è').toLowerCase().replace(' ', '-')}`;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
    updateActionButtons(task);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    modal.classList.remove('hidden');
    modal.style.display = 'flex';

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        modal.classList.add('show');
    }, 10);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function createTaskDetailModal() {
    const modalHTML = `
        <div id="taskDetailModal" class="modal-overlay hidden">
            <div class="modal-container task-detail-container">
                <div class="modal-header">
                    <div class="modal-title-section">
                        <div class="modal-icon">
                            <i data-lucide="clipboard-list"></i>
                        </div>
                        <h2 class="modal-title">–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏</h2>
                    </div>
                    <button class="modal-close" onclick="closeTaskDetailModal()">
                        <i data-lucide="x"></i>
                    </button>
                </div>

                <div class="task-detail-content">
                    <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å -->
                    <div class="task-detail-header">
                        <h3 id="detailTaskTitle" class="task-title"></h3>
                        <div class="task-badges">
                            <span id="detailTaskStatus" class="task-status"></span>
                            <span id="detailTaskPriority" class="task-priority"></span>
                        </div>
                    </div>

                    <!-- –û–ø–∏—Å–∞–Ω–∏–µ -->
                    <div class="task-detail-section">
                        <div class="section-label">
                            <i data-lucide="file-text"></i>
                            <span>–û–ø–∏—Å–∞–Ω–∏–µ</span>
                        </div>
                        <div id="detailTaskDescription" class="task-description"></div>
                    </div>

                    <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ -->
                    <div class="task-detail-grid">
                        <div class="detail-item">
                            <div class="detail-label">
                                <i data-lucide="user"></i>
                                <span>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å</span>
                            </div>
                            <div id="detailTaskEmployee" class="detail-value"></div>
                        </div>

                        <div class="detail-item">
                            <div class="detail-label">
                                <i data-lucide="user-plus"></i>
                                <span>–ü–æ—Å—Ç–∞–≤–∏–ª</span>
                            </div>
                            <div id="detailTaskCreator" class="detail-value"></div>
                        </div>

                        <div class="detail-item">
                            <div class="detail-label">
                                <i data-lucide="calendar"></i>
                                <span>–î–µ–¥–ª–∞–π–Ω</span>
                            </div>
                            <div id="detailTaskDeadline" class="detail-value"></div>
                        </div>

                        <div class="detail-item">
                            <div class="detail-label">
                                <i data-lucide="clock"></i>
                                <span>–°–æ–∑–¥–∞–Ω–∞</span>
                            </div>
                            <div id="detailTaskCreatedAt" class="detail-value"></div>
                        </div>
                    </div>

                    <!-- –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π -->
                    <div class="task-detail-actions">
                        <button id="btnStartTask" class="action-btn btn-primary" onclick="startTask()">
                            <i data-lucide="play"></i>
                            <span>–ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</span>
                        </button>

                        <button id="btnCompleteTask" class="action-btn btn-success" onclick="completeTask()">
                            <i data-lucide="check-circle"></i>
                            <span>–ó–∞–≤–µ—Ä—à–∏—Ç—å</span>
                        </button>

                        <button id="btnEditTask" class="action-btn btn-secondary" onclick="editTaskFromDetail()">
                            <i data-lucide="edit"></i>
                            <span>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</span>
                        </button>

                        <button id="btnDeleteTask" class="action-btn btn-danger" onclick="deleteTaskFromDetail()">
                            <i data-lucide="trash"></i>
                            <span>–£–¥–∞–ª–∏—Ç—å</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤ DOM
    document.body.insertAdjacentHTML('beforeend', modalHTML);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∫–æ–Ω–∫–∏
    if (typeof lucide !== 'undefined') {
        lucide.createIcons();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ñ–æ–Ω—É
    const modal = document.getElementById('taskDetailModal');
    modal.addEventListener('click', function(e) {
        if (e.target === modal) {
            closeTaskDetailModal();
        }
    });
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
window.closeTaskDetailModal = function() {
    const modal = document.getElementById('taskDetailModal');
    if (!modal) return;

    modal.classList.remove('show');

    setTimeout(() => {
        modal.classList.add('hidden');
        modal.style.display = 'none';
        currentTaskDetails = null;
    }, 300);
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
function updateActionButtons(task) {
    const btnStart = document.getElementById('btnStartTask');
    const btnComplete = document.getElementById('btnCompleteTask');
    const btnEdit = document.getElementById('btnEditTask');
    const btnDelete = document.getElementById('btnDeleteTask');

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    [btnStart, btnComplete, btnEdit, btnDelete].forEach(btn => {
        if (btn) btn.style.display = 'none';
    });

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–∞–≤
    if (task.status === '–ù–æ–≤–∞—è' || task.status === 'new') {
        if (btnStart) btnStart.style.display = 'flex';
    } else if (task.status === '–í —Ä–∞–±–æ—Ç–µ' || task.status === 'in-progress') {
        if (btnComplete) btnComplete.style.display = 'flex';
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (—Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω)
    const currentUser = window.currentUser || {};
    if (task.creatorId === currentUser.id || currentUser.isManager) {
        if (btnEdit) btnEdit.style.display = 'flex';
        if (btnDelete) btnDelete.style.display = 'flex';
    }
}

// –ù–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
window.startTask = function() {
    if (!currentTaskDetails) return;

    updateTaskStatus(currentTaskDetails.id, '–í —Ä–∞–±–æ—Ç–µ');
};

// –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É
window.completeTask = function() {
    if (!currentTaskDetails) return;

    updateTaskStatus(currentTaskDetails.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–∞');
};

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
function updateTaskStatus(taskId, newStatus) {
    fetch(`/tasks/${taskId}/status`, {
        method: 'PUT',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: newStatus })
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            showNotification(`–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${newStatus}"`, 'success');
            closeTaskDetailModal();
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            if (typeof loadTasks === 'function') {
                loadTasks();
            }
        } else {
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å', 'error');
        }
    })
    .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞', 'error');
    });
}

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
window.editTaskFromDetail = function() {
    if (!currentTaskDetails) return;

    closeTaskDetailModal();

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (typeof showEditTaskModal === 'function') {
        showEditTaskModal(currentTaskDetails);
    }
};

// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
window.deleteTaskFromDetail = function() {
    if (!currentTaskDetails) return;

    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
        return;
    }

    fetch(`/tasks/${currentTaskDetails.id}`, {
        method: 'DELETE'
    })
    .then(response => response.json())
    .then(result => {
        if (result.success) {
            showNotification('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞', 'success');
            closeTaskDetailModal();
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            if (typeof loadTasks === 'function') {
                loadTasks();
            }
        } else {
            showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É', 'error');
        }
    })
    .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏', 'error');
    });
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatDate(dateString) {
    if (!dateString) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

    const date = new Date(dateString);
    const options = {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    };

    return date.toLocaleDateString('ru-RU', options);
}

function getPriorityText(priority) {
    const priorities = {
        'high': 'üî¥ –í—ã—Å–æ–∫–∏–π',
        'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
        'low': 'üü¢ –ù–∏–∑–∫–∏–π',
        '–í—ã—Å–æ–∫–∏–π': 'üî¥ –í—ã—Å–æ–∫–∏–π',
        '–°—Ä–µ–¥–Ω–∏–π': 'üü° –°—Ä–µ–¥–Ω–∏–π',
        '–ù–∏–∑–∫–∏–π': 'üü¢ –ù–∏–∑–∫–∏–π'
    };

    return priorities[priority] || 'üü° –°—Ä–µ–¥–Ω–∏–π';
}

function getStatusText(status) {
    const statuses = {
        'new': 'üîµ –ù–æ–≤–∞—è',
        'in-progress': 'üü° –í —Ä–∞–±–æ—Ç–µ',
        'completed': 'üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∞',
        '–ù–æ–≤–∞—è': 'üîµ –ù–æ–≤–∞—è',
        '–í —Ä–∞–±–æ—Ç–µ': 'üü° –í —Ä–∞–±–æ—Ç–µ',
        '–í—ã–ø–æ–ª–Ω–µ–Ω–∞': 'üü¢ –í—ã–ø–æ–ª–Ω–µ–Ω–∞'
    };

    return statuses[status] || 'üîµ –ù–æ–≤–∞—è';
}

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
document.addEventListener('DOMContentLoaded', function() {
    console.log('üéØ task-detail-modal.js: DOMContentLoaded');

    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (!document.getElementById('taskDetailModal')) {
        console.log('üì¶ –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ');
        createTaskDetailModal();
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á
    setTimeout(() => {
        addTaskClickHandlers();
    }, 1000);

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    setTimeout(() => {
        console.log('üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ window.showTaskDetails:', typeof window.showTaskDetails);
        if (typeof window.showTaskDetails !== 'function') {
            console.error('‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: window.showTaskDetails –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π!');
        } else {
            console.log('‚úÖ‚úÖ‚úÖ window.showTaskDetails –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
        }
    }, 2000);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–ª–∏–∫–∞ –Ω–∞ –∑–∞–¥–∞—á–∏
function addTaskClickHandlers() {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á
    const taskCards = document.querySelectorAll('.task-card');

    taskCards.forEach(card => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if (!card.hasAttribute('data-clickable')) {
            card.setAttribute('data-clickable', 'true');
            card.style.cursor = 'pointer';

            card.addEventListener('click', function(e) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
                if (!e.target.closest('button')) {
                    const taskId = this.dataset.taskId;
                    if (taskId) {
                        showTaskDetails(taskId);
                    }
                }
            });
        }
    });
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∑–∞–¥–∞—á –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è data-task-id
const originalRenderTask = window.renderTask;
if (originalRenderTask) {
    window.renderTask = function(task) {
        const result = originalRenderTask.call(this, task);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        setTimeout(addTaskClickHandlers, 100);

        return result;
    };
}

console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 500–º—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
setInterval(function() {
    if (typeof window.showTaskDetails !== 'function') {
        console.warn('‚ö†Ô∏è showTaskDetails –±—ã–ª–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
        registerTaskDetailFunctions();
    }
}, 500);

// –¢–∞–∫–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', registerTaskDetailFunctions);
} else {
    registerTaskDetailFunctions();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
function registerTaskDetailFunctions() {
    console.log('üîÑ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∑–∞–¥–∞—á...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if (typeof window.showTaskDetails === 'function') {
        console.log('‚úÖ showTaskDetails —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞');
    } else {
        console.log('‚ùå showTaskDetails –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
    }
}