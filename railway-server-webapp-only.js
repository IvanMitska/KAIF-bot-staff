require('dotenv').config();
const express = require('express');
const path = require('path');
const { spawn } = require('child_process');

const app = express();
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const requiredEnvVars = [
  'TELEGRAM_BOT_TOKEN',
  'NOTION_API_KEY',
  'NOTION_DATABASE_REPORTS_ID',
  'NOTION_DATABASE_USERS_ID',
  'NOTION_DATABASE_TASKS_ID',
  'NOTION_DATABASE_ATTENDANCE_ID'
];

const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);
if (missingVars.length > 0) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', missingVars.join(', '));
  console.error('–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ Railway dashboard ‚Üí Variables');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ
async function sendPhotoRequest(bot, userId, taskTitle) {
  try {
    await bot.sendMessage(userId, 
      `‚úÖ –ó–∞–¥–∞—á–∞ "${taskTitle}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!\n\n` +
      `üì∏ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã.\n` +
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [[
            {
              text: '‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å',
              callback_data: 'skip_photo'
            }
          ]]
        }
      }
    );
    
    console.log('Photo request sent to user:', userId);
  } catch (error) {
    console.error('Error sending photo request:', error);
  }
}

// Middleware
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// CORS –¥–ª—è Web App
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type, X-Telegram-Init-Data');
  
  if (req.method === 'OPTIONS') {
    return res.sendStatus(200);
  }
  
  next();
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è Web App
app.use('/webapp/public', express.static(path.join(__dirname, 'webapp/public')));

// API endpoints
const notionService = require('./src/services/notionService');
const userService = require('./src/services/userService');

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function authMiddleware(req, res, next) {
  const initData = req.headers['x-telegram-init-data'];
  
  console.log('Auth middleware - initData present:', !!initData);
  console.log('Auth middleware - headers:', Object.keys(req.headers));
  
  if (!initData) {
    console.error('No initData in headers');
    return res.status(401).json({ error: 'Unauthorized - No initData' });
  }
  
  try {
    const parsedData = new URLSearchParams(initData);
    const userString = parsedData.get('user');
    
    console.log('Parsed user string:', userString ? 'Found' : 'Not found');
    
    if (!userString) {
      console.error('No user data in initData');
      return res.status(401).json({ error: 'User data not found in initData' });
    }
    
    req.telegramUser = JSON.parse(userString);
    console.log('User authenticated:', req.telegramUser.id, req.telegramUser.first_name);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
    const existingUser = await userService.getUserByTelegramId(req.telegramUser.id);
    if (!existingUser && req.body.autoRegister) {
      await userService.createUser({
        telegramId: req.telegramUser.id,
        username: req.telegramUser.username || '',
        name: req.body.name || `${req.telegramUser.first_name} ${req.telegramUser.last_name || ''}`.trim(),
        position: req.body.position || '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
      });
    }
    
    next();
  } catch (error) {
    console.error('Auth middleware error:', error);
    return res.status(401).json({ error: 'Invalid user data: ' + error.message });
  }
}

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/profile', authMiddleware, async (req, res) => {
  try {
    const user = await userService.getUserByTelegramId(req.telegramUser.id);
    res.json(user || { needsRegistration: true });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.post('/api/register', authMiddleware, async (req, res) => {
  try {
    const userData = {
      telegramId: req.telegramUser.id,
      username: req.telegramUser.username || '',
      name: req.body.name,
      position: req.body.position
    };
    
    const user = await userService.createUser(userData);
    res.json({ success: true, user });
  } catch (error) {
    res.status(500).json({ error: 'Registration failed' });
  }
});

app.get('/api/reports/today-status', authMiddleware, async (req, res) => {
  try {
    const todayReport = await notionService.getTodayReport(req.telegramUser.id);
    res.json({ reportSent: !!todayReport });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

app.post('/api/reports', authMiddleware, async (req, res) => {
  try {
    let user = await userService.getUserByTelegramId(req.telegramUser.id);
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if (!user) {
      console.log(`User ${req.telegramUser.id} not found, creating automatically`);
      
      const newUserData = {
        telegramId: req.telegramUser.id,
        username: req.telegramUser.username || '',
        name: `${req.telegramUser.first_name} ${req.telegramUser.last_name || ''}`.trim(),
        position: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'
      };
      
      try {
        user = await userService.createUser(newUserData);
        console.log(`User ${req.telegramUser.id} created successfully`);
      } catch (createError) {
        console.error('Error creating user:', createError);
        return res.status(500).json({ error: 'Failed to create user profile' });
      }
    }
    
    const reportData = {
      date: new Date().toISOString().split('T')[0],
      employeeName: user.name,
      telegramId: req.telegramUser.id,
      whatDone: req.body.whatDone,
      problems: req.body.problems || '–ù–µ—Ç',
      goals: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      timestamp: new Date().toISOString(),
      status: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    };
    
    console.log('Creating report:', {
      userId: req.telegramUser.id,
      userName: user.name,
      date: reportData.date
    });
    
    await notionService.createReport(reportData);
    console.log('Report created successfully for user:', user.name);
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error creating report:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

app.get('/api/tasks/my', authMiddleware, async (req, res) => {
  try {
    console.log('Getting tasks for user:', req.telegramUser.id, 'type:', typeof req.telegramUser.id);
    console.log('User details:', {
      id: req.telegramUser.id,
      first_name: req.telegramUser.first_name,
      username: req.telegramUser.username
    });
    
    const tasks = await notionService.getTasksByAssignee(req.telegramUser.id);
    console.log('Found tasks:', tasks.length);
    
    if (tasks.length > 0) {
      console.log('First task:', {
        title: tasks[0].title,
        status: tasks[0].status,
        assigneeId: tasks[0].assigneeId
      });
    }
    
    res.json(tasks);
  } catch (error) {
    console.error('Error getting tasks:', error);
    res.status(500).json({ error: 'Server error: ' + error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –º–Ω–æ–π (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/tasks/created', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Forbidden' });
    }
    
    console.log('Getting created tasks for manager:', req.telegramUser.id);
    
    const tasks = await notionService.getTasksByCreator(req.telegramUser.id);
    console.log('Found created tasks:', tasks.length);
    
    res.json(tasks);
  } catch (error) {
    console.error('Error getting created tasks:', error);
    res.status(500).json({ error: 'Server error: ' + error.message });
  }
});

app.post('/api/tasks/:taskId/complete', authMiddleware, async (req, res) => {
  try {
    await notionService.completeTask(req.params.taskId);
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.put('/api/tasks/:taskId', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Forbidden' });
    }
    
    const { title, description, deadline, priority, assigneeId } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ
    const assignee = await userService.getUserByTelegramId(assigneeId);
    if (!assignee) {
      return res.status(404).json({ error: 'Assignee not found' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
    await notionService.updateTask(req.params.taskId, {
      title,
      description,
      deadline,
      priority,
      assigneeId,
      assigneeName: assignee.name
    });
    
    console.log(`Task ${req.params.taskId} updated by manager ${req.telegramUser.id}`);
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error updating task:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
app.put('/api/tasks/:taskId/status', authMiddleware, async (req, res) => {
  try {
    const { status } = req.body;
    const validStatuses = ['–ù–æ–≤–∞—è', '–í —Ä–∞–±–æ—Ç–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'];
    
    if (!validStatuses.includes(status)) {
      return res.status(400).json({ error: 'Invalid status' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    const tasks = await notionService.getTasksByAssignee(req.telegramUser.id);
    const task = tasks.find(t => t.id === req.params.taskId);
    
    if (!task) {
      return res.status(404).json({ error: 'Task not found or access denied' });
    }
    
    console.log('Task details for notification:', {
      taskId: task.id,
      title: task.title,
      creatorId: task.creatorId,
      creatorName: task.creatorName,
      currentUserId: req.telegramUser.id,
      willSendNotification: task.creatorId && task.creatorId !== req.telegramUser.id
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    await notionService.updateTaskStatus(req.params.taskId, status);
    
    console.log(`Task ${req.params.taskId} status updated to ${status} by user ${req.telegramUser.id}`);
    
    // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ
    if (status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞') {
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
        const pendingPhotos = global.pendingTaskPhotos || new Map();
        pendingPhotos.set(req.telegramUser.id, {
          taskId: req.params.taskId,
          taskTitle: task.title,
          timestamp: Date.now(),
          needsPhotoRequest: true
        });
        global.pendingTaskPhotos = pendingPhotos;
        
        console.log('Task marked for photo request:', req.telegramUser.id);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤ –æ—Ç–≤–µ—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ç–æ
        res.json({ 
          success: true, 
          requestPhoto: true,
          taskTitle: task.title 
        });
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–æ—Ç
        setTimeout(() => {
          if (global.botInstance) {
            sendPhotoRequest(global.botInstance, req.telegramUser.id, task.title);
          }
        }, 1000);
        
        return; // –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å res.json –¥–≤–∞–∂–¥—ã
      } catch (photoError) {
        console.error('Failed to setup photo request:', photoError);
      }
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é –∑–∞–¥–∞—á–∏
    if (task.creatorId && task.creatorId !== req.telegramUser.id) {
      try {
        const executor = await userService.getUserByTelegramId(req.telegramUser.id);
        const TelegramBot = require('node-telegram-bot-api');
        const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
        
        let message = '';
        
        if (status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞') {
          message = `‚úÖ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n` +
                   `üìã *–ó–∞–¥–∞—á–∞:* ${task.title}\n` +
                   `üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ${executor?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n` +
                   `üìÖ *–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* ${new Date().toLocaleDateString('ru-RU')}\n\n` +
                   `–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã! üéâ`;
        } else if (status === '–í —Ä–∞–±–æ—Ç–µ') {
          message = `üöÄ *–ó–∞–¥–∞—á–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!*\n\n` +
                   `üìã *–ó–∞–¥–∞—á–∞:* ${task.title}\n` +
                   `üë§ *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* ${executor?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n` +
                   `üìÖ *–î–∞—Ç–∞:* ${new Date().toLocaleDateString('ru-RU')}\n\n` +
                   `–†–∞–±–æ—Ç–∞ –Ω–∞—á–∞–ª–∞—Å—å! üí™`;
        }
        
        if (message) {
          await bot.sendMessage(task.creatorId, message, {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [[
                {
                  text: 'üì± –û—Ç–∫—Ä—ã—Ç—å KAIF App',
                  web_app: { 
                    url: `https://${process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public` 
                  }
                }
              ]]
            }
          });
          
          console.log('Status notification sent to task creator');
        }
      } catch (notificationError) {
        console.error('Failed to send status notification:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      }
    }
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error updating task status:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

app.get('/api/stats', authMiddleware, async (req, res) => {
  try {
    const reports = await notionService.getUserReports(req.telegramUser.id, 30);
    const tasks = await notionService.getTasksByAssignee(req.telegramUser.id);
    
    res.json({
      totalReports: reports.length,
      completedTasks: tasks.filter(t => t.status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length,
      activeTasks: tasks.filter(t => t.status === '–í —Ä–∞–±–æ—Ç–µ').length,
      currentStreak: 0,
      completionRate: reports.length > 0 ? Math.round((reports.filter(r => r.status === '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω').length / reports.length) * 100) : 0
    });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/employees', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Forbidden' });
    }
    
    const employees = await notionService.getAllActiveUsers();
    res.json(employees);
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
app.post('/api/tasks', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    const isManager = MANAGER_IDS.includes(req.telegramUser.id);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ
    if (!isManager && req.body.assigneeId !== req.telegramUser.id) {
      return res.status(403).json({ error: '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–±—è' });
    }
    
    const creator = await userService.getUserByTelegramId(req.telegramUser.id);
    const assignee = await userService.getUserByTelegramId(req.body.assigneeId);
    
    console.log('Creating task:', {
      creatorId: req.telegramUser.id,
      assigneeId: req.body.assigneeId,
      isManager: isManager,
      isSelfTask: req.telegramUser.id === req.body.assigneeId,
      assignee: assignee ? { name: assignee.name, telegramId: assignee.telegramId } : null
    });
    
    if (!creator || !assignee) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    const taskData = {
      title: req.body.title,
      description: req.body.description || '',
      assigneeId: assignee.telegramId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegramId –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      assigneeName: assignee.name,
      creatorId: req.telegramUser.id,
      creatorName: creator.name,
      status: '–ù–æ–≤–∞—è',
      priority: req.body.priority || 'medium',
      deadline: req.body.deadline || null,
      createdAt: new Date().toISOString()
    };
    
    const taskId = await notionService.createTask(taskData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –ù–ï –¥–ª—è —Å–µ–±—è
    const isSelfTask = req.telegramUser.id === req.body.assigneeId;
    
    if (!isSelfTask) {
      try {
        const TelegramBot = require('node-telegram-bot-api');
        const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
        
        const message = `üÜï *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –æ—Ç ${creator.name}*\n\n` +
                       `üìã *–ó–∞–¥–∞—á–∞:* ${taskData.title}\n` +
                       (taskData.description ? `üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${taskData.description}\n` : '') +
                       `üìÖ *–°—Ä–æ–∫:* ${taskData.deadline ? new Date(taskData.deadline).toLocaleDateString('ru-RU') : '–ë–µ–∑ —Å—Ä–æ–∫–∞'}\n` +
                       `üî• *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* ${taskData.priority === 'high' ? 'üî¥ –í—ã—Å–æ–∫–∏–π' : taskData.priority === 'medium' ? 'üü° –°—Ä–µ–¥–Ω–∏–π' : 'üü¢ –ù–∏–∑–∫–∏–π'}\n\n` +
                       `–û—Ç–∫—Ä–æ–π—Ç–µ KAIF App –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π`;
        
        console.log('Sending notification to assignee:', {
          assigneeId: assignee.telegramId,
          assigneeName: assignee.name,
          taskTitle: taskData.title
        });
        
        await bot.sendMessage(assignee.telegramId, message, {
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [[
              {
                text: 'üì± –û—Ç–∫—Ä—ã—Ç—å KAIF App',
                web_app: { 
                  url: `https://${process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public` 
                }
              }
            ]]
          }
        });
        
        console.log('Notification sent successfully to assignee:', assignee.name);
      } catch (notificationError) {
        console.error('Failed to send notification:', notificationError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      }
    } else {
      console.log('Self-task created, no notification sent');
    }
    
    res.json({ success: true, taskId });
  } catch (error) {
    res.status(500).json({ error: 'Server error' });
  }
});

// Dashboard —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/admin/dashboard/stats', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Forbidden' });
    }
    
    const today = new Date().toISOString().split('T')[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    const allTasks = await notionService.getAllTasks();
    const activeTasks = allTasks.filter(t => t.status !== '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length;
    const completedToday = allTasks.filter(t => 
      t.status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞' && 
      t.completedDate && 
      t.completedDate.split('T')[0] === today
    ).length;
    
    // –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á
    const tasksStatus = {
      new: allTasks.filter(t => t.status === '–ù–æ–≤–∞—è').length,
      inProgress: allTasks.filter(t => t.status === '–í —Ä–∞–±–æ—Ç–µ').length,
      completed: allTasks.filter(t => t.status === '–í—ã–ø–æ–ª–Ω–µ–Ω–∞').length
    };
    
    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é
    const weekActivity = [];
    for (let i = 6; i >= 0; i--) {
      const date = new Date();
      date.setDate(date.getDate() - i);
      const dateStr = date.toISOString().split('T')[0];
      
      const reports = await notionService.getReportsForPeriod(dateStr, dateStr);
      weekActivity.push({
        date: dateStr,
        count: reports.length
      });
    }
    
    // –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü
    const monthStart = new Date();
    monthStart.setDate(1);
    const monthReports = await notionService.getReportsForPeriod(
      monthStart.toISOString().split('T')[0],
      today
    );
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    const employeeReports = {};
    monthReports.forEach(report => {
      if (!employeeReports[report.employeeName]) {
        employeeReports[report.employeeName] = 0;
      }
      employeeReports[report.employeeName]++;
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-5
    const topEmployees = Object.entries(employeeReports)
      .map(([name, count]) => ({ name, reportsCount: count }))
      .sort((a, b) => b.reportsCount - a.reportsCount)
      .slice(0, 5);
    
    res.json({
      activeTasks,
      completedToday,
      tasksStatus,
      weekActivity,
      topEmployees
    });
    
  } catch (error) {
    console.error('Error getting dashboard stats:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.post('/api/admin/send-reminder', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Forbidden' });
    }
    
    const { employeeId } = req.body;
    
    const TelegramBot = require('node-telegram-bot-api');
    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
    
    const message = `‚ö†Ô∏è *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞*\n\n` +
                   `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n` +
                   `–û—Ç–∫—Ä–æ–π—Ç–µ KAIF App –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞.`;
    
    await bot.sendMessage(employeeId, message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [[
          {
            text: 'üì± –û—Ç–∫—Ä—ã—Ç—å KAIF App',
            web_app: { 
              url: `https://${process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PUBLIC_DOMAIN}/webapp/public` 
            }
          }
        ]]
      }
    });
    
    res.json({ success: true });
    
  } catch (error) {
    console.error('Error sending reminder:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/admin/reports', authMiddleware, async (req, res) => {
  try {
    const MANAGER_IDS = [385436658, 1734337242];
    
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Forbidden' });
    }
    
    const { startDate, endDate, employeeId } = req.query;
    
    console.log('Admin reports request:', { startDate, endDate, employeeId });
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
    const reports = await notionService.getReportsForPeriod(startDate, endDate, employeeId);
    
    // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const today = new Date().toISOString().split('T')[0];
    const todayReports = reports.filter(r => r.date === today).length;
    
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
    const completedTasks = await notionService.getAllTasks('–í—ã–ø–æ–ª–Ω–µ–Ω–∞');
    const tasksInPeriod = completedTasks.filter(task => {
      if (!task.completedDate) return false;
      const taskDate = task.completedDate.split('T')[0];
      return taskDate >= startDate && taskDate <= endDate;
    });
    
    res.json({
      reports,
      totalReports: reports.length,
      todayReports,
      completedTasks: tasksInPeriod.length
    });
    
  } catch (error) {
    console.error('Error getting admin reports:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
app.get('/api/attendance/today', authMiddleware, async (req, res) => {
  try {
    const attendance = await notionService.getTodayAttendance(req.telegramUser.id);
    res.json(attendance);
  } catch (error) {
    console.error('Error getting today attendance:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–∏—Ö–æ–¥
app.post('/api/attendance/check-in', authMiddleware, async (req, res) => {
  try {
    const user = await userService.getUserByTelegramId(req.telegramUser.id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–º–µ—á–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–∏—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è
    const existingAttendance = await notionService.getTodayAttendance(req.telegramUser.id);
    if (existingAttendance && existingAttendance.checkIn) {
      return res.status(400).json({ error: 'Already checked in today' });
    }
    
    const attendanceData = {
      employeeName: user.name,
      employeeId: req.telegramUser.id,
      date: new Date().toISOString().split('T')[0],
      checkIn: new Date().toISOString(),
      status: '–ù–∞ —Ä–∞–±–æ—Ç–µ',
      late: new Date().getHours() >= 9 // –û–ø–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ 9:00
    };
    
    await notionService.createAttendance(attendanceData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    const MANAGER_IDS = [385436658, 1734337242];
    const TelegramBot = require('node-telegram-bot-api');
    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
    
    const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const message = `üü¢ *${user.name}* –ø—Ä–∏—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É\n‚è∞ –í—Ä–µ–º—è: ${time}${attendanceData.late ? '\n‚ö†Ô∏è –û–ø–æ–∑–¥–∞–Ω–∏–µ!' : ''}`;
    
    for (const managerId of MANAGER_IDS) {
      try {
        await bot.sendMessage(managerId, message, { parse_mode: 'Markdown' });
      } catch (notifError) {
        console.error('Failed to notify manager:', managerId, notifError);
      }
    }
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error checking in:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –û—Ç–º–µ—Ç–∏—Ç—å —É—Ö–æ–¥
app.post('/api/attendance/check-out', authMiddleware, async (req, res) => {
  try {
    const attendance = await notionService.getTodayAttendance(req.telegramUser.id);
    if (!attendance) {
      return res.status(400).json({ error: 'Not checked in today' });
    }
    
    if (attendance.checkOut) {
      return res.status(400).json({ error: 'Already checked out today' });
    }
    
    const checkOut = new Date().toISOString();
    const workHours = await notionService.updateAttendanceCheckOut(attendance.id, checkOut);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    const user = await userService.getUserByTelegramId(req.telegramUser.id);
    const MANAGER_IDS = [385436658, 1734337242];
    const TelegramBot = require('node-telegram-bot-api');
    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN);
    
    const time = new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const message = `üî¥ *${user.name}* —É—à–µ–ª —Å —Ä–∞–±–æ—Ç—ã\n‚è∞ –í—Ä–µ–º—è: ${time}\n‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: ${workHours} —á–∞—Å–æ–≤`;
    
    for (const managerId of MANAGER_IDS) {
      try {
        await bot.sendMessage(managerId, message, { parse_mode: 'Markdown' });
      } catch (notifError) {
        console.error('Failed to notify manager:', managerId, notifError);
      }
    }
    
    res.json({ success: true, workHours });
  } catch (error) {
    console.error('Error checking out:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/admin/attendance/current', authMiddleware, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const MANAGER_IDS = [385436658, 1734337242];
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    const currentStatus = await notionService.getCurrentAttendanceStatus();
    res.json(currentStatus);
  } catch (error) {
    console.error('Error getting attendance status:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)
app.get('/api/admin/attendance/history', authMiddleware, async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    const MANAGER_IDS = [385436658, 1734337242];
    if (!MANAGER_IDS.includes(req.telegramUser.id)) {
      return res.status(403).json({ error: 'Access denied' });
    }
    
    const { startDate, endDate, employeeId } = req.query;
    
    if (!startDate || !endDate) {
      return res.status(400).json({ error: 'Start date and end date are required' });
    }
    
    const attendanceHistory = await notionService.getAttendanceForPeriod(
      startDate, 
      endDate, 
      employeeId || null
    );
    
    res.json(attendanceHistory);
  } catch (error) {
    console.error('Error getting attendance history:', error);
    res.status(500).json({ error: 'Server error' });
  }
});

// –í—Ä–µ–º–µ–Ω–Ω—ã–π endpoint –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–¥–∞—á
app.get('/api/debug/tasks', authMiddleware, async (req, res) => {
  try {
    const allTasks = await notionService.debugGetAllTasks();
    const userTasks = await notionService.getTasksByAssignee(req.telegramUser.id);
    
    res.json({
      currentUserId: req.telegramUser.id,
      totalTasksInDB: allTasks.length,
      userTasksFound: userTasks.length,
      debug: 'Check server logs for detailed output'
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  const publicUrl = process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PUBLIC_DOMAIN || 'localhost';
  const webappUrl = `https://${publicUrl}/webapp/public`;
  
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>KAIF Bot - Web App Only</title>
      <style>
        body { font-family: Arial, sans-serif; padding: 40px; background: #f5f5f5; }
        .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
        h1 { color: #333; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .success { background: #d4edda; color: #155724; }
        .info { background: #d1ecf1; color: #0c5460; }
        a { color: #007bff; text-decoration: none; }
        code { background: #f0f0f0; padding: 2px 5px; border-radius: 3px; }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üöÄ KAIF Bot - Web App Only Mode</h1>
        
        ${missingVars.length > 0 ? `
          <div class="status info">
            <h3>‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è</h3>
            <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway ‚Üí Variables:</p>
            <ul>${missingVars.map(v => `<li><code>${v}</code></li>`).join('')}</ul>
          </div>
        ` : `
          <div class="status success">
            <h3>‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!</h3>
          </div>
        `}
        
        <div class="status info">
          <h3>üì± Web App Mode</h3>
          <p>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Web App</p>
          <p>URL: <code>${webappUrl}</code></p>
        </div>
        
        <h2>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</h2>
        <ol>
          <li>–û—Ç–∫—Ä–æ–π—Ç–µ Telegram</li>
          <li>–ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @Report_KAIF_bot</li>
          <li>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start</li>
          <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å KAIF App"</li>
        </ol>
      </div>
    </body>
    </html>
  `);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –µ—Å—Ç—å
if (missingVars.length === 0) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ—Ç
  const { spawn } = require('child_process');
  const botProcess = spawn('node', ['src/bot-minimal.js'], {
    stdio: 'inherit',
    env: process.env
  });
  
  botProcess.on('error', (err) => {
    console.error('Failed to start bot:', err);
  });
  
  botProcess.on('exit', (code) => {
    console.log(`Bot process exited with code ${code}`);
    if (code !== 0) {
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setTimeout(() => {
        console.log('Restarting bot...');
        spawn('node', ['src/bot-minimal.js'], {
          stdio: 'inherit',
          env: process.env
        });
      }, 5000);
    }
  });
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  const publicUrl = process.env.RAILWAY_STATIC_URL || process.env.RAILWAY_PUBLIC_DOMAIN || 'your-railway-domain';
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üì± Web App Only Mode –∞–∫—Ç–∏–≤–µ–Ω`);
  console.log(`üåê Web App URL: https://${publicUrl}/webapp/public`);
  console.log(`üîó Railway Domain: ${publicUrl}`);
});