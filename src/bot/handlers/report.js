const notionService = require('../../services/notionService');
const userService = require('../../services/userService');
const keyboards = require('../keyboards/inline');
const moment = require('moment-timezone');
const security = require('../../utils/security');

const reportSessions = new Map();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessageInput(bot, msg) {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (msg.text && msg.text.startsWith('/')) {
    return;
  }
  
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  if (reportSessions.has(userId)) {
    const session = reportSessions.get(userId);
    if (session.waitingForInput) {
      await handleReportInput(bot, chatId, userId, msg.text);
    }
  }
}

module.exports = (bot) => {
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const userId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (data === 'send_report') {
      await startReportSession(bot, chatId, userId);
    } else if (data.startsWith('report_')) {
      await handleReportFlow(bot, chatId, userId, data, callbackQuery.message.message_id);
    } else if (data.startsWith('edit_')) {
      await handleReportEdit(bot, chatId, userId, data, callbackQuery.message.message_id);
    }

    bot.answerCallbackQuery(callbackQuery.id);
  });

  // –ù–ï —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–¥–µ—Å—å
  // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
};

async function startReportSession(bot, chatId, userId) {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (!security.isUserAuthorized(userId)) {
      bot.sendMessage(chatId, 'üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.');
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    const rateLimit = security.checkRateLimit(userId, 'report', 3, 3600000); // 3 –æ—Ç—á–µ—Ç–∞ –≤ —á–∞—Å
    if (!rateLimit.allowed) {
      bot.sendMessage(chatId, 
        `‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ${rateLimit.resetIn} —Å–µ–∫—É–Ω–¥.`
      );
      return;
    }
    
    const user = await userService.getUserByTelegramId(userId);
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start');
      return;
    }

    const todayReport = await notionService.getTodayReport(userId);
    if (todayReport) {
      bot.sendMessage(chatId, 
        'üìã –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n' +
        '–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç—á–µ—Ç–æ–≤?',
        { reply_markup: keyboards.mainMenu() }
      );
      return;
    }

    reportSessions.set(userId, {
      step: 1,
      data: {
        whatDone: '',
        problems: '',
        goals: '',
        employeeName: user.name
      },
      waitingForInput: true,
      currentField: 'whatDone'
    });

    bot.sendMessage(chatId,
      'üìù *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n' +
      '*–®–∞–≥ 1 –∏–∑ 3:* –ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?\n\n' +
      '_–û–ø–∏—à–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É_',
      {
        parse_mode: 'Markdown',
        reply_markup: keyboards.reportStepNavigation(1, false)
      }
    );
  } catch (error) {
    console.error('Start report session error:', error);
    bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleReportInput(bot, chatId, userId, text) {
  const session = reportSessions.get(userId);
  if (!session) return;

  session.data[session.currentField] = text;
  session.waitingForInput = false;

  const messageId = await getLastBotMessageId(bot, chatId);
  if (messageId) {
    await handleReportFlow(bot, chatId, userId, 'report_next', messageId);
  }
}

async function handleReportFlow(bot, chatId, userId, action, messageId) {
  const session = reportSessions.get(userId);
  if (!session) return;

  switch (action) {
    case 'report_next':
      if (session.step === 1) {
        if (!session.data.whatDone) {
          bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è.');
          return;
        }
        session.step = 2;
        session.currentField = 'problems';
        session.waitingForInput = true;
        
        bot.editMessageText(
          'üìù *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n' +
          '*–®–∞–≥ 2 –∏–∑ 3:* –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–æ–∑–Ω–∏–∫–ª–∏?\n\n' +
          '_–û–ø–∏—à–∏—Ç–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç", –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º –Ω–µ –±—ã–ª–æ)_',
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboards.reportStepNavigation(2)
          }
        );
      } else if (session.step === 2) {
        if (!session.data.problems) {
          bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç".');
          return;
        }
        session.step = 3;
        session.currentField = 'goals';
        session.waitingForInput = true;
        
        bot.editMessageText(
          'üìù *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n' +
          '*–®–∞–≥ 3 –∏–∑ 3:* –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞?\n\n' +
          '_–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–≤—Ç—Ä–∞_',
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboards.reportStepNavigation(3)
          }
        );
      } else if (session.step === 3) {
        if (!session.data.goals) {
          bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.');
          return;
        }
        await showReportPreview(bot, chatId, userId, messageId);
      }
      break;

    case 'report_back':
      if (session.step === 2) {
        session.step = 1;
        session.currentField = 'whatDone';
        session.waitingForInput = true;
        
        bot.editMessageText(
          'üìù *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n' +
          '*–®–∞–≥ 1 –∏–∑ 3:* –ß—Ç–æ –≤—ã —Å–¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?\n\n' +
          `_–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: ${session.data.whatDone}_`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboards.reportStepNavigation(1, false)
          }
        );
      } else if (session.step === 3) {
        session.step = 2;
        session.currentField = 'problems';
        session.waitingForInput = true;
        
        bot.editMessageText(
          'üìù *–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n' +
          '*–®–∞–≥ 2 –∏–∑ 3:* –ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–æ–∑–Ω–∏–∫–ª–∏?\n\n' +
          `_–¢–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç: ${session.data.problems}_`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: keyboards.reportStepNavigation(2)
          }
        );
      }
      break;

    case 'report_cancel':
      reportSessions.delete(userId);
      bot.editMessageText(
        '‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        {
          chat_id: chatId,
          message_id: messageId,
          reply_markup: keyboards.mainMenu()
        }
      );
      break;

    case 'report_preview':
      await showReportPreview(bot, chatId, userId, messageId);
      break;

    case 'report_edit':
      bot.editMessageText(
        '‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:*',
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: keyboards.reportEditMenu()
        }
      );
      break;

    case 'report_confirm':
      await submitReport(bot, chatId, userId, messageId);
      break;
  }
}

async function showReportPreview(bot, chatId, userId, messageId) {
  const session = reportSessions.get(userId);
  if (!session) return;

  const preview = 
    'üìã *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞*\n\n' +
    `*–î–∞—Ç–∞:* ${moment().tz('Asia/Bangkok').format('DD.MM.YYYY')}\n\n` +
    `*–ß—Ç–æ —Å–¥–µ–ª–∞–ª:*\n${session.data.whatDone}\n\n` +
    `*–ü—Ä–æ–±–ª–µ–º—ã:*\n${session.data.problems}\n\n` +
    `*–¶–µ–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:*\n${session.data.goals}`;

  bot.editMessageText(preview, {
    chat_id: chatId,
    message_id: messageId,
    parse_mode: 'Markdown',
    reply_markup: keyboards.reportConfirmation()
  });
}

async function handleReportEdit(bot, chatId, userId, action, messageId) {
  const session = reportSessions.get(userId);
  if (!session) return;

  const fieldMap = {
    'edit_done': { field: 'whatDone', title: '–ß—Ç–æ —Å–¥–µ–ª–∞–ª', step: 1 },
    'edit_problems': { field: 'problems', title: '–ü—Ä–æ–±–ª–µ–º—ã', step: 2 },
    'edit_goals': { field: 'goals', title: '–¶–µ–ª–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', step: 3 }
  };

  const editInfo = fieldMap[action];
  if (editInfo) {
    session.currentField = editInfo.field;
    session.waitingForInput = true;
    session.step = editInfo.step;

    bot.editMessageText(
      `‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${editInfo.title}*\n\n` +
      `–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n_${session.data[editInfo.field]}_\n\n` +
      '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown'
      }
    );
  }
}

async function submitReport(bot, chatId, userId, messageId) {
  const session = reportSessions.get(userId);
  if (!session) return;

  try {
    const bangkokTime = moment().tz('Asia/Bangkok');
    
    const reportData = {
      date: bangkokTime.format('YYYY-MM-DD'),
      employeeName: session.data.employeeName,
      telegramId: userId,
      whatDone: session.data.whatDone,
      problems: session.data.problems,
      goals: session.data.goals,
      timestamp: bangkokTime.toISOString(),
      status: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    };

    await notionService.createReport(reportData);
    
    reportSessions.delete(userId);

    bot.editMessageText(
      '‚úÖ *–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\n\n' +
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É —Å–µ–≥–æ–¥–Ω—è! üëç',
      {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: keyboards.mainMenu()
      }
    );
  } catch (error) {
    console.error('Submit report error:', error);
    bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function getLastBotMessageId(bot, chatId) {
  return null;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleMessageInput
module.exports.handleMessageInput = handleMessageInput;