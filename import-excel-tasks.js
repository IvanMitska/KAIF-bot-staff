const { Pool } = require('pg');
const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

// –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –∏—Ö ID
const employeeMapping = {
    'Iurii Bugatti': '907672555',
    'Test User': '1515429',
    '–ê–ª—è': '642664990',
    '–ë–æ—Ä–∏—Å': '385436658',
    '–î–º–∏—Ç—Ä–∏–π': '5937587032',
    '–ï–ª–µ–Ω–∞': '726915228',
    '–ò–≤–∞–Ω': '1734337242',
    '–ò–≥–æ—Ä—å': '321654987',
    '–ö—Å–µ–Ω–∏—è': '1151085087',
    '–ú–∞–∫—Å–∏–º': '303267717'
};

async function checkDuplicateTask(title, assigneeId) {
    const result = await pool.query(`
        SELECT COUNT(*) as count
        FROM tasks
        WHERE LOWER(title) = LOWER($1)
        AND assignee_id = $2
    `, [title, assigneeId]);

    return result.rows[0].count > 0;
}

async function importExcelTasks(excelFilePath) {
    console.log('üìù –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ Excel —Ñ–∞–π–ª–∞...\n');

    try {
        // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
        const workbook = XLSX.readFile(excelFilePath);
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (jsonData.length < 2) {
            throw new Error('–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
        }

        // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        const headers = jsonData[0].map(h => h ? h.toString().trim() : '');
        console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:', headers);

        // –ò—â–µ–º –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ (–º–æ–≥—É—Ç –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
        const titleIndex = headers.findIndex(h =>
            h.toLowerCase().includes('–∑–∞–¥–∞—á') ||
            h.toLowerCase().includes('title') ||
            h.toLowerCase().includes('–Ω–∞–∑–≤–∞–Ω–∏–µ')
        );

        const descIndex = headers.findIndex(h =>
            h.toLowerCase().includes('–æ–ø–∏—Å–∞–Ω–∏–µ') ||
            h.toLowerCase().includes('description')
        );

        const assigneeIndex = headers.findIndex(h =>
            h.toLowerCase().includes('–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å') ||
            h.toLowerCase().includes('—Å–æ—Ç—Ä—É–¥–Ω–∏–∫') ||
            h.toLowerCase().includes('assignee') ||
            h.toLowerCase().includes('–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π')
        );

        const priorityIndex = headers.findIndex(h =>
            h.toLowerCase().includes('–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç') ||
            h.toLowerCase().includes('priority')
        );

        const statusIndex = headers.findIndex(h =>
            h.toLowerCase().includes('—Å—Ç–∞—Ç—É—Å') ||
            h.toLowerCase().includes('status')
        );

        if (titleIndex === -1) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞—á');
        }

        if (assigneeIndex === -1) {
            throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏');
        }

        console.log('\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...\n');

        let successCount = 0;
        let duplicateCount = 0;
        let errorCount = 0;
        const errors = [];

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É (–Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π)
        for (let i = 1; i < jsonData.length; i++) {
            const row = jsonData[i];

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if (!row || row.length === 0 || !row[titleIndex]) {
                continue;
            }

            const title = row[titleIndex] ? row[titleIndex].toString().trim() : '';
            const description = descIndex !== -1 && row[descIndex] ? row[descIndex].toString().trim() : '';
            const assigneeName = row[assigneeIndex] ? row[assigneeIndex].toString().trim() : '';
            const priority = priorityIndex !== -1 && row[priorityIndex] ? row[priorityIndex].toString().trim() : '–°—Ä–µ–¥–Ω–∏–π';
            const status = statusIndex !== -1 && row[statusIndex] ? row[statusIndex].toString().trim() : '–ù–æ–≤–∞—è';

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
            if (!title || !assigneeName) {
                continue;
            }

            // –ù–∞—Ö–æ–¥–∏–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            const employeeId = employeeMapping[assigneeName];

            if (!employeeId) {
                errorCount++;
                errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${assigneeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
                console.log(`‚ùå –°—Ç—Ä–æ–∫–∞ ${i + 1}: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${assigneeName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            const isDuplicate = await checkDuplicateTask(title, employeeId);

            if (isDuplicate) {
                duplicateCount++;
                console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç): "${title}" –¥–ª—è ${assigneeName}`);
                continue;
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
            const taskId = `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã
            const createdDate = new Date('2025-10-03'); // 3 –æ–∫—Ç—è–±—Ä—è 2025
            const deadline = new Date('2025-10-10'); // 10 –æ–∫—Ç—è–±—Ä—è 2025 (—á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π)

            try {
                await pool.query(`
                    INSERT INTO tasks (
                        id, task_id, title, description, status, priority,
                        created_date, deadline, creator_name, creator_id,
                        assignee_id, assignee_name, synced
                    )
                    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
                `, [
                    taskId,
                    taskId,
                    title,
                    description,
                    status,
                    priority,
                    createdDate,
                    deadline,
                    'Admin',
                    '0',
                    employeeId,
                    assigneeName,
                    false
                ]);

                successCount++;
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞: "${title}" –¥–ª—è ${assigneeName}`);

                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –≤—Å—Ç–∞–≤–∫–∞–º–∏
                await new Promise(resolve => setTimeout(resolve, 50));

            } catch (error) {
                errorCount++;
                errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ "${title}": ${error.message}`);
                console.log(`‚ùå –°—Ç—Ä–æ–∫–∞ ${i + 1}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ "${title}": ${error.message}`);
            }
        }

        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        console.log('\n' + '='.repeat(50));
        console.log('üìä –ò–¢–û–ì–ò –ò–ú–ü–û–†–¢–ê:');
        console.log('='.repeat(50));
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${successCount}`);
        console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${duplicateCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
        console.log('='.repeat(50));

        if (errors.length > 0) {
            console.log('\n‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
            errors.forEach(err => console.log(`  - ${err}`));
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        console.error(error);
    } finally {
        await pool.end();
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const excelPath = process.argv[2];

if (!excelPath) {
    console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node import-excel-tasks.js –ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.xlsx');
    console.log('\n–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç Excel:');
    console.log('- –ö–æ–ª–æ–Ω–∫–∞ "–ó–∞–¥–∞—á–∞" –∏–ª–∏ "Title" - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏');
    console.log('- –ö–æ–ª–æ–Ω–∫–∞ "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å" –∏–ª–∏ "Assignee" - –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞');
    console.log('- –ö–æ–ª–æ–Ω–∫–∞ "–û–ø–∏—Å–∞–Ω–∏–µ" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)');
    console.log('- –ö–æ–ª–æ–Ω–∫–∞ "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –°—Ä–µ–¥–Ω–∏–π)');
    console.log('- –ö–æ–ª–æ–Ω–∫–∞ "–°—Ç–∞—Ç—É—Å" (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ù–æ–≤–∞—è)');
    console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:');
    Object.keys(employeeMapping).forEach(name => {
        console.log(`  - ${name}`);
    });
    process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
if (!fs.existsSync(excelPath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${excelPath}`);
    process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importExcelTasks(excelPath);