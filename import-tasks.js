const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const pool = new Pool({
    connectionString: process.env.DATABASE_URL,
    ssl: {
        rejectUnauthorized: false
    }
});

// –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞ –∏—Ö ID
const employeeMapping = {
    'Iurii Bugatti': '907672555',
    'Test User': '1515429',
    '–ê–ª—è': '642664990',
    '–ë–æ—Ä–∏—Å': '385436658',
    '–î–º–∏—Ç—Ä–∏–π': '5937587032',
    '–ï–ª–µ–Ω–∞': '726915228',
    '–ò–≤–∞–Ω': '1734337242',
    '–ò–≥–æ—Ä—å': '321654987',
    '–ö—Å–µ–Ω–∏—è': '1151085087',
    '–ú–∞–∫—Å–∏–º': '303267717'
};

async function importTasks(csvFilePath) {
    console.log('üìù –ò–º–ø–æ—Ä—Ç –∑–∞–¥–∞—á –∏–∑ CSV —Ñ–∞–π–ª–∞...\n');

    try {
        // –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        const fileContent = fs.readFileSync(csvFilePath, 'utf-8');
        const lines = fileContent.split('\n').filter(line => line.trim());

        // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
        const requiredFields = ['title', 'description', 'assignee_name', 'priority', 'status'];
        const missingFields = requiredFields.filter(f => !headers.includes(f));

        if (missingFields.length > 0) {
            throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
        }

        // –ü–∞—Ä—Å–∏–º –∑–∞–¥–∞—á–∏
        const tasks = [];
        for (let i = 1; i < lines.length; i++) {
            const line = lines[i].trim();
            if (!line) continue;

            // –ü—Ä–æ—Å—Ç–æ–π CSV –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç—Ä–æ–∫ —Å –∫–∞–≤—ã—á–∫–∞–º–∏
            const values = [];
            let current = '';
            let inQuotes = false;

            for (let j = 0; j < line.length; j++) {
                const char = line[j];

                if (char === '"') {
                    inQuotes = !inQuotes;
                } else if (char === ',' && !inQuotes) {
                    values.push(current.trim());
                    current = '';
                } else {
                    current += char;
                }
            }
            values.push(current.trim());

            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
            const task = {};
            headers.forEach((header, index) => {
                task[header] = values[index] || '';
            });

            tasks.push(task);
        }

        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${tasks.length}\n`);

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑—É
        let successCount = 0;
        let errorCount = 0;
        const errors = [];

        for (const task of tasks) {
            // –ù–∞—Ö–æ–¥–∏–º ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
            const employeeId = employeeMapping[task.assignee_name];

            if (!employeeId) {
                errorCount++;
                errors.push(`–°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${task.assignee_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`);
                console.log(`‚ùå –û—à–∏–±–∫–∞: –°–æ—Ç—Ä—É–¥–Ω–∏–∫ "${task.assignee_name}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                continue;
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
            const taskId = `task-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã
            const createdDate = new Date('2025-10-03'); // 3 –æ–∫—Ç—è–±—Ä—è 2025
            const deadline = new Date('2025-10-10'); // 10 –æ–∫—Ç—è–±—Ä—è 2025 (—á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π)

            try {
                await pool.query(`
                    INSERT INTO tasks (
                        id, task_id, title, description, status, priority,
                        created_date, deadline, creator_name, creator_id,
                        assignee_id, assignee_name, synced
                    )
                    VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
                `, [
                    taskId,
                    taskId,
                    task.title,
                    task.description || '',
                    task.status || '–ù–æ–≤–∞—è',
                    task.priority || '–°—Ä–µ–¥–Ω–∏–π',
                    createdDate,
                    deadline,
                    'Admin',
                    '0',
                    employeeId,
                    task.assignee_name,
                    false
                ]);

                successCount++;
                console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: "${task.title}" –¥–ª—è ${task.assignee_name}`);
            } catch (error) {
                errorCount++;
                errors.push(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ "${task.title}": ${error.message}`);
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ "${task.title}": ${error.message}`);
            }
        }

        // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
        console.log('\nüìä –ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:');
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${successCount}`);
        console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);

        if (errors.length > 0) {
            console.log('\n‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫:');
            errors.forEach(err => console.log(`  - ${err}`));
        }

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        console.error(error);
    } finally {
        await pool.end();
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const csvPath = process.argv[2];

if (!csvPath) {
    console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É');
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node import-tasks.js –ø—É—Ç—å/–∫/—Ñ–∞–π–ª—É.csv');
    console.log('\n–ü—Ä–∏–º–µ—Ä CSV —Ñ–æ—Ä–º–∞—Ç–∞ (tasks-template.csv):');
    console.log('title,description,assignee_name,priority,status');
    console.log('"–ó–∞–¥–∞—á–∞ 1","–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ 1","–ò–≤–∞–Ω","–í—ã—Å–æ–∫–∏–π","–ù–æ–≤–∞—è"');
    console.log('"–ó–∞–¥–∞—á–∞ 2","–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ 2","–ë–æ—Ä–∏—Å","–°—Ä–µ–¥–Ω–∏–π","–ù–æ–≤–∞—è"');
    console.log('\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:');
    Object.keys(employeeMapping).forEach(name => {
        console.log(`  - ${name}`);
    });
    process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
if (!fs.existsSync(csvPath)) {
    console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${csvPath}`);
    process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–º–ø–æ—Ä—Ç
importTasks(csvPath);